// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/c.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.helptools.c;

import java.io.Reader;
import java.io.StringReader;
import java.io.IOException;

@javax.annotation.Generated("JFlex")

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class CLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int STRING = 4;
  public static final int CLEAN = 6;
  public static final int CLEANFIRST = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\0\2\7\1\12\2\13\1\14"+
    "\1\15\1\7\1\15\1\16\1\17\1\20\11\21\2\7"+
    "\1\22\1\7\1\23\1\7\1\0\4\24\1\25\1\26"+
    "\5\27\1\30\1\27\1\31\6\27\1\32\2\27\1\33"+
    "\2\27\1\13\1\34\1\13\1\7\1\35\1\0\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\27\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\13\1\7\1\13\1\7\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\3\2\4\1\5\1\6"+
    "\2\3\1\7\2\5\2\10\2\5\26\11\1\1\2\12"+
    "\2\0\1\2\2\13\1\14\1\0\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\10\0\1\10\1\23\1\1\1\10"+
    "\1\0\13\11\1\24\10\11\1\24\7\11\1\5\21\11"+
    "\1\0\1\1\2\25\1\0\1\26\4\0\1\27\6\0"+
    "\2\2\1\0\2\10\24\11\1\30\35\11\12\0\2\10"+
    "\45\11\1\27\5\0\1\11\1\5\1\31\25\11\3\0"+
    "\3\11\1\31\20\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u0113\0\u014a"+
    "\0\u0113\0\u0113\0\u0181\0\u01b8\0\u0113\0\u01ef\0\u0226\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u0113\0\u082a\0\u0861\0\u0898\0\u08cf\0\u0113"+
    "\0\u0906\0\u0113\0\u093d\0\u0113\0\u0974\0\u09ab\0\u0113\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u0339\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u0113\0\u1734"+
    "\0\u176b\0\u0113\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5"+
    "\0\u18ec\0\u1923\0\u195a\0\u1991\0\u19c8\0\u0113\0\u0b9a\0\u19ff"+
    "\0\u0113\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80"+
    "\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u0339\0\u1eb9"+
    "\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599"+
    "\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u0339"+
    "\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2"+
    "\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa"+
    "\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u0113\0\u2f44\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u0339\0\u308e\0\u30c5\0\u30fc"+
    "\0\u3133\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u32b4"+
    "\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c"+
    "\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624"+
    "\0\u365b\0\u0339\0\u3692\0\u36c9\0\u3700\0\u3737\0\u376e\0\u37a5"+
    "\0\u37dc\0\u308e\0\u3813\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926"+
    "\0\u395d\0\u3994";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\6\1\7\2\0\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\2\11\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\5\24\1\25\2\24\2\6\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\24\1\35\1\24\1\36"+
    "\1\37\1\40\1\41\1\42\1\24\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\2\24\2\52\1\53\2\52"+
    "\1\54\6\52\1\55\2\52\1\56\47\52\2\57\1\60"+
    "\2\57\1\61\2\57\1\62\23\57\1\63\32\57\1\64"+
    "\1\65\1\66\1\0\1\65\1\66\1\65\60\64\1\67"+
    "\1\70\1\71\1\0\1\70\1\71\1\70\60\67\71\0"+
    "\1\7\125\0\1\72\1\73\3\0\1\74\1\0\1\75"+
    "\3\0\1\76\4\0\1\77\5\0\1\100\2\0\2\100"+
    "\1\0\26\100\1\101\32\100\20\0\2\102\61\0\1\103"+
    "\2\0\1\104\65\0\1\102\1\0\2\21\6\0\1\105"+
    "\1\0\1\105\1\106\14\0\1\105\10\0\1\105\2\0"+
    "\1\106\20\0\1\102\1\0\2\21\6\0\1\105\1\0"+
    "\1\105\15\0\1\105\10\0\1\105\27\0\1\11\67\0"+
    "\1\11\63\0\2\24\2\0\10\24\1\0\32\24\20\0"+
    "\2\24\2\0\6\24\1\107\1\24\1\0\32\24\20\0"+
    "\2\24\2\0\10\24\1\0\15\24\1\110\6\24\1\111"+
    "\5\24\20\0\2\24\2\0\10\24\1\0\11\24\1\112"+
    "\4\24\1\113\2\24\1\114\10\24\20\0\2\24\2\0"+
    "\10\24\1\0\1\24\1\115\6\24\1\116\1\117\4\24"+
    "\1\120\13\24\20\0\2\24\2\0\10\24\1\0\5\24"+
    "\1\121\10\24\1\122\11\24\1\123\1\24\20\0\2\24"+
    "\2\0\10\24\1\0\13\24\1\124\1\24\1\125\11\24"+
    "\1\126\2\24\20\0\2\24\2\0\10\24\1\0\1\24"+
    "\1\127\11\24\1\130\2\24\1\131\2\24\1\132\10\24"+
    "\20\0\2\24\2\0\10\24\1\0\16\24\1\111\13\24"+
    "\20\0\2\24\2\0\10\24\1\0\6\24\1\133\6\24"+
    "\1\134\14\24\20\0\2\24\2\0\10\24\1\0\16\24"+
    "\1\135\13\24\20\0\2\24\2\0\10\24\1\0\24\24"+
    "\1\136\5\24\20\0\2\24\2\0\10\24\1\0\1\24"+
    "\1\137\3\24\1\140\10\24\1\141\13\24\20\0\2\24"+
    "\2\0\10\24\1\0\17\24\1\142\1\24\1\143\10\24"+
    "\20\0\2\24\2\0\10\24\1\0\21\24\1\144\2\24"+
    "\1\145\5\24\20\0\2\24\2\0\10\24\1\0\5\24"+
    "\1\146\24\24\20\0\2\24\2\0\10\24\1\0\10\24"+
    "\1\147\1\150\11\24\1\151\2\24\1\152\3\24\20\0"+
    "\2\24\2\0\10\24\1\0\5\24\1\153\2\24\1\154"+
    "\10\24\1\155\6\24\1\156\1\24\20\0\2\24\2\0"+
    "\10\24\1\0\15\24\1\157\4\24\1\160\7\24\20\0"+
    "\2\24\2\0\10\24\1\0\11\24\1\161\4\24\1\162"+
    "\13\24\20\0\2\24\2\0\10\24\1\0\10\24\1\163"+
    "\21\24\20\0\2\24\2\0\10\24\1\0\16\24\1\164"+
    "\13\24\2\52\1\0\2\52\1\0\6\52\1\165\52\52"+
    "\2\0\1\53\64\0\2\166\1\167\2\166\1\170\6\166"+
    "\1\171\2\166\1\172\47\166\17\0\1\166\47\0\2\57"+
    "\1\0\2\57\1\0\2\57\1\0\23\57\1\63\32\57"+
    "\2\0\1\60\64\0\2\57\1\0\2\57\1\0\61\57"+
    "\1\0\1\65\2\0\1\65\1\0\1\65\62\0\1\66"+
    "\2\0\1\66\62\0\1\70\1\71\1\0\1\70\1\71"+
    "\1\70\62\0\1\71\2\0\1\71\123\0\1\173\74\0"+
    "\1\174\1\0\1\175\3\0\1\176\53\0\1\177\5\0"+
    "\1\200\1\201\62\0\1\202\76\0\1\203\62\0\1\204"+
    "\4\0\1\205\21\0\1\206\54\0\1\100\2\0\2\100"+
    "\1\0\4\100\1\207\54\100\20\0\2\102\3\0\1\210"+
    "\1\211\1\0\1\211\11\0\1\210\1\211\4\0\1\211"+
    "\32\0\1\103\52\0\2\104\1\0\2\104\1\0\61\104"+
    "\30\0\1\105\1\0\1\105\15\0\1\105\10\0\1\105"+
    "\25\0\2\212\2\0\3\212\7\0\6\212\43\0\2\24"+
    "\2\0\4\24\1\213\3\24\1\0\32\24\20\0\2\24"+
    "\2\0\10\24\1\0\4\24\1\143\25\24\20\0\2\24"+
    "\2\0\10\24\1\0\23\24\1\214\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\23\24\1\215\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\16\24\1\216\13\24\20\0\2\24"+
    "\2\0\10\24\1\0\5\24\1\217\24\24\20\0\2\24"+
    "\2\0\10\24\1\0\22\24\1\220\1\221\6\24\20\0"+
    "\2\24\2\0\10\24\1\0\1\24\1\222\30\24\20\0"+
    "\2\24\2\0\10\24\1\0\15\24\1\133\14\24\20\0"+
    "\2\24\2\0\10\24\1\0\14\24\1\223\1\224\6\24"+
    "\1\225\5\24\20\0\2\24\2\0\10\24\1\0\6\24"+
    "\1\226\4\24\1\227\16\24\20\0\2\24\2\0\10\24"+
    "\1\0\24\24\1\230\5\24\20\0\2\24\2\0\10\24"+
    "\1\0\15\24\1\231\14\24\20\0\2\24\2\0\10\24"+
    "\1\0\22\24\1\220\7\24\20\0\2\24\2\0\10\24"+
    "\1\0\24\24\1\232\5\24\20\0\2\24\2\0\10\24"+
    "\1\0\23\24\1\233\6\24\20\0\2\24\2\0\10\24"+
    "\1\0\13\24\1\124\16\24\20\0\2\24\2\0\10\24"+
    "\1\0\16\24\1\234\13\24\20\0\2\24\2\0\10\24"+
    "\1\0\21\24\1\133\10\24\20\0\2\24\2\0\10\24"+
    "\1\0\11\24\1\235\20\24\20\0\2\24\2\0\10\24"+
    "\1\0\13\24\1\236\7\24\1\237\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\15\24\1\240\14\24\20\0\2\24"+
    "\2\0\10\24\1\0\23\24\1\241\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\14\24\1\242\15\24\20\0\2\24"+
    "\2\0\10\24\1\0\26\24\1\133\3\24\20\0\2\24"+
    "\2\0\10\24\1\0\11\24\1\243\11\24\1\143\6\24"+
    "\20\0\2\24\2\0\10\24\1\0\5\24\1\244\24\24"+
    "\20\0\2\24\2\0\10\24\1\0\1\245\31\24\20\0"+
    "\2\24\2\0\10\24\1\0\11\24\1\246\4\24\1\247"+
    "\13\24\20\0\2\24\2\0\10\24\1\0\2\24\1\250"+
    "\27\24\20\0\2\24\2\0\10\24\1\0\7\24\1\251"+
    "\1\24\1\252\11\24\1\253\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\16\24\1\254\13\24\20\0\2\24\2\0"+
    "\10\24\1\0\7\24\1\255\21\24\1\256\20\0\2\24"+
    "\2\0\10\24\1\0\1\24\1\257\17\24\1\260\10\24"+
    "\20\0\2\24\2\0\10\24\1\0\11\24\1\261\20\24"+
    "\20\0\2\24\2\0\10\24\1\0\14\24\1\262\15\24"+
    "\20\0\2\24\2\0\10\24\1\0\11\24\1\263\7\24"+
    "\1\264\10\24\20\0\2\24\2\0\10\24\1\0\24\24"+
    "\1\220\3\24\1\133\1\24\20\0\2\24\2\0\10\24"+
    "\1\0\17\24\1\265\12\24\20\0\2\24\2\0\10\24"+
    "\1\0\11\24\1\266\10\24\1\267\7\24\20\0\2\24"+
    "\2\0\10\24\1\0\11\24\1\270\20\24\20\0\2\24"+
    "\2\0\10\24\1\0\21\24\1\271\10\24\20\0\2\24"+
    "\2\0\10\24\1\0\11\24\1\272\1\24\1\273\16\24"+
    "\20\0\2\24\2\0\10\24\1\0\11\24\1\274\20\24"+
    "\20\0\2\24\2\0\10\24\1\0\21\24\1\143\10\24"+
    "\2\166\1\0\2\166\1\0\6\166\1\165\2\166\1\0"+
    "\47\166\2\52\1\0\2\52\1\0\6\52\1\165\2\52"+
    "\1\56\47\52\2\0\1\167\64\0\2\166\1\0\2\166"+
    "\1\0\6\166\1\171\2\166\1\172\47\166\43\0\1\75"+
    "\71\0\1\275\10\0\1\276\50\0\1\277\103\0\1\300"+
    "\51\0\1\301\10\0\1\204\70\0\1\302\52\0\1\303"+
    "\100\0\1\276\52\0\1\304\71\0\1\301\73\0\1\305"+
    "\35\0\1\306\2\0\2\307\65\0\2\212\2\0\3\212"+
    "\1\0\1\105\1\0\1\105\3\0\6\212\4\0\1\105"+
    "\10\0\1\105\25\0\2\24\2\0\4\24\1\310\3\24"+
    "\1\0\32\24\20\0\2\24\2\0\10\24\1\0\16\24"+
    "\1\133\13\24\20\0\2\24\2\0\10\24\1\0\1\24"+
    "\1\311\14\24\1\312\13\24\20\0\2\24\2\0\10\24"+
    "\1\0\13\24\1\237\16\24\20\0\2\24\2\0\10\24"+
    "\1\0\1\24\1\313\30\24\20\0\2\24\2\0\10\24"+
    "\1\0\5\24\1\133\24\24\20\0\2\24\2\0\10\24"+
    "\1\0\3\24\1\314\26\24\20\0\2\24\2\0\10\24"+
    "\1\0\21\24\1\237\10\24\20\0\2\24\2\0\10\24"+
    "\1\0\17\24\1\315\12\24\20\0\2\24\2\0\10\24"+
    "\1\0\22\24\1\316\1\317\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\23\24\1\133\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\1\24\1\320\30\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\321\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\2\24\1\322\27\24\20\0\2\24\2\0"+
    "\10\24\1\0\1\24\1\323\30\24\20\0\2\24\2\0"+
    "\10\24\1\0\14\24\1\133\15\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\324\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\1\24\1\325\30\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\326\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\11\24\1\327\20\24\20\0\2\24\2\0"+
    "\10\24\1\0\7\24\1\237\22\24\20\0\2\24\2\0"+
    "\10\24\1\0\1\24\1\330\30\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\331\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\15\24\1\332\14\24\20\0\2\24\2\0"+
    "\10\24\1\0\21\24\1\333\10\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\334\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\25\24\1\335\4\24\20\0\2\24\2\0"+
    "\10\24\1\0\23\24\1\336\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\13\24\1\337\16\24\20\0\2\24\2\0"+
    "\10\24\1\0\11\24\1\340\20\24\20\0\2\24\2\0"+
    "\10\24\1\0\15\24\1\341\14\24\20\0\2\24\2\0"+
    "\10\24\1\0\24\24\1\342\5\24\20\0\2\24\2\0"+
    "\10\24\1\0\21\24\1\325\10\24\20\0\2\24\2\0"+
    "\10\24\1\0\15\24\1\343\14\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\344\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\23\24\1\345\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\24\24\1\346\5\24\20\0\2\24\2\0"+
    "\10\24\1\0\23\24\1\221\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\17\24\1\347\12\24\20\0\2\24\2\0"+
    "\10\24\1\0\22\24\1\133\7\24\20\0\2\24\2\0"+
    "\10\24\1\0\16\24\1\140\13\24\20\0\2\24\2\0"+
    "\10\24\1\0\5\24\1\350\24\24\20\0\2\24\2\0"+
    "\10\24\1\0\16\24\1\351\13\24\20\0\2\24\2\0"+
    "\10\24\1\0\11\24\1\352\20\24\20\0\2\24\2\0"+
    "\10\24\1\0\15\24\1\353\14\24\20\0\2\24\2\0"+
    "\10\24\1\0\23\24\1\354\6\24\20\0\2\24\2\0"+
    "\10\24\1\0\4\24\1\237\25\24\20\0\2\24\2\0"+
    "\10\24\1\0\1\24\1\355\30\24\20\0\2\24\2\0"+
    "\10\24\1\0\13\24\1\220\16\24\43\0\1\356\65\0"+
    "\1\356\72\0\1\275\73\0\1\357\55\0\1\275\77\0"+
    "\1\360\63\0\1\361\62\0\1\362\74\0\1\363\34\0"+
    "\2\307\65\0\2\307\4\0\1\211\1\0\1\211\12\0"+
    "\1\211\4\0\1\211\36\0\2\24\2\0\10\24\1\0"+
    "\15\24\1\364\14\24\20\0\2\24\2\0\10\24\1\0"+
    "\21\24\1\365\10\24\20\0\2\24\2\0\10\24\1\0"+
    "\12\24\1\133\17\24\20\0\2\24\2\0\10\24\1\0"+
    "\10\24\1\133\21\24\20\0\2\24\2\0\10\24\1\0"+
    "\13\24\1\365\16\24\20\0\2\24\2\0\10\24\1\0"+
    "\23\24\1\366\6\24\20\0\2\24\2\0\10\24\1\0"+
    "\11\24\1\367\20\24\20\0\2\24\2\0\10\24\1\0"+
    "\24\24\1\370\5\24\20\0\2\24\2\0\10\24\1\0"+
    "\23\24\1\220\6\24\20\0\2\24\2\0\10\24\1\0"+
    "\13\24\1\371\16\24\20\0\2\24\2\0\10\24\1\0"+
    "\14\24\1\372\15\24\20\0\2\24\2\0\10\24\1\0"+
    "\21\24\1\373\10\24\20\0\2\24\2\0\10\24\1\0"+
    "\23\24\1\237\6\24\20\0\2\24\2\0\10\24\1\0"+
    "\15\24\1\374\14\24\20\0\2\24\2\0\10\24\1\0"+
    "\15\24\1\375\14\24\20\0\2\24\2\0\10\24\1\0"+
    "\2\24\1\376\27\24\20\0\2\24\2\0\10\24\1\0"+
    "\22\24\1\377\7\24\20\0\2\24\2\0\10\24\1\0"+
    "\13\24\1\236\16\24\20\0\2\24\2\0\10\24\1\0"+
    "\1\24\1\u0100\30\24\20\0\2\24\2\0\10\24\1\0"+
    "\20\24\1\365\11\24\20\0\2\24\2\0\10\24\1\0"+
    "\1\24\1\u0101\30\24\20\0\2\24\2\0\10\24\1\0"+
    "\5\24\1\u0102\24\24\20\0\2\24\2\0\10\24\1\0"+
    "\11\24\1\u0103\20\24\20\0\2\24\2\0\10\24\1\0"+
    "\22\24\1\u0104\7\24\20\0\2\24\2\0\10\24\1\0"+
    "\23\24\1\u0105\6\24\20\0\2\24\2\0\10\24\1\0"+
    "\21\24\1\117\10\24\20\0\2\24\2\0\10\24\1\0"+
    "\5\24\1\272\24\24\20\0\2\24\2\0\10\24\1\0"+
    "\16\24\1\u0106\13\24\20\0\2\24\2\0\10\24\1\0"+
    "\11\24\1\u0107\20\24\20\0\2\24\2\0\10\24\1\0"+
    "\3\24\1\325\26\24\20\0\2\24\2\0\10\24\1\0"+
    "\13\24\1\u0108\16\24\20\0\2\24\2\0\10\24\1\0"+
    "\4\24\1\u0109\4\24\1\364\20\24\20\0\2\24\2\0"+
    "\10\24\1\0\15\24\1\237\14\24\20\0\2\24\2\0"+
    "\10\24\1\0\7\24\1\255\22\24\20\0\2\24\2\0"+
    "\10\24\1\0\7\24\1\133\22\24\20\0\2\24\2\0"+
    "\10\24\1\0\24\24\1\u010a\5\24\20\0\2\24\2\0"+
    "\10\24\1\0\23\24\1\u010b\6\24\56\0\1\356\66\0"+
    "\1\u010c\71\0\1\u010d\56\0\1\u010e\61\0\1\356\42\0"+
    "\2\24\2\0\10\24\1\0\4\24\1\365\25\24\20\0"+
    "\2\24\2\0\10\24\1\0\1\u010f\31\24\20\0\2\24"+
    "\2\0\10\24\1\0\15\24\1\u0110\14\24\20\0\2\24"+
    "\2\0\10\24\1\0\13\24\1\225\16\24\20\0\2\24"+
    "\2\0\10\24\1\0\5\24\1\237\24\24\20\0\2\24"+
    "\2\0\10\24\1\0\11\24\1\u0111\20\24\20\0\2\24"+
    "\2\0\10\24\1\0\15\24\1\u0112\14\24\20\0\2\24"+
    "\2\0\10\24\1\0\4\24\1\u0112\25\24\20\0\2\24"+
    "\2\0\10\24\1\0\5\24\1\u0112\24\24\20\0\2\24"+
    "\2\0\10\24\1\0\13\24\1\375\16\24\20\0\2\24"+
    "\2\0\10\24\1\0\17\24\1\u0113\12\24\20\0\2\24"+
    "\2\0\10\24\1\0\23\24\1\u0114\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\23\24\1\375\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\3\24\1\u0115\26\24\20\0\2\24"+
    "\2\0\10\24\1\0\3\24\1\u0112\26\24\20\0\2\24"+
    "\2\0\10\24\1\0\23\24\1\u0116\6\24\20\0\2\24"+
    "\2\0\10\24\1\0\5\24\1\u0117\24\24\20\0\2\24"+
    "\2\0\10\24\1\0\6\24\1\133\23\24\20\0\2\24"+
    "\2\0\10\24\1\0\3\24\1\366\26\24\20\0\2\24"+
    "\2\0\10\24\1\0\1\24\1\321\30\24\20\0\2\24"+
    "\2\0\10\24\1\0\5\24\1\u0106\24\24\20\0\2\24"+
    "\2\0\10\24\1\0\1\24\1\u0118\30\24\20\0\2\24"+
    "\2\0\10\24\1\0\11\24\1\376\20\24\60\0\1\356"+
    "\47\0\1\276\63\0\1\356\50\0\2\24\2\0\10\24"+
    "\1\0\3\24\1\u0119\26\24\20\0\2\24\2\0\10\24"+
    "\1\0\24\24\1\220\5\24\20\0\2\24\2\0\10\24"+
    "\1\0\3\24\1\u011a\26\24\20\0\2\24\2\0\10\24"+
    "\1\0\1\24\1\u011b\30\24\20\0\2\24\2\0\10\24"+
    "\1\0\16\24\1\312\13\24\20\0\2\24\2\0\10\24"+
    "\1\0\23\24\1\u011c\6\24\20\0\2\24\2\0\10\24"+
    "\1\0\5\24\1\u011d\24\24\20\0\2\24\2\0\10\24"+
    "\1\0\21\24\1\u011e\10\24\20\0\2\24\2\0\10\24"+
    "\1\0\13\24\1\u0112\16\24\20\0\2\24\2\0\10\24"+
    "\1\0\1\24\1\u011f\30\24\20\0\2\24\2\0\10\24"+
    "\1\0\3\24\1\220\26\24\20\0\2\24\2\0\10\24"+
    "\1\0\5\24\1\374\24\24\20\0\2\24\2\0\10\24"+
    "\1\0\21\24\1\u0112\10\24\20\0\2\24\2\0\10\24"+
    "\1\0\17\24\1\u0120\12\24\20\0\2\24\2\0\10\24"+
    "\1\0\22\24\1\225\7\24\20\0\2\24\2\0\10\24"+
    "\1\0\21\24\1\u0121\10\24\20\0\2\24\2\0\10\24"+
    "\1\0\5\24\1\u0122\24\24\20\0\2\24\2\0\10\24"+
    "\1\0\23\24\1\u011a\6\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14795];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\2\11\1\1\2\11\2\1\1\11"+
    "\35\1\1\11\1\1\2\0\1\1\1\11\1\1\1\11"+
    "\1\0\1\11\2\1\1\11\2\1\10\0\4\1\1\0"+
    "\56\1\1\0\1\1\1\11\1\1\1\0\1\11\4\0"+
    "\1\1\6\0\1\11\1\1\1\0\1\11\63\1\12\0"+
    "\47\1\1\11\5\0\30\1\3\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[290];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    private int whitesOnFirstLine;
    private int saveLexState;
    private AbstractCCodeHandler handler;

    public CLexer() { }

    private String trimEnd(String str) {
        int end = str.length() - 1;
        int i = end;
        for (; i >= 0; i--) {
           char c = str.charAt(i);
           if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
              break;
           }
        }
        if (i != end) {
           return str.substring(0, i + 1);
        }

        return str;
    }

    public String convert(AbstractCCodeHandler h, String code) {
        Reader reader = new StringReader(trimEnd(code));
        String str = convert(h, reader, true);
        try {
          reader.close();
        } catch (IOException e) { }

        return str;
    }

    public String convert(AbstractCCodeHandler h, Reader code, boolean ret) {
        if (code == null) {
           return null;
        } else {
           handler = h;
           whitesOnFirstLine = 0;
           yyreset(code);
           yybegin(CLEANFIRST);
           try {
               yylex();
           } catch (IOException e) {
               return null;
           }
           if (ret) {
               return h.toString();
           }
           return "";
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { handler.handleComment(yytext());
            }
            // fall through
          case 26: break;
          case 2:
            { handler.handleString(yytext());
            }
            // fall through
          case 27: break;
          case 3:
            { handler.handleDefault(yytext());
            }
            // fall through
          case 28: break;
          case 4:
            { handler.handleNothing("\n");
                                   saveLexState = YYINITIAL;
                                   yybegin(CLEAN);
            }
            // fall through
          case 29: break;
          case 5:
            { handler.handleOperator(yytext());
            }
            // fall through
          case 30: break;
          case 6:
            { yybegin(STRING);
                                   handler.handleString(yytext());
            }
            // fall through
          case 31: break;
          case 7:
            { handler.handleOpenClose(yytext());
            }
            // fall through
          case 32: break;
          case 8:
            { handler.handleNumber(yytext());
            }
            // fall through
          case 33: break;
          case 9:
            { handler.handleId(yytext());
            }
            // fall through
          case 34: break;
          case 10:
            { handler.handleNothing("\n");
                                   saveLexState = COMMENT;
                                   yybegin(CLEAN);
            }
            // fall through
          case 35: break;
          case 11:
            { handler.handleNothing("\n");
                                   saveLexState = STRING;
                                   yybegin(CLEAN);
            }
            // fall through
          case 36: break;
          case 12:
            { yybegin(YYINITIAL);
                                   handler.handleString(yytext());
            }
            // fall through
          case 37: break;
          case 13:
            { yypushback(1);
                                   yybegin(saveLexState);
            }
            // fall through
          case 38: break;
          case 14:
            { int len = yylength() - whitesOnFirstLine;
                                   if (len > 0) {
                                      yypushback(len);
                                   }
                                   yybegin(saveLexState);
            }
            // fall through
          case 39: break;
          case 15:
            { handler.handleNothing("\n");
            }
            // fall through
          case 40: break;
          case 16:
            { yypushback(1);
                                   yybegin(YYINITIAL);
            }
            // fall through
          case 41: break;
          case 17:
            { whitesOnFirstLine = yylength();
                                   yybegin(YYINITIAL);
            }
            // fall through
          case 42: break;
          case 18:
            { 
            }
            // fall through
          case 43: break;
          case 19:
            { yybegin(COMMENT);
                                   handler.handleComment(yytext());
            }
            // fall through
          case 44: break;
          case 20:
            { handler.handleKeyword(yytext());
            }
            // fall through
          case 45: break;
          case 21:
            { handler.handleComment("*");
                                   handler.handleNothing("\n");
                                   saveLexState = COMMENT;
                                   yybegin(CLEAN);
            }
            // fall through
          case 46: break;
          case 22:
            { yybegin(YYINITIAL);
                                   handler.handleComment(yytext());
            }
            // fall through
          case 47: break;
          case 23:
            { handler.handlePreprocessor(yytext());
            }
            // fall through
          case 48: break;
          case 24:
            { handler.handleType(yytext());
            }
            // fall through
          case 49: break;
          case 25:
            { handler.handleModifier(yytext());
            }
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
