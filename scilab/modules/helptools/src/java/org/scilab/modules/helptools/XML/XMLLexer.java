// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/xml.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.helptools.XML;

import java.io.Reader;
import java.io.StringReader;
import java.io.IOException;

@javax.annotation.Generated("JFlex")

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class XMLLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CDATA = 4;
  public static final int TAG = 6;
  public static final int PI = 8;
  public static final int CLEAN = 10;
  public static final int CLEANFIRST = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\2\u0100\1\u0200\34\u0300\1\u0400\1\u0500\12\u0600\3\u0700"+
    "\1\u0800\1\u0900\247\u0a00\10\u0b00\31\u0600\4\u0c00\1\u0d00\1\u0e00"+
    "\1\u0f00\u1000\u0600";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\1\6\2\0\1\7\1\10\5\0\1\11\1\12"+
    "\1\13\12\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\0\1\23\1\24\1\25\1\26\17\24\1\27\6\24"+
    "\1\30\1\12\1\31\1\12\1\15\1\12\32\24\12\12"+
    "\1\32\72\12\27\15\1\12\37\15\1\12\u0108\15\160\12"+
    "\16\15\1\12\u0181\15\14\12\2\15\32\12\2\32\27\12"+
    "\57\0\u0120\15\u0170\0\u01f0\15\21\0\u01ff\15\u0100\3\u01d0\15"+
    "\40\0\u020e\15\2\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[4096];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\4\0\1\1\1\4\1\1\1\0"+
    "\1\2\1\5\1\0\1\3\1\6\1\0\1\7\1\10"+
    "\1\11\4\7\1\12\1\13\1\7\1\14\1\15\1\16"+
    "\1\17\1\20\1\7\1\21\2\0\1\22\6\0\1\23"+
    "\1\0\1\24\1\0\1\25\1\26\3\0\1\27\1\0"+
    "\1\30\1\0\1\31\1\32\2\0\1\33\4\0\1\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u01cb\0\u0288\0\u02a3\0\u01cb\0\u02be\0\u02d9\0\u01cb\0\u02f4"+
    "\0\u030f\0\275\0\u032a\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1"+
    "\0\u03cc\0\u03e7\0\u021c\0\u01cb\0\u0237\0\u01cb\0\u026d\0\u01cb"+
    "\0\u01cb\0\u0402\0\u041d\0\u0438\0\u0453\0\u046e\0\u01cb\0\u0489"+
    "\0\u01cb\0\u01cb\0\u04a4\0\u04bf\0\u01cb\0\u04da\0\u04f5\0\u0510"+
    "\0\u052b\0\u01cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\10\1\11\4\10\1\12\7\10\1\13\13\10\2\14"+
    "\1\15\6\14\1\16\21\14\2\17\1\20\26\17\1\21"+
    "\1\17\1\22\1\23\1\24\1\0\1\22\1\25\2\22"+
    "\1\26\2\22\1\27\1\22\1\30\3\22\1\31\1\22"+
    "\5\30\2\22\1\0\1\22\1\23\1\32\1\0\1\22"+
    "\1\25\2\22\1\26\4\22\1\30\4\22\1\33\5\30"+
    "\2\22\1\0\1\34\1\35\1\36\1\0\26\34\1\0"+
    "\1\37\1\40\1\41\1\0\26\37\1\0\2\10\1\0"+
    "\14\10\1\0\13\10\2\0\1\11\30\0\2\10\1\0"+
    "\3\10\1\12\5\10\1\12\1\10\1\42\1\0\3\10"+
    "\5\12\3\10\4\0\1\43\6\0\1\44\1\0\1\45"+
    "\4\0\1\46\5\45\3\0\2\14\1\0\6\14\1\47"+
    "\21\14\2\0\1\15\30\0\2\14\1\0\6\14\1\50"+
    "\21\14\2\17\1\0\26\17\1\51\1\17\2\0\1\20"+
    "\30\0\2\17\1\0\26\17\1\52\1\17\34\0\1\23"+
    "\33\0\1\24\30\0\2\53\1\0\2\53\1\54\25\53"+
    "\2\55\1\0\5\55\1\54\22\55\21\0\1\56\22\0"+
    "\2\57\1\0\2\57\2\0\1\60\2\0\10\57\2\0"+
    "\1\32\51\0\1\61\12\0\1\35\33\0\1\36\31\0"+
    "\1\40\1\41\32\0\1\41\41\0\1\62\16\0\1\63"+
    "\17\0\1\64\5\0\5\64\14\0\2\45\1\0\2\45"+
    "\5\0\10\45\15\0\1\65\5\0\5\65\3\0\2\14"+
    "\1\0\6\14\1\66\23\14\1\0\16\14\1\67\11\14"+
    "\2\17\1\0\26\17\1\70\3\17\1\0\16\17\1\71"+
    "\11\17\11\0\1\72\46\0\1\73\6\0\1\74\7\0"+
    "\2\64\1\0\2\64\3\0\1\75\1\0\10\64\11\0"+
    "\2\65\1\0\2\65\5\0\10\65\2\14\1\0\16\14"+
    "\1\0\11\14\2\17\1\0\16\17\1\0\11\17\26\0"+
    "\1\76\5\0\1\74\17\0\1\75\34\0\1\77\36\0"+
    "\1\100\26\0\1\101\37\0\1\102\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1350];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\1\4\0\3\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\11\6\1\1\11\2\1\1\11\2\1\1\11\3\1"+
    "\2\0\1\1\6\0\1\11\1\0\1\11\1\0\2\11"+
    "\3\0\1\1\1\0\1\11\1\0\2\11\2\0\1\11"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    private int whitesOnFirstLine;
    private int saveLexState;
    private AbstractXMLCodeHandler handler;

    public XMLLexer() { }

    private String trimEnd(String str) {
        int end = str.length() - 1;
        int i = end;
        for (; i >= 0; i--) {
           char c = str.charAt(i);
           if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
              break;
           }
        }
        if (i != end) {
           return str.substring(0, i + 1);
        }

        return str;
    }

    public String convert(AbstractXMLCodeHandler h, String code) {
        Reader reader = new StringReader(trimEnd(code));
        String str = convert(h, reader, true);
        try {
          reader.close();
        } catch (IOException e) { }

        return str;
    }

    public String convert(AbstractXMLCodeHandler h, Reader code, boolean ret) {
        if (code == null) {
           return null;
        } else {
           handler = h;
           whitesOnFirstLine = 0;
           yyreset(code);
           yybegin(CLEANFIRST);
           try {
               yylex();
           } catch (IOException e) {
               return null;
           }
           if (ret) {
               return h.toString();
           }
           return "";
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public XMLLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { handler.handleDefault(yytext());
            }
            // fall through
          case 29: break;
          case 2:
            { handler.handleComment(yytext());
            }
            // fall through
          case 30: break;
          case 3:
            { handler.handleCdata(yytext());
            }
            // fall through
          case 31: break;
          case 4:
            { handler.handleNothing("\n");
                                     saveLexState = YYINITIAL;
                                     yybegin(CLEAN);
            }
            // fall through
          case 32: break;
          case 5:
            { handler.handleNothing("\n");
                                     saveLexState = COMMENT;
                                     yybegin(CLEAN);
            }
            // fall through
          case 33: break;
          case 6:
            { handler.handleNothing("\n");
                                     saveLexState = CDATA;
                                     yybegin(CLEAN);
            }
            // fall through
          case 34: break;
          case 7:
            { 
            }
            // fall through
          case 35: break;
          case 8:
            { handler.handleNothing(" ");
            }
            // fall through
          case 36: break;
          case 9:
            { handler.handleNothing("\n");
                                     saveLexState = TAG;
                                     yybegin(CLEAN);
            }
            // fall through
          case 37: break;
          case 10:
            { yybegin(YYINITIAL);
                                     handler.handleGreat("&#0062;");
            }
            // fall through
          case 38: break;
          case 11:
            { handler.handleNothing("\n");
                                     saveLexState = PI;
                                     yybegin(CLEAN);
            }
            // fall through
          case 39: break;
          case 12:
            { yypushback(1);
                                     yybegin(saveLexState);
            }
            // fall through
          case 40: break;
          case 13:
            { int len = yylength() - whitesOnFirstLine;
                                     if (len > 0) {
                                        yypushback(len);
                                     }
                                     yybegin(saveLexState);
            }
            // fall through
          case 41: break;
          case 14:
            { handler.handleNothing("\n");
            }
            // fall through
          case 42: break;
          case 15:
            { yypushback(1);
                                     yybegin(YYINITIAL);
            }
            // fall through
          case 43: break;
          case 16:
            { whitesOnFirstLine = yylength();
                                     yybegin(YYINITIAL);
            }
            // fall through
          case 44: break;
          case 17:
            { handler.handleEntity("&amp;" + yytext().substring(1));
            }
            // fall through
          case 45: break;
          case 18:
            { yybegin(TAG);
                                     handler.handleLow("&#0060;");
                                     handler.handleOpenTagName(yytext().substring(1));
            }
            // fall through
          case 46: break;
          case 19:
            { handler.handleAttributeValue(yytext());
            }
            // fall through
          case 47: break;
          case 20:
            { yybegin(YYINITIAL);
                                     handler.handleAutoClose("/&#0062;");
            }
            // fall through
          case 48: break;
          case 21:
            { String str = yytext();
                                     handler.handleAttributeName(str.substring(0, str.length() - 1));
                                     handler.handleEqual("=");
            }
            // fall through
          case 49: break;
          case 22:
            { yybegin(YYINITIAL);
                                     handler.handleCloseInstr("?&#0062;");
            }
            // fall through
          case 50: break;
          case 23:
            { yybegin(PI);
                                     handler.handleOpenInstr("&#0060;?");
                                     handler.handleInstrName(yytext().substring(2));
            }
            // fall through
          case 51: break;
          case 24:
            { yybegin(YYINITIAL);
                                     handler.handleCommentEnd("--&#0062;");
            }
            // fall through
          case 52: break;
          case 25:
            { yybegin(YYINITIAL);
                                     handler.handleCdataEnd("]]&#0062;");
            }
            // fall through
          case 53: break;
          case 26:
            { yybegin(COMMENT);
                                     handler.handleOpenComment("&#0060;!--");
            }
            // fall through
          case 54: break;
          case 27:
            { handler.handleLowClose("&#0060;/");
                                     String str = yytext();
                                     handler.handleOpenTagName(str.substring(2, str.length() - 1).trim());
                                     handler.handleGreat("&#0062;");
            }
            // fall through
          case 55: break;
          case 28:
            { yybegin(CDATA);
                                     handler.handleOpenCdata("&#0060;![CDATA[");
            }
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
