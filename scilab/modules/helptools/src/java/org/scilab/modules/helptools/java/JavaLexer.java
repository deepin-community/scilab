// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/java.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.helptools.java;

import java.io.Reader;
import java.io.StringReader;
import java.io.IOException;

import org.scilab.modules.helptools.c.AbstractCCodeHandler;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class JavaLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int CLEAN = 4;
  public static final int CLEANFIRST = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\2\0\2\7\1\11\2\12\1\13\1\14"+
    "\1\7\1\14\1\15\1\16\1\17\11\20\2\7\1\21"+
    "\1\7\1\22\1\7\1\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\2\31\1\32\2\31\1\33\1\34\1\35"+
    "\1\36\1\37\1\31\1\40\1\41\1\42\1\43\1\44"+
    "\1\31\1\45\2\31\1\12\1\46\1\12\1\7\1\47"+
    "\1\0\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\31\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\12\1\7\1\12\1\7\6\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\0\1\2\2\3\1\4\2\2\1\5"+
    "\2\4\2\6\2\4\37\7\1\1\2\10\2\0\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\0\1\17\3\0"+
    "\1\6\1\20\1\1\1\6\1\0\1\4\35\7\1\21"+
    "\7\7\1\21\17\7\1\0\1\1\2\22\1\0\1\23"+
    "\1\17\1\0\1\6\50\7\1\24\17\7\1\0\1\6"+
    "\3\7\1\24\55\7\1\24\23\7\1\25\10\7\1\21"+
    "\24\7\1\24\10\7\1\25\153\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0104\0\u0145\0\u0104"+
    "\0\u0186\0\u01c7\0\u0104\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c"+
    "\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\u0104\0\u0bae\0\u0bef\0\u0c30\0\u0104\0\u0c71\0\u0cb2"+
    "\0\u0104\0\u0cf3\0\u0d34\0\u0186\0\u0104\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0104\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u10c2\0\u16da\0\u171b\0\u175c\0\u179d"+
    "\0\u17de\0\u181f\0\u1860\0\u0514\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u0104\0\u1cf2\0\u1d33"+
    "\0\u0104\0\u0db6\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1"+
    "\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9"+
    "\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1"+
    "\0\u2d32\0\u0514\0\u2d73\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0"+
    "\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8"+
    "\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0"+
    "\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8"+
    "\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u38e0"+
    "\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8"+
    "\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0"+
    "\0\u3d31\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8"+
    "\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u2ae9\0\u403d\0\u407e\0\u40bf"+
    "\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7"+
    "\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u44cf"+
    "\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655\0\u4696\0\u46d7"+
    "\0\u4718\0\u4759\0\u0514\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e"+
    "\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6"+
    "\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c\0\u4c6d\0\u4cae"+
    "\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6"+
    "\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u50be"+
    "\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244\0\u5285\0\u52c6"+
    "\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce"+
    "\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613\0\u5654\0\u5695\0\u56d6"+
    "\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b\0\u585c\0\u589d\0\u58de"+
    "\0\u591f\0\u5960\0\u59a1\0\u59e2\0\u5a23\0\u5a64\0\u5aa5\0\u5ae6"+
    "\0\u5b27\0\u5b68\0\u5ba9\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee"+
    "\0\u5d2f\0\u5d70\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6"+
    "\0\u5f37\0\u5f78\0\u5fb9\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe"+
    "\0\u613f\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\5\1\6\2\0\1\7\1\5\1\10\1\11\1\12"+
    "\1\13\2\10\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\30\1\33\1\34\1\30\1\35\1\36\1\37"+
    "\1\40\1\41\1\30\2\5\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\30\1\51\2\30\1\32\1\30"+
    "\1\52\1\30\1\53\1\54\1\55\1\56\1\30\1\57"+
    "\1\60\3\30\2\61\1\62\2\61\1\63\5\61\1\64"+
    "\2\61\1\65\62\61\1\66\1\67\1\70\1\0\1\67"+
    "\1\70\1\67\72\66\1\71\1\72\1\73\1\0\1\72"+
    "\1\73\1\72\72\71\103\0\1\6\76\0\2\74\1\0"+
    "\2\74\1\0\2\74\1\75\35\74\1\76\32\74\1\77"+
    "\2\0\2\77\1\0\40\77\1\100\32\77\17\0\2\101"+
    "\73\0\1\102\2\0\1\103\77\0\1\101\1\0\2\17"+
    "\12\0\1\104\11\0\1\105\15\0\1\104\12\0\1\105"+
    "\17\0\1\101\1\0\2\17\12\0\1\104\27\0\1\104"+
    "\36\0\1\10\101\0\1\106\75\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\107\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\17\30\1\110\10\30\1\111\1\30\17\0\2\30"+
    "\2\0\23\30\1\0\10\30\1\112\3\30\1\113\15\30"+
    "\17\0\2\30\2\0\23\30\1\0\17\30\1\114\12\30"+
    "\17\0\2\30\2\0\23\30\1\0\27\30\1\115\2\30"+
    "\17\0\2\30\2\0\23\30\1\0\14\30\1\116\15\30"+
    "\17\0\2\30\2\0\23\30\1\0\32\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\117\1\30\1\120\13\30"+
    "\17\0\2\30\2\0\23\30\1\0\17\30\1\121\12\30"+
    "\17\0\2\30\2\0\23\30\1\0\5\30\1\122\11\30"+
    "\1\123\4\30\1\124\5\30\17\0\2\30\2\0\23\30"+
    "\1\0\2\30\1\125\27\30\17\0\2\30\2\0\23\30"+
    "\1\0\24\30\1\126\5\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\127\2\30\1\130\12\30\1\131\6\30"+
    "\17\0\2\30\2\0\23\30\1\0\10\30\1\132\21\30"+
    "\17\0\2\30\2\0\23\30\1\0\16\30\1\133\13\30"+
    "\17\0\2\30\2\0\23\30\1\0\17\30\1\134\12\30"+
    "\17\0\2\30\2\0\23\30\1\0\2\30\1\135\27\30"+
    "\17\0\2\30\2\0\23\30\1\0\17\30\1\110\1\30"+
    "\1\136\6\30\1\111\1\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\137\6\30\1\140\3\30\1\141\2\30"+
    "\1\142\12\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\143\11\30\1\144\12\30\17\0\2\30\2\0\23\30"+
    "\1\0\14\30\1\145\1\30\1\146\10\30\1\147\2\30"+
    "\17\0\2\30\2\0\23\30\1\0\1\30\1\150\7\30"+
    "\1\151\2\30\1\116\2\30\1\152\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\153\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\6\30\1\154\6\30\1\155\1\156"+
    "\13\30\17\0\2\30\2\0\23\30\1\0\1\30\1\157"+
    "\3\30\1\160\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\161\17\30\1\162\2\30\1\163\5\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\164\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\10\30\1\130\12\30\1\165"+
    "\1\166\1\30\1\167\3\30\17\0\2\30\2\0\23\30"+
    "\1\0\10\30\1\170\10\30\1\171\10\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\172\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\10\30\1\173\21\30\2\61\1\0"+
    "\2\61\1\0\5\61\1\174\65\61\2\0\1\62\76\0"+
    "\2\175\1\176\2\175\1\177\5\175\1\200\2\175\1\201"+
    "\62\175\16\0\1\175\63\0\1\67\2\0\1\67\1\0"+
    "\1\67\74\0\1\70\2\0\1\70\74\0\1\72\1\73"+
    "\1\0\1\72\1\73\1\72\74\0\1\73\2\0\1\73"+
    "\73\0\2\74\1\0\2\74\1\0\73\74\11\0\1\75"+
    "\67\0\1\77\2\0\2\77\1\0\3\77\1\202\67\77"+
    "\17\0\2\101\5\0\1\104\1\203\1\104\22\0\1\104"+
    "\1\203\1\104\36\0\1\102\65\0\2\103\1\0\2\103"+
    "\1\0\73\103\17\0\2\204\2\0\6\204\17\0\6\204"+
    "\45\0\1\10\75\0\2\30\2\0\23\30\1\0\11\30"+
    "\1\205\7\30\1\206\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\17\30\1\207\12\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\210\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\211\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\212\15\30\1\213\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\24\30\1\214\5\30\17\0\2\30"+
    "\2\0\23\30\1\0\3\30\1\215\26\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\216\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\217\15\30\17\0\2\30"+
    "\2\0\23\30\1\0\4\30\1\220\15\30\1\221\1\222"+
    "\6\30\17\0\2\30\2\0\23\30\1\0\16\30\1\223"+
    "\13\30\17\0\2\30\2\0\23\30\1\0\7\30\1\224"+
    "\22\30\17\0\2\30\2\0\16\30\1\225\4\30\1\0"+
    "\32\30\17\0\2\30\2\0\23\30\1\0\14\30\1\226"+
    "\1\227\14\30\17\0\2\30\2\0\23\30\1\0\12\30"+
    "\1\230\17\30\17\0\2\30\2\0\23\30\1\0\16\30"+
    "\1\231\13\30\17\0\2\30\2\0\23\30\1\0\3\30"+
    "\1\232\26\30\17\0\2\30\2\0\23\30\1\0\17\30"+
    "\1\233\12\30\17\0\2\30\2\0\23\30\1\0\21\30"+
    "\1\234\10\30\17\0\2\30\2\0\23\30\1\0\21\30"+
    "\1\235\10\30\17\0\2\30\2\0\23\30\1\0\22\30"+
    "\1\236\7\30\17\0\2\30\2\0\23\30\1\0\11\30"+
    "\1\237\20\30\17\0\2\30\2\0\23\30\1\0\22\30"+
    "\1\240\7\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\241\24\30\17\0\2\30\2\0\23\30\1\0\22\30"+
    "\1\242\1\243\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\244\30\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\245\30\30\17\0\2\30\2\0\23\30\1\0"+
    "\16\30\1\246\13\30\17\0\2\30\2\0\23\30\1\0"+
    "\6\30\1\247\23\30\17\0\2\30\2\0\23\30\1\0"+
    "\22\30\1\242\7\30\17\0\2\30\2\0\23\30\1\0"+
    "\24\30\1\250\5\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\251\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\14\30\1\145\15\30\17\0\2\30\2\0\23\30\1\0"+
    "\16\30\1\252\13\30\17\0\2\30\2\0\23\30\1\0"+
    "\21\30\1\154\10\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\253\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\20\30\1\254\11\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\255\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\256\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\26\30\1\154\3\30\17\0\2\30\2\0\23\30\1\0"+
    "\3\30\1\257\26\30\17\0\2\30\2\0\23\30\1\0"+
    "\11\30\1\260\5\30\1\261\12\30\17\0\2\30\2\0"+
    "\23\30\1\0\2\30\1\262\27\30\17\0\2\30\2\0"+
    "\23\30\1\0\23\30\1\263\6\30\17\0\2\30\2\0"+
    "\23\30\1\0\1\30\1\264\17\30\1\265\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\20\30\1\266\11\30\17\0"+
    "\2\30\2\0\23\30\1\0\11\30\1\267\20\30\17\0"+
    "\2\30\2\0\23\30\1\0\11\30\1\270\7\30\1\271"+
    "\10\30\17\0\2\30\2\0\23\30\1\0\1\30\1\272"+
    "\22\30\1\242\3\30\1\154\1\30\17\0\2\30\2\0"+
    "\23\30\1\0\11\30\1\237\2\30\1\273\15\30\17\0"+
    "\2\30\2\0\23\30\1\0\11\30\1\274\20\30\2\175"+
    "\1\0\2\175\1\0\5\175\1\174\2\175\1\0\62\175"+
    "\2\61\1\0\2\61\1\0\5\61\1\174\2\61\1\65"+
    "\62\61\2\0\1\176\76\0\2\175\1\0\2\175\1\0"+
    "\5\175\1\200\2\175\1\201\62\175\14\0\1\275\2\0"+
    "\2\276\77\0\2\204\2\0\6\204\2\0\1\104\14\0"+
    "\6\204\5\0\1\104\34\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\277\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\300\30\30\17\0\2\30\2\0\23\30\1\0"+
    "\14\30\1\301\15\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\302\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\21\30\1\303\10\30\17\0\2\30\2\0\23\30\1\0"+
    "\22\30\1\304\7\30\17\0\2\30\2\0\23\30\1\0"+
    "\16\30\1\305\13\30\17\0\2\30\2\0\23\30\1\0"+
    "\2\30\1\306\27\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\307\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\310\30\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\311\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\312\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\313\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\314\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\7\30\1\302\22\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\315\30\30\17\0\2\30\2\0\23\30\1\0"+
    "\24\30\1\316\5\30\17\0\2\30\2\0\23\30\1\0"+
    "\14\30\1\317\15\30\17\0\2\30\2\0\23\30\1\0"+
    "\2\30\1\320\27\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\321\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\322\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\24\30\1\323\5\30\17\0\2\30\2\0\23\30\1\0"+
    "\21\30\1\310\10\30\17\0\2\30\2\0\23\30\1\0"+
    "\11\30\1\324\20\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\325\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\24\30\1\326\5\30\17\0\2\30\2\0\23\30\1\0"+
    "\4\30\1\302\25\30\17\0\2\30\2\0\23\30\1\0"+
    "\23\30\1\327\6\30\17\0\2\30\2\0\23\30\1\0"+
    "\1\30\1\330\30\30\17\0\2\30\2\0\23\30\1\0"+
    "\5\30\1\154\24\30\17\0\2\30\2\0\23\30\1\0"+
    "\3\30\1\331\26\30\17\0\2\30\2\0\23\30\1\0"+
    "\21\30\1\302\10\30\17\0\2\30\2\0\23\30\1\0"+
    "\22\30\1\270\7\30\17\0\2\30\2\0\23\30\1\0"+
    "\22\30\1\332\1\333\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\334\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\15\30\1\154\14\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\335\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\336\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\17\30\1\154\12\30\17\0\2\30\2\0\23\30"+
    "\1\0\14\30\1\337\2\30\1\340\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\5\30\1\341\24\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\342\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\13\30\1\343\16\30\17\0\2\30"+
    "\2\0\23\30\1\0\25\30\1\344\4\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\345\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\346\15\30\17\0\2\30"+
    "\2\0\23\30\1\0\24\30\1\347\5\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\346\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\350\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\5\30\1\152\24\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\243\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\22\30\1\154\7\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\351\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\16\30\1\352\13\30\17\0\2\30"+
    "\2\0\23\30\1\0\1\30\1\353\30\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\242\15\30\17\0\2\276"+
    "\77\0\2\276\5\0\1\104\1\0\1\104\22\0\1\104"+
    "\1\0\1\104\42\0\2\30\2\0\23\30\1\0\10\30"+
    "\1\354\21\30\17\0\2\30\2\0\23\30\1\0\30\30"+
    "\1\355\1\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\356\24\30\17\0\2\30\2\0\23\30\1\0\1\30"+
    "\1\357\30\30\17\0\2\30\2\0\23\30\1\0\22\30"+
    "\1\360\7\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\361\24\30\17\0\2\30\2\0\23\30\1\0\14\30"+
    "\1\210\15\30\17\0\2\30\2\0\23\30\1\0\20\30"+
    "\1\362\11\30\17\0\2\30\2\0\23\30\1\0\23\30"+
    "\1\302\6\30\17\0\2\30\2\0\23\30\1\0\7\30"+
    "\1\363\22\30\17\0\2\30\2\0\23\30\1\0\27\30"+
    "\1\364\2\30\17\0\2\30\2\0\23\30\1\0\1\30"+
    "\1\365\30\30\17\0\2\30\2\0\23\30\1\0\7\30"+
    "\1\366\11\30\1\367\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\370\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\3\30\1\371\26\30\17\0\2\30\2\0\14\30"+
    "\1\372\6\30\1\0\32\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\373\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\3\30\1\310\26\30\17\0\2\30\2\0\23\30"+
    "\1\0\11\30\1\374\20\30\17\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\375\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\16\30\1\376\13\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\237\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\20\30\1\377\11\30\17\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\u0100\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\13\30\1\154\16\30\17\0\2\30\2\0\23\30"+
    "\1\0\10\30\1\154\21\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\154\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\11\30\1\u0101\20\30\17\0\2\30\2\0\23\30"+
    "\1\0\24\30\1\u0102\5\30\17\0\2\30\2\0\23\30"+
    "\1\0\16\30\1\u0103\13\30\17\0\2\30\2\0\23\30"+
    "\1\0\14\30\1\u0104\15\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\u0105\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\332\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\u0106\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\25\30\1\242\4\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\u0107\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\u0108\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\u0109\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\11\30\1\u010a\20\30\17\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\u010b\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\3\30\1\u010c\26\30\17\0\2\30\2\0\23\30"+
    "\1\0\26\30\1\u010d\3\30\17\0\2\30\2\0\23\30"+
    "\1\0\22\30\1\u010e\7\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\u010f\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\15\30\1\u0110\14\30\17\0\2\30\2\0\7\30"+
    "\1\u0111\13\30\1\0\32\30\17\0\2\30\2\0\23\30"+
    "\1\0\1\30\1\u0112\30\30\17\0\2\30\2\0\23\30"+
    "\1\0\3\30\1\u0113\26\30\17\0\2\30\2\0\2\30"+
    "\1\u0114\7\30\1\u0115\10\30\1\0\32\30\17\0\2\30"+
    "\2\0\12\30\1\u0116\10\30\1\0\32\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\u0117\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\1\30\1\u0118\30\30\17\0\2\30"+
    "\2\0\13\30\1\u0119\7\30\1\0\32\30\17\0\2\30"+
    "\2\0\23\30\1\0\16\30\1\u011a\13\30\17\0\2\30"+
    "\2\0\23\30\1\0\5\30\1\244\24\30\17\0\2\30"+
    "\2\0\23\30\1\0\21\30\1\u011b\10\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\u011c\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\10\30\1\u011d\21\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\u011e\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\21\30\1\u011f\10\30\17\0\2\30"+
    "\2\0\23\30\1\0\15\30\1\u0120\14\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\u0121\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\7\30\1\u0122\22\30\17\0\2\30"+
    "\2\0\23\30\1\0\20\30\1\u0123\11\30\17\0\2\30"+
    "\2\0\23\30\1\0\1\30\1\u0124\30\30\17\0\2\30"+
    "\2\0\23\30\1\0\16\30\1\u0125\13\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\332\15\30\17\0\2\30"+
    "\2\0\23\30\1\0\4\30\1\270\25\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\u0126\15\30\17\0\2\30"+
    "\2\0\23\30\1\0\15\30\1\u0127\14\30\17\0\2\30"+
    "\2\0\23\30\1\0\6\30\1\u0128\23\30\17\0\2\30"+
    "\2\0\23\30\1\0\7\30\1\242\22\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\u0129\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\3\30\1\u012a\26\30\17\0\2\30"+
    "\2\0\23\30\1\0\3\30\1\u012b\26\30\17\0\2\30"+
    "\2\0\23\30\1\0\16\30\1\154\13\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\u012c\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\u012d\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\u012e\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\5\30\1\u012f\24\30\17\0\2\30"+
    "\2\0\23\30\1\0\16\30\1\u0130\13\30\17\0\2\30"+
    "\2\0\23\30\1\0\16\30\1\302\13\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\366\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\1\30\1\u0131\30\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\u0132\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\17\30\1\u0133\12\30\17\0\2\30"+
    "\2\0\23\30\1\0\11\30\1\u0134\20\30\17\0\2\30"+
    "\2\0\23\30\1\0\14\30\1\u0135\15\30\17\0\2\30"+
    "\2\0\23\30\1\0\24\30\1\u0136\5\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\u0137\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\24\30\1\u0138\5\30\17\0\2\30"+
    "\2\0\23\30\1\0\25\30\1\u0139\4\30\17\0\2\30"+
    "\2\0\5\30\1\u013a\3\30\1\u013b\11\30\1\0\32\30"+
    "\17\0\2\30\2\0\23\30\1\0\11\30\1\u013c\20\30"+
    "\17\0\2\30\2\0\5\30\1\u013d\15\30\1\0\32\30"+
    "\17\0\2\30\2\0\23\30\1\0\5\30\1\u013e\24\30"+
    "\17\0\2\30\2\0\23\30\1\0\23\30\1\u013f\6\30"+
    "\17\0\2\30\2\0\1\30\1\u0140\5\30\1\u0111\13\30"+
    "\1\0\32\30\17\0\2\30\2\0\23\30\1\0\17\30"+
    "\1\u0141\12\30\17\0\2\30\2\0\23\30\1\0\3\30"+
    "\1\u0142\26\30\17\0\2\30\2\0\23\30\1\0\24\30"+
    "\1\242\5\30\17\0\2\30\2\0\23\30\1\0\30\30"+
    "\1\154\1\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\u0143\24\30\17\0\2\30\2\0\23\30\1\0\1\30"+
    "\1\u0144\30\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\u012b\24\30\17\0\2\30\2\0\23\30\1\0\23\30"+
    "\1\u0145\6\30\17\0\2\30\2\0\23\30\1\0\6\30"+
    "\1\u0146\23\30\17\0\2\30\2\0\23\30\1\0\5\30"+
    "\1\u0147\24\30\17\0\2\30\2\0\23\30\1\0\14\30"+
    "\1\u0129\15\30\17\0\2\30\2\0\23\30\1\0\23\30"+
    "\1\u0148\6\30\17\0\2\30\2\0\23\30\1\0\4\30"+
    "\1\220\25\30\17\0\2\30\2\0\23\30\1\0\22\30"+
    "\1\u0149\7\30\17\0\2\30\2\0\23\30\1\0\23\30"+
    "\1\u014a\6\30\17\0\2\30\2\0\23\30\1\0\23\30"+
    "\1\u014b\6\30\17\0\2\30\2\0\23\30\1\0\17\30"+
    "\1\u0112\12\30\17\0\2\30\2\0\1\u014c\15\30\1\u014d"+
    "\1\u014e\3\30\1\0\32\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\u014f\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\11\30\1\u0150\20\30\17\0\2\30\2\0\23\30"+
    "\1\0\20\30\1\u0151\11\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\u0152\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\11\30\1\u0153\20\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\u0154\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\16\30\1\u0155\13\30\17\0\2\30\2\0\23\30"+
    "\1\0\17\30\1\u0156\12\30\17\0\2\30\2\0\4\30"+
    "\1\26\16\30\1\0\32\30\17\0\2\30\2\0\23\30"+
    "\1\0\30\30\1\u013e\1\30\17\0\2\30\2\0\23\30"+
    "\1\0\24\30\1\u0157\5\30\17\0\2\30\2\0\23\30"+
    "\1\0\21\30\1\u0158\10\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\u012b\6\30\17\0\2\30\2\0\23\30"+
    "\1\0\16\30\1\u0159\13\30\17\0\2\30\2\0\23\30"+
    "\1\0\3\30\1\242\26\30\17\0\2\30\2\0\23\30"+
    "\1\0\5\30\1\u015a\24\30\17\0\2\30\2\0\23\30"+
    "\1\0\20\30\1\154\11\30\17\0\2\30\2\0\23\30"+
    "\1\0\16\30\1\u0142\13\30\17\0\2\30\2\0\23\30"+
    "\1\0\11\30\1\u015b\20\30\17\0\2\30\2\0\23\30"+
    "\1\0\23\30\1\u013e\6\30\17\0\2\30\2\0\5\30"+
    "\1\u015c\15\30\1\0\32\30\17\0\2\30\2\0\16\30"+
    "\1\u015d\4\30\1\0\32\30\17\0\2\30\2\0\23\30"+
    "\1\0\3\30\1\u015e\15\30\1\u015f\10\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\u0160\6\30\17\0\2\30"+
    "\2\0\23\30\1\0\10\30\1\u0161\21\30\17\0\2\30"+
    "\2\0\13\30\1\u0162\7\30\1\0\32\30\17\0\2\30"+
    "\2\0\23\30\1\0\1\30\1\u0163\30\30\17\0\2\30"+
    "\2\0\23\30\1\0\23\30\1\u0164\6\30\17\0\2\30"+
    "\2\0\1\u0165\22\30\1\0\32\30\17\0\2\30\2\0"+
    "\23\30\1\0\5\30\1\u0166\24\30\17\0\2\30\2\0"+
    "\23\30\1\0\23\30\1\u0167\6\30\17\0\2\30\2\0"+
    "\23\30\1\0\23\30\1\u0168\6\30\17\0\2\30\2\0"+
    "\23\30\1\0\21\30\1\u0169\10\30\17\0\2\30\2\0"+
    "\23\30\1\0\6\30\1\u016a\2\30\1\u016b\20\30\17\0"+
    "\2\30\2\0\23\30\1\0\23\30\1\u016c\6\30\17\0"+
    "\2\30\2\0\23\30\1\0\23\30\1\270\6\30\17\0"+
    "\2\30\2\0\23\30\1\0\4\30\1\u012b\25\30\17\0"+
    "\2\30\2\0\23\30\1\0\3\30\1\u013e\26\30\17\0"+
    "\2\30\2\0\23\30\1\0\17\30\1\u016d\12\30\17\0"+
    "\2\30\2\0\23\30\1\0\24\30\1\u016e\5\30\17\0"+
    "\2\30\2\0\23\30\1\0\3\30\1\u016f\26\30\17\0"+
    "\2\30\2\0\23\30\1\0\7\30\1\u0170\22\30\17\0"+
    "\2\30\2\0\23\30\1\0\1\30\1\u0171\30\30\17\0"+
    "\2\30\2\0\23\30\1\0\21\30\1\u0172\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\6\30\1\u0173\23\30\17\0"+
    "\2\30\2\0\23\30\1\0\23\30\1\u0174\6\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u0175\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\21\30\1\u0176\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\14\30\1\u0175\15\30\17\0"+
    "\2\30\2\0\23\30\1\0\10\30\1\u0177\21\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u0178\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\15\30\1\u0179\14\30\17\0"+
    "\2\30\2\0\23\30\1\0\6\30\1\366\23\30\17\0"+
    "\2\30\2\0\23\30\1\0\14\30\1\u017a\15\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u017b\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\24\30\1\u017c\5\30\17\0"+
    "\2\30\2\0\23\30\1\0\20\30\1\u017d\11\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u017e\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\24\30\1\u017f\5\30\17\0"+
    "\2\30\2\0\23\30\1\0\23\30\1\u0120\6\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u0180\24\30\17\0"+
    "\2\30\2\0\1\30\1\u0181\21\30\1\0\32\30\17\0"+
    "\2\30\2\0\23\30\1\0\11\30\1\u0182\20\30\17\0"+
    "\2\30\2\0\23\30\1\0\4\30\1\u013e\25\30\17\0"+
    "\2\30\2\0\23\30\1\0\21\30\1\u0183\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\17\30\1\u0175\12\30\17\0"+
    "\2\30\2\0\23\30\1\0\21\30\1\u013e\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\1\30\1\u0149\30\30\17\0"+
    "\2\30\2\0\23\30\1\0\4\30\1\366\25\30\17\0"+
    "\2\30\2\0\23\30\1\0\4\30\1\u0184\25\30\17\0"+
    "\2\30\2\0\23\30\1\0\16\30\1\u0175\13\30\17\0"+
    "\2\30\2\0\23\30\1\0\20\30\1\u0185\11\30\17\0"+
    "\2\30\2\0\23\30\1\0\22\30\1\u0186\7\30\17\0"+
    "\2\30\2\0\23\30\1\0\15\30\1\u0187\14\30\17\0"+
    "\2\30\2\0\23\30\1\0\1\30\1\u0188\30\30\17\0"+
    "\2\30\2\0\23\30\1\0\17\30\1\u0189\12\30\17\0"+
    "\2\30\2\0\23\30\1\0\17\30\1\u018a\12\30\17\0"+
    "\2\30\2\0\23\30\1\0\1\30\1\u018b\30\30\17\0"+
    "\2\30\2\0\13\30\1\u018c\7\30\1\0\32\30\17\0"+
    "\2\30\2\0\23\30\1\0\17\30\1\u018d\12\30\17\0"+
    "\2\30\2\0\23\30\1\0\22\30\1\u013e\7\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u018e\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\4\30\1\u018f\25\30\17\0"+
    "\2\30\2\0\23\30\1\0\24\30\1\u0190\5\30\17\0"+
    "\2\30\2\0\23\30\1\0\16\30\1\u013e\13\30\17\0"+
    "\2\30\2\0\23\30\1\0\30\30\1\u0191\1\30\17\0"+
    "\2\30\2\0\23\30\1\0\20\30\1\u0192\11\30\17\0"+
    "\2\30\2\0\23\30\1\0\21\30\1\u0151\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\16\30\1\u0149\13\30\17\0"+
    "\2\30\2\0\16\30\1\u014d\4\30\1\0\32\30\17\0"+
    "\2\30\2\0\23\30\1\0\16\30\1\u0193\13\30\17\0"+
    "\2\30\2\0\16\30\1\u0194\4\30\1\0\32\30\17\0"+
    "\2\30\2\0\23\30\1\0\5\30\1\u0195\24\30\17\0"+
    "\2\30\2\0\23\30\1\0\4\30\1\u0186\25\30\17\0"+
    "\2\30\2\0\23\30\1\0\11\30\1\u0196\20\30\17\0"+
    "\2\30\2\0\23\30\1\0\21\30\1\u0150\10\30\17\0"+
    "\2\30\2\0\23\30\1\0\31\30\1\u0120";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25285];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\0\2\11\1\1\1\11\2\1\1\11"+
    "\46\1\1\11\1\1\2\0\1\11\2\1\1\11\2\1"+
    "\1\0\1\11\3\0\3\1\1\11\1\0\66\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\11\1\1\1\0\71\1"+
    "\1\0\331\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */

    private int whitesOnFirstLine;
    private int saveLexState;
    private AbstractCCodeHandler handler;

    public JavaLexer() { }

    private String trimEnd(String str) {
        int end = str.length() - 1;
        int i = end;
        for (; i >= 0; i--) {
           char c = str.charAt(i);
           if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
              break;
           }
        }
        if (i != end) {
           return str.substring(0, i + 1);
        }

        return str;
    }

    public String convert(AbstractCCodeHandler h, String code) {
        Reader reader = new StringReader(trimEnd(code));
        String str = convert(h, reader, true);
        try {
          reader.close();
        } catch (IOException e) { }

        return str;
    }

    public String convert(AbstractCCodeHandler h, Reader code, boolean ret) {
        if (code == null) {
           return null;
        } else {
           handler = h;
           whitesOnFirstLine = 0;
           yyreset(code);
           yybegin(CLEANFIRST);
           try {
               yylex();
           } catch (IOException e) {
               return null;
           }
           if (ret) {
               return h.toString();
           }
           return "";
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { handler.handleComment(yytext());
            }
            // fall through
          case 22: break;
          case 2:
            { handler.handleDefault(yytext());
            }
            // fall through
          case 23: break;
          case 3:
            { handler.handleNothing("\n");
                                   saveLexState = YYINITIAL;
                                   yybegin(CLEAN);
            }
            // fall through
          case 24: break;
          case 4:
            { handler.handleOperator(yytext());
            }
            // fall through
          case 25: break;
          case 5:
            { handler.handleOpenClose(yytext());
            }
            // fall through
          case 26: break;
          case 6:
            { handler.handleNumber(yytext());
            }
            // fall through
          case 27: break;
          case 7:
            { handler.handleId(yytext());
            }
            // fall through
          case 28: break;
          case 8:
            { handler.handleNothing("\n");
                                   saveLexState = COMMENT;
                                   yybegin(CLEAN);
            }
            // fall through
          case 29: break;
          case 9:
            { yypushback(1);
                                   yybegin(saveLexState);
            }
            // fall through
          case 30: break;
          case 10:
            { int len = yylength() - whitesOnFirstLine;
                                   if (len > 0) {
                                      yypushback(len);
                                   }
                                   yybegin(saveLexState);
            }
            // fall through
          case 31: break;
          case 11:
            { handler.handleNothing("\n");
            }
            // fall through
          case 32: break;
          case 12:
            { yypushback(1);
                                   yybegin(YYINITIAL);
            }
            // fall through
          case 33: break;
          case 13:
            { whitesOnFirstLine = yylength();
                                   yybegin(YYINITIAL);
            }
            // fall through
          case 34: break;
          case 14:
            { 
            }
            // fall through
          case 35: break;
          case 15:
            { handler.handleString(yytext());
            }
            // fall through
          case 36: break;
          case 16:
            { yybegin(COMMENT);
                                   handler.handleComment(yytext());
            }
            // fall through
          case 37: break;
          case 17:
            { handler.handleKeyword(yytext());
            }
            // fall through
          case 38: break;
          case 18:
            { handler.handleComment("*");
                                   handler.handleNothing("\n");
                                   saveLexState = COMMENT;
                                   yybegin(CLEAN);
            }
            // fall through
          case 39: break;
          case 19:
            { yybegin(YYINITIAL);
                                   handler.handleComment(yytext());
            }
            // fall through
          case 40: break;
          case 20:
            { handler.handleType(yytext());
            }
            // fall through
          case 41: break;
          case 21:
            { handler.handleModifier(yytext());
            }
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
