// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: modules/scinotes/src/java/jflex/matchingblock.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.io.IOException;
import javax.swing.text.Element;

@javax.annotation.Generated("JFlex")

@SuppressWarnings("fallthrough")
public final class MatchingBlockScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 256;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LR = 2;
  public static final int RL = 4;
  public static final int OPENCLOSE = 6;
  public static final int CLOSEOPEN = 8;
  public static final int PSNART = 10;
  public static final int SPEC = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\2\2\1\3\23\0\1\4\1\5\1\4"+
    "\1\6\1\7\1\0\1\10\1\11\1\12\5\0\1\13"+
    "\12\6\5\0\1\4\1\0\32\4\1\11\1\0\1\12"+
    "\1\0\1\4\1\0\1\14\1\4\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\4\1\24\1\25\1\26"+
    "\1\27\2\4\1\30\1\31\1\32\1\33\1\4\1\34"+
    "\1\4\1\35\1\4\1\11\1\0\1\12\7\0\1\2"+
    "\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\6\1\1\2\1\3\12\1\1\4\1\3\11\1"+
    "\12\3\1\5\1\6\1\7\1\0\1\1\4\0\1\1"+
    "\1\0\4\1\1\2\4\1\15\0\1\3\12\0\1\2"+
    "\11\0\1\1\1\3\5\1\11\0\1\1\2\0\1\3"+
    "\5\0\1\3\6\0\7\1\14\0\1\2\7\0\5\1"+
    "\20\0\3\1\12\0\3\1\11\0\2\1\2\0\1\3"+
    "\5\0\2\1\1\0\1\1\3\0\1\1\2\0\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\132\0\170\0\226\0\264\0\0"+
    "\0\322\0\360\0\u010e\0\u012c\0\u014a\0\0\0\u0168\0\u0186"+
    "\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\u023a\0\u0258\0\u0276"+
    "\0\u0294\0\u014a\0\0\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\u032a"+
    "\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de\0\u03fc\0\u041a"+
    "\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce\0\0\0\0"+
    "\0\0\0\360\0\u04ec\0\u04ec\0\u050a\0\u014a\0\u0528\0\u0528"+
    "\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be\0\u012c\0\u05dc\0\u05fa"+
    "\0\u0618\0\u0636\0\u0276\0\u0654\0\u0672\0\u0690\0\u06ae\0\u06cc"+
    "\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e\0\u07bc"+
    "\0\u07da\0\u07f8\0\u0816\0\u0834\0\u0852\0\u0870\0\u088e\0\u08ac"+
    "\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960\0\u097e\0\u099c"+
    "\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\u0a32\0\u0a50\0\u0a6e\0\u0a8c"+
    "\0\u0aaa\0\u0ac8\0\u0654\0\u0ae6\0\u0b04\0\u0b22\0\u0b40\0\u0b5e"+
    "\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30\0\u0c4e"+
    "\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4\0\u0906\0\u0d02\0\u0d20"+
    "\0\u0d3e\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6\0\u0dd4\0\u0df2\0\u0e10"+
    "\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u0ea6\0\u0ec4\0\u0ee2\0\u0f00"+
    "\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96\0\u0fb4\0\u0fd2\0\u0ff0"+
    "\0\u100e\0\u102c\0\u104a\0\u1068\0\u1086\0\u10a4\0\u10c2\0\u10e0"+
    "\0\u10fe\0\u111c\0\u113a\0\u1158\0\u1176\0\u1194\0\u11b2\0\u11d0"+
    "\0\u11ee\0\u120c\0\u122a\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0"+
    "\0\u12de\0\u12fc\0\u131a\0\u1338\0\u1356\0\u1374\0\u1392\0\u13b0"+
    "\0\u13ce\0\u13ec\0\u140a\0\u1428\0\u1446\0\u1464\0\u1482\0\u14a0"+
    "\0\u14be\0\u14dc\0\u14fa\0\u1518\0\u1536\0\u1554\0\u1572\0\u1590"+
    "\0\u15ae\0\u15cc\0\u15ea\0\u1608\0\u1626\0\u1644\0\u1662\0\u1680"+
    "\0\u169e\0\u16bc\0\u16da\0\u16f8\0\u1716\0\u1734\0\u1752\0\u1770"+
    "\0\u178e\0\u17ac\0\u17ca\0\u17e8\0\u17ca\0\u1806\0\u1824\0\u1842"+
    "\0\u1860\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\36\0\2\10\2\0\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\2\11\1\22\1\23\2\11"+
    "\1\24\5\11\1\25\1\26\1\11\1\27\1\11\1\10"+
    "\1\30\2\0\1\31\1\12\1\31\1\10\1\32\1\33"+
    "\1\16\1\10\2\31\1\34\1\35\1\36\1\31\1\37"+
    "\3\31\1\40\1\31\1\41\1\42\1\43\2\31\1\44"+
    "\2\33\2\0\5\33\1\16\2\33\1\45\2\33\1\46"+
    "\1\47\2\33\1\50\5\33\1\51\1\52\1\33\1\53"+
    "\3\33\2\0\1\54\1\33\1\54\3\33\1\16\1\33"+
    "\2\54\1\55\7\54\1\56\7\54\10\0\1\57\25\0"+
    "\2\60\2\0\32\60\4\0\1\14\1\0\1\14\1\0"+
    "\1\61\3\0\22\14\1\62\1\0\1\62\1\0\1\62"+
    "\1\63\2\62\1\64\25\62\10\0\1\61\6\0\1\65"+
    "\22\0\1\14\1\0\1\14\5\0\22\14\1\66\1\0"+
    "\1\66\1\0\1\66\1\67\2\66\1\70\25\66\10\0"+
    "\1\61\40\0\1\71\26\0\1\14\1\0\1\14\1\0"+
    "\1\61\3\0\14\14\1\72\5\14\4\0\1\14\1\0"+
    "\1\14\1\0\1\61\3\0\12\14\1\73\7\14\4\0"+
    "\1\14\1\0\1\14\1\0\1\61\3\0\13\14\1\74"+
    "\3\14\1\75\2\14\4\0\1\14\1\0\1\14\1\0"+
    "\1\61\3\0\4\14\1\76\15\14\4\0\1\14\1\0"+
    "\1\14\1\0\1\61\3\0\3\14\1\77\14\14\1\100"+
    "\1\14\4\0\1\14\1\0\1\14\1\0\1\61\3\0"+
    "\14\14\1\101\5\14\4\0\1\14\1\0\1\14\1\0"+
    "\1\61\3\0\6\14\1\102\13\14\1\103\1\0\1\103"+
    "\1\0\7\103\1\104\22\103\16\0\1\105\1\106\1\107"+
    "\1\0\1\110\3\0\1\111\1\0\1\112\1\113\1\114"+
    "\2\0\1\115\16\0\1\105\1\106\1\107\1\0\1\110"+
    "\3\0\1\116\1\0\1\112\1\113\1\114\2\0\1\115"+
    "\16\0\1\105\1\106\1\107\1\0\1\110\1\0\1\117"+
    "\1\0\1\111\1\0\1\112\1\113\1\114\2\0\1\115"+
    "\16\0\1\105\1\106\1\107\1\0\1\110\1\120\2\0"+
    "\1\111\1\0\1\112\1\113\1\114\2\0\1\115\15\0"+
    "\1\121\1\105\1\106\1\107\1\0\1\110\3\0\1\111"+
    "\1\0\1\112\1\113\1\114\2\0\1\115\16\0\1\105"+
    "\1\106\1\107\1\0\1\110\3\0\1\111\1\122\1\112"+
    "\1\113\1\114\2\0\1\115\16\0\1\105\1\106\1\107"+
    "\1\0\1\110\3\0\1\111\1\123\1\112\1\113\1\114"+
    "\2\0\1\115\16\0\1\105\1\106\1\107\1\0\1\110"+
    "\3\0\1\111\1\0\1\112\1\113\1\124\2\0\1\115"+
    "\15\0\1\125\1\105\1\106\1\107\1\0\1\110\3\0"+
    "\1\111\1\0\1\112\1\113\1\114\2\0\1\115\16\0"+
    "\1\105\1\106\1\107\1\0\1\110\3\0\1\111\1\0"+
    "\1\126\1\113\1\114\2\0\1\115\30\0\1\127\31\0"+
    "\1\130\40\0\1\131\3\0\1\132\22\0\1\133\34\0"+
    "\1\134\14\0\1\135\31\0\1\136\27\0\1\137\31\0"+
    "\1\140\7\0\1\141\25\0\1\140\7\0\1\142\25\0"+
    "\1\140\7\0\1\141\1\143\13\0\1\62\2\0\1\62"+
    "\53\0\1\144\14\0\1\66\2\0\1\66\25\0\1\71"+
    "\1\10\2\0\32\71\4\0\1\14\1\0\1\14\5\0"+
    "\5\14\1\145\14\14\4\0\1\14\1\0\1\14\5\0"+
    "\2\14\1\146\17\14\4\0\1\14\1\0\1\14\5\0"+
    "\14\14\1\76\5\14\4\0\1\14\1\0\1\14\5\0"+
    "\12\14\1\147\7\14\4\0\1\14\1\0\1\14\5\0"+
    "\10\14\1\150\11\14\4\0\1\14\1\0\1\14\5\0"+
    "\7\14\1\151\12\14\4\0\1\14\1\0\1\14\5\0"+
    "\21\14\1\76\4\0\1\14\1\0\1\14\5\0\7\14"+
    "\1\152\12\14\1\103\1\0\1\103\1\0\7\103\1\153"+
    "\22\103\26\0\1\154\33\0\1\155\34\0\1\10\27\0"+
    "\1\156\47\0\1\157\35\0\1\160\40\0\1\161\20\0"+
    "\1\162\50\0\1\163\24\0\1\16\7\0\1\157\31\0"+
    "\1\164\16\0\1\10\1\0\1\10\5\0\3\10\1\165"+
    "\16\10\32\0\1\166\26\0\1\167\32\0\1\170\32\0"+
    "\1\162\10\0\1\171\26\0\1\172\45\0\1\160\2\0"+
    "\1\170\24\0\1\173\45\0\1\174\34\0\1\133\33\0"+
    "\1\175\13\0\1\176\1\0\1\176\5\0\22\176\24\0"+
    "\1\177\34\0\1\200\47\0\1\133\23\0\1\201\40\0"+
    "\1\202\36\0\1\203\25\0\1\16\7\0\1\203\31\0"+
    "\1\204\30\0\1\205\23\0\1\14\1\0\1\14\5\0"+
    "\17\14\1\206\2\14\4\0\1\14\1\0\1\14\5\0"+
    "\4\14\1\207\15\14\4\0\1\14\1\0\1\14\5\0"+
    "\1\14\1\210\20\14\4\0\1\14\1\0\1\14\5\0"+
    "\3\14\1\211\16\14\4\0\1\14\1\0\1\14\5\0"+
    "\16\14\1\212\3\14\4\0\1\14\1\0\1\14\5\0"+
    "\10\14\1\213\11\14\17\0\1\10\41\0\1\214\44\0"+
    "\1\215\26\0\1\216\32\0\1\10\43\0\1\217\26\0"+
    "\1\220\50\0\1\10\25\0\1\221\44\0\1\222\27\0"+
    "\1\223\44\0\1\224\7\0\1\10\1\0\1\10\5\0"+
    "\22\10\17\0\1\225\42\0\1\226\44\0\1\227\21\0"+
    "\1\230\33\0\1\231\37\0\1\232\50\0\1\233\27\0"+
    "\1\234\30\0\1\33\41\0\1\235\44\0\1\236\23\0"+
    "\1\237\21\0\1\14\1\0\1\14\5\0\11\14\1\240"+
    "\10\14\4\0\1\14\1\0\1\14\5\0\17\14\1\241"+
    "\2\14\4\0\1\14\1\0\1\14\5\0\16\14\1\242"+
    "\3\14\4\0\1\14\1\0\1\14\5\0\1\14\1\243"+
    "\20\14\4\0\1\14\1\0\1\14\5\0\1\14\1\244"+
    "\20\14\4\0\1\14\1\0\1\14\5\0\3\14\1\76"+
    "\16\14\22\0\1\245\36\0\1\246\44\0\1\247\22\0"+
    "\1\250\42\0\1\251\45\0\1\170\25\0\1\154\45\0"+
    "\1\252\16\0\1\253\45\0\1\254\27\0\1\252\43\0"+
    "\1\255\33\0\1\256\44\0\1\257\20\0\1\260\35\0"+
    "\1\261\37\0\1\133\50\0\1\262\20\0\1\263\53\0"+
    "\1\264\6\0\1\14\1\0\1\14\5\0\3\14\1\265"+
    "\16\14\4\0\1\14\1\0\1\14\5\0\12\14\1\266"+
    "\7\14\4\0\1\14\1\0\1\14\5\0\7\14\1\267"+
    "\12\14\4\0\1\14\1\0\1\14\5\0\16\14\1\76"+
    "\3\14\4\0\1\14\1\0\1\14\5\0\6\14\1\76"+
    "\13\14\34\0\1\10\35\0\1\270\16\0\1\271\45\0"+
    "\1\272\27\0\1\270\47\0\1\170\32\0\1\273\42\0"+
    "\1\274\21\0\1\275\36\0\1\16\40\0\1\276\44\0"+
    "\1\133\25\0\1\133\30\0\1\277\46\0\1\300\35\0"+
    "\1\301\13\0\1\14\1\0\1\14\5\0\12\14\1\302"+
    "\7\14\4\0\1\14\1\0\1\14\5\0\1\14\1\303"+
    "\20\14\4\0\1\14\1\0\1\14\5\0\13\14\1\304"+
    "\6\14\31\0\1\10\32\0\1\305\42\0\1\306\35\0"+
    "\1\307\23\0\1\310\42\0\1\311\36\0\1\312\34\0"+
    "\1\313\42\0\1\314\17\0\1\315\24\0\1\14\1\0"+
    "\1\14\5\0\16\14\1\316\3\14\4\0\1\14\1\0"+
    "\1\14\5\0\16\14\1\317\3\14\4\0\1\14\1\0"+
    "\1\14\5\0\12\14\1\76\7\14\33\0\1\320\23\0"+
    "\1\321\34\0\1\322\45\0\1\323\37\0\1\324\31\0"+
    "\1\133\42\0\1\325\22\0\1\326\47\0\1\327\7\0"+
    "\1\14\1\0\1\14\5\0\15\14\1\76\4\14\4\0"+
    "\1\14\1\0\1\14\5\0\7\14\1\330\12\14\20\0"+
    "\1\331\45\0\1\332\11\0\1\10\1\0\1\10\5\0"+
    "\2\10\1\333\17\10\14\0\1\170\52\0\1\133\24\0"+
    "\1\334\33\0\1\335\42\0\1\336\16\0\1\14\1\0"+
    "\1\14\5\0\13\14\1\337\6\14\16\0\1\105\33\0"+
    "\1\10\47\0\1\340\25\0\1\140\46\0\1\341\12\0"+
    "\1\14\1\0\1\14\5\0\12\14\1\342\7\14\17\0"+
    "\1\16\44\0\1\10\7\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6270];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\6\0\1\11\5\1\1\11\14\1\1\11\23\1"+
    "\3\11\1\0\1\1\4\0\1\1\1\0\11\1\15\0"+
    "\1\1\12\0\1\1\11\0\7\1\11\0\1\1\2\0"+
    "\1\1\5\0\1\1\6\0\7\1\14\0\1\1\7\0"+
    "\5\1\20\0\3\1\12\0\3\1\11\0\2\1\2\0"+
    "\1\1\5\0\2\1\1\0\1\1\3\0\1\1\2\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private ScilabDocument doc;
    private Element elem;
    private boolean transp = false;
    private ScilabLexer scilabLexer;
    private int start;
    private int end;
    private int savePos;

    public MatchingBlockScanner(ScilabDocument doc) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.scilabLexer = new ScilabLexer(doc, null, false);
    }

    public int yychar() {
        return (int) yychar;
    }

    public MatchingPositions getNextBlock(int pos, boolean lr) {
        int s = 1;
        transp = false;
	try {
      	    if (lr) {
                start =  pos;
                end = doc.getEndPosition().getOffset();
                yyreset(new ScilabDocumentReader(doc, start, end));
                yybegin(LR);
	    } else {
                start = pos - 1;
                end = 0;
                yyreset(new ScilabDocumentReader(doc, true, start, end));
              	yybegin(RL);
	    }
	    do {
               if (yylex() == 0) {
                  s--;
               } else {
                  s++;
               }
            } while (zzMarkedPos != 0 && s != 0);
        } catch (IOException e) {
            return null;
        }
        if (s == 0) {
            if (lr) {
                return new MatchingPositions(pos, pos, pos + yychar(), pos + yychar() + (transp?(yylength()-1):yylength()));
            } else {
                return new MatchingPositions(pos, pos, pos - yychar() - yylength(), pos - yychar());
            }
        }

        return null;
    }

    public MatchingPositions getMatchingBlock(int pos, boolean lr) {
        int p1, s = 1;
        transp = false;
        try {
            if (lr) {
                start =  pos;
                end = doc.getEndPosition().getOffset();
                yyreset(new ScilabDocumentReader(doc, start, end));
                yybegin(OPENCLOSE);
                if (yylex() != 1) {
                   return null;
                }

                p1 = pos + yylength();
                yybegin(LR);
            } else {
                 start = pos - 1;
                 end = 0;
                 yyreset(new ScilabDocumentReader(doc, true, start, end));
                 yybegin(CLOSEOPEN);
                 if (yylex() != 1) {
                    return null;
                 }
                 p1 = pos - yylength();
                 yybegin(RL);
            }

            do {
               if (yylex() == 0) {
                  s--;
               } else {
                  s++;
               }
            } while (zzMarkedPos != 0 && s != 0);
        } catch (IOException e) {
            return null;
        }
        if (s == 0) {
            if (lr) {
                return new MatchingPositions(pos, p1, pos + yychar(), pos + yychar() + (transp?(yylength()-1):yylength()));
            } else {
                return new MatchingPositions(p1, pos, pos - yychar() - yylength(), pos - yychar());
            }
        }

        return null;
    }

    public final class MatchingPositions {
        public int firstB;
        public int firstE;
        public int secondB;
        public int secondE;

        private MatchingPositions(int x1, int x2, int y1, int y2) {
            firstB = x1;
            firstE = x2;
            secondB = y1;
            secondE = y2;
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MatchingBlockScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return -1;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
          // fall through
          case 8: break;
          case 2:
            { return 1;
            }
          // fall through
          case 9: break;
          case 3:
            { return 0;
            }
          // fall through
          case 10: break;
          case 4:
            { yypushback(1);
                                   yybegin(PSNART);
            }
          // fall through
          case 11: break;
          case 5:
            { if (scilabLexer.getKeyword(start - yychar(), false) == ScilabLexerConstants.STRING) {
                                      savePos = start - yychar() - scilabLexer.beginString - scilabLexer.start;
                                      yybegin(SPEC);
                                   } else {
                                      yybegin(RL);
                                   }
            }
          // fall through
          case 12: break;
          case 6:
            { if (--savePos == 0) {
                                      yybegin(RL);
                                   }
            }
          // fall through
          case 13: break;
          case 7:
            { char c = yycharat(yylength() - 2);
                                   if (c == ')' || c == ']' || c == '}') {
                                      transp = true;
                                      return 0;
                                   }
            }
          // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
