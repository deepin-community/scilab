// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/scilab.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import org.scilab.modules.commons.ScilabCommonsUtils;

@javax.annotation.Generated("JFlex")


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class ScilabLexer extends ScilabLexerConstants {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int QSTRING = 2;
  public static final int COMMENT = 4;
  public static final int BLOCKCOMMENT = 6;
  public static final int FIELD = 8;
  public static final int COMMANDS = 10;
  public static final int COMMANDSWHITE = 12;
  public static final int BREAKSTRING = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\12\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\11\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\55\1\64"+
    "\1\65\1\66\1\67\1\17\1\70\1\71\1\0\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102"+
    "\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\123\1\66\1\124\1\17\1\125\6\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\4\0\1\1\1\0\1\2\1\3\1\4"+
    "\1\5\1\6\1\7\1\5\1\10\1\11\1\12\1\13"+
    "\2\10\1\2\1\10\1\14\1\10\1\15\1\7\2\10"+
    "\3\5\1\10\16\5\1\10\1\1\1\16\1\17\1\20"+
    "\1\21\1\1\1\22\1\23\1\24\25\22\1\25\1\26"+
    "\1\27\1\25\1\30\1\31\1\32\1\1\1\3\1\4"+
    "\1\1\2\17\1\0\1\33\3\0\3\34\2\5\2\10"+
    "\1\33\1\0\1\10\1\7\1\10\1\15\1\35\1\36"+
    "\1\33\1\15\7\5\1\37\5\5\1\40\10\5\1\10"+
    "\1\0\1\41\1\0\1\42\46\0\1\43\1\0\1\1"+
    "\1\44\3\0\3\5\1\33\3\15\1\34\10\5\1\45"+
    "\12\5\1\33\1\41\1\0\1\42\44\0\5\5\1\46"+
    "\1\5\1\47\10\5\1\41\14\0\1\50\24\0\1\42"+
    "\11\5\27\0\1\51\4\0\2\5\1\46\2\5\33\0"+
    "\2\5\33\0\1\52\1\53\1\0\1\54\343\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u03b2\0\u045e\0\u04b4"+
    "\0\u0408\0\u02b0\0\u02b0\0\u050a\0\u0560\0\u05b6\0\u060c\0\u0662"+
    "\0\u06b8\0\u070e\0\u05b6\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc"+
    "\0\u05b6\0\u0912\0\u0968\0\u09be\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16"+
    "\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6"+
    "\0\u0e1c\0\u02b0\0\u02b0\0\u02b0\0\u0e72\0\u0ec8\0\u02b0\0\u02b0"+
    "\0\u02b0\0\u0f1e\0\u0f74\0\u0fca\0\u1020\0\u1076\0\u10cc\0\u1122"+
    "\0\u1178\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326\0\u137c\0\u13d2"+
    "\0\u1428\0\u147e\0\u14d4\0\u152a\0\u1580\0\u15d6\0\u02b0\0\u02b0"+
    "\0\u162c\0\u162c\0\u1682\0\u1682\0\u02b0\0\u16d8\0\u02b0\0\u02b0"+
    "\0\u172e\0\u1784\0\u17da\0\u0306\0\u1830\0\u1886\0\u05b6\0\u18dc"+
    "\0\u03b2\0\u1932\0\u1988\0\u19de\0\u1a34\0\u1a8a\0\u02b0\0\u02b0"+
    "\0\u1ae0\0\u1b36\0\u1b8c\0\u1be2\0\u1c38\0\u1c8e\0\u02b0\0\u1ce4"+
    "\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8\0\u1f3e\0\u1f94"+
    "\0\u03b2\0\u1fea\0\u2040\0\u2096\0\u20ec\0\u2142\0\u03b2\0\u2198"+
    "\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c\0\u23f2\0\u2448"+
    "\0\u0e72\0\u249e\0\u0f1e\0\u02b0\0\u24f4\0\u0f74\0\u254a\0\u25a0"+
    "\0\u25f6\0\u264c\0\u26a2\0\u26f8\0\u274e\0\u27a4\0\u27fa\0\u2850"+
    "\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54\0\u2aaa\0\u2b00"+
    "\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u2d5a\0\u2db0"+
    "\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060"+
    "\0\u30b6\0\u15d6\0\u02b0\0\u1682\0\u310c\0\u1784\0\u3162\0\u31b8"+
    "\0\u320e\0\u3264\0\u32ba\0\u3310\0\u1a8a\0\u3366\0\u33bc\0\u3412"+
    "\0\u3468\0\u34be\0\u3514\0\u356a\0\u35c0\0\u3616\0\u366c\0\u36c2"+
    "\0\u3718\0\u376e\0\u37c4\0\u381a\0\u3870\0\u38c6\0\u391c\0\u3972"+
    "\0\u39c8\0\u3a1e\0\u3a74\0\u3aca\0\u2448\0\u3b20\0\u3b76\0\u0f1e"+
    "\0\u3bcc\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26"+
    "\0\u3e7c\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u402a\0\u4080\0\u40d6"+
    "\0\u412c\0\u4182\0\u41d8\0\u422e\0\u4284\0\u42da\0\u4330\0\u4386"+
    "\0\u43dc\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636"+
    "\0\u468c\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6"+
    "\0\u493c\0\u4992\0\u49e8\0\u03b2\0\u4a3e\0\u4a94\0\u4aea\0\u4b40"+
    "\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u02b0\0\u4cee\0\u4d44\0\u4d9a"+
    "\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4\0\u504a"+
    "\0\u50a0\0\u02b0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e\0\u52a4"+
    "\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554"+
    "\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u3162\0\u57ae"+
    "\0\u5804\0\u585a\0\u58b0\0\u5906\0\u595c\0\u59b2\0\u5a08\0\u5a5e"+
    "\0\u5ab4\0\u5b0a\0\u5b60\0\u5bb6\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e"+
    "\0\u5d64\0\u5dba\0\u5e10\0\u5e66\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe"+
    "\0\u6014\0\u606a\0\u60c0\0\u6116\0\u616c\0\u61c2\0\u6218\0\u626e"+
    "\0\u62c4\0\u631a\0\u6370\0\u63c6\0\u641c\0\u6472\0\u03b2\0\u64c8"+
    "\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676\0\u66cc\0\u6722\0\u6778"+
    "\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926\0\u697c\0\u69d2\0\u6a28"+
    "\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u6bd6\0\u6c2c\0\u6c82\0\u6cd8"+
    "\0\u6d2e\0\u6d84\0\u6dda\0\u6e30\0\u6e86\0\u6edc\0\u6f32\0\u6f88"+
    "\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u7136\0\u718c\0\u71e2\0\u7238"+
    "\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6\0\u743c\0\u7492\0\u74e8"+
    "\0\u753e\0\u7594\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u7742\0\u7798"+
    "\0\u77ee\0\u6e30\0\u03b2\0\u7844\0\u02b0\0\u789a\0\u78f0\0\u7946"+
    "\0\u799c\0\u79f2\0\u7a48\0\u7a9e\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6"+
    "\0\u7c4c\0\u7ca2\0\u7cf8\0\u7d4e\0\u7da4\0\u7dfa\0\u7e50\0\u7ea6"+
    "\0\u7efc\0\u7f52\0\u7fa8\0\u7ffe\0\u8054\0\u80aa\0\u8100\0\u8156"+
    "\0\u81ac\0\u8202\0\u8258\0\u82ae\0\u8304\0\u835a\0\u83b0\0\u8406"+
    "\0\u845c\0\u84b2\0\u8508\0\u855e\0\u85b4\0\u860a\0\u8660\0\u86b6"+
    "\0\u870c\0\u8762\0\u87b8\0\u880e\0\u8864\0\u88ba\0\u8910\0\u8966"+
    "\0\u89bc\0\u8a12\0\u8a68\0\u8abe\0\u8b14\0\u8b6a\0\u8bc0\0\u8c16"+
    "\0\u8c6c\0\u8cc2\0\u8d18\0\u8d6e\0\u8dc4\0\u8e1a\0\u8e70\0\u8ec6"+
    "\0\u8f1c\0\u8f72\0\u8fc8\0\u901e\0\u9074\0\u90ca\0\u9120\0\u9176"+
    "\0\u91cc\0\u9222\0\u9278\0\u92ce\0\u9324\0\u937a\0\u93d0\0\u9426"+
    "\0\u947c\0\u94d2\0\u9528\0\u957e\0\u95d4\0\u962a\0\u9680\0\u96d6"+
    "\0\u972c\0\u9782\0\u97d8\0\u982e\0\u9884\0\u98da\0\u9930\0\u9986"+
    "\0\u99dc\0\u9a32\0\u9a88\0\u9ade\0\u9b34\0\u9b8a\0\u9be0\0\u9c36"+
    "\0\u9c8c\0\u9ce2\0\u9d38\0\u9d8e\0\u9de4\0\u9e3a\0\u9e90\0\u9ee6"+
    "\0\u9f3c\0\u9f92\0\u9fe8\0\ua03e\0\ua094\0\ua0ea\0\ua140\0\ua196"+
    "\0\ua1ec\0\ua242\0\ua298\0\ua2ee\0\ua344\0\ua39a\0\ua3f0\0\ua446"+
    "\0\ua49c\0\ua4f2\0\ua548\0\ua59e\0\ua5f4\0\ua64a\0\ua6a0\0\ua6f6"+
    "\0\ua74c\0\ua7a2\0\ua7f8\0\ua84e\0\ua8a4\0\ua8fa\0\ua950\0\ua9a6"+
    "\0\ua9fc\0\uaa52\0\uaaa8\0\uaafe\0\uab54\0\uabaa\0\uac00\0\uac56"+
    "\0\uacac\0\uad02\0\uad58\0\uadae\0\uae04\0\uae5a\0\uaeb0\0\uaf06"+
    "\0\uaf5c\0\uafb2\0\ub008\0\ub05e\0\ub0b4\0\ub10a\0\ub160\0\ub1b6"+
    "\0\ub20c\0\ub262\0\ub2b8\0\ub30e\0\ub364\0\ub3ba\0\ub410\0\ub466"+
    "\0\ub4bc\0\ub512\0\ub568\0\ub5be\0\ub614\0\ub66a\0\ub6c0\0\ub716"+
    "\0\ub76c\0\ub7c2\0\ub818\0\ub86e\0\ub8c4\0\ub91a\0\ub970\0\ub9c6"+
    "\0\uba1c\0\uba72\0\ubac8\0\ubb1e\0\ubb74\0\ubbca\0\ubc20\0\ubc76"+
    "\0\ubccc\0\ubd22\0\ubd78\0\ubdce\0\ube24\0\ube7a\0\ubed0\0\ubf26"+
    "\0\ubf7c\0\ubfd2\0\uc028\0\uc07e\0\uc0d4\0\uc12a\0\uc180\0\uc1d6"+
    "\0\uc22c\0\uc282\0\uc2d8\0\uc32e\0\uc384\0\uc3da\0\uc430\0\uc486";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\11\3\0\1\13\1\14\1\15\1\14"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\11\1\34"+
    "\3\35\22\14\1\36\1\37\2\14\1\40\2\14\1\22"+
    "\2\41\1\14\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\2\14\1\50\5\14\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\14\1\57\3\14\1\60\1\35\1\61\1\62"+
    "\1\63\2\61\1\0\1\64\1\61\1\65\4\61\1\65"+
    "\6\61\1\66\101\61\1\67\1\70\1\67\3\0\1\71"+
    "\3\67\1\72\16\67\1\73\3\67\1\74\1\75\1\76"+
    "\1\77\1\100\3\67\1\101\1\102\2\67\1\103\2\67"+
    "\1\104\2\67\1\105\1\106\1\67\1\107\1\67\1\110"+
    "\1\111\11\67\1\112\1\67\1\113\12\67\1\114\1\115"+
    "\11\67\1\70\1\67\3\0\1\71\3\67\1\72\5\67"+
    "\1\116\10\67\1\73\3\67\1\74\1\75\1\76\1\77"+
    "\1\100\3\67\1\101\1\102\2\67\1\103\2\67\1\104"+
    "\2\67\1\105\1\106\1\67\1\107\1\67\1\110\1\111"+
    "\11\67\1\112\1\67\1\113\12\67\1\114\1\115\10\67"+
    "\2\117\1\120\3\0\1\117\1\121\1\117\1\121\1\122"+
    "\1\121\21\117\31\121\3\117\33\121\3\117\1\123\1\120"+
    "\3\0\1\124\7\117\1\125\107\117\1\126\1\127\4\126"+
    "\1\130\13\126\1\117\2\126\1\131\2\126\1\117\75\126"+
    "\1\63\1\127\1\63\3\0\1\130\15\63\1\132\1\133"+
    "\100\63\127\0\1\134\4\0\1\135\120\0\1\135\4\0"+
    "\1\136\1\137\125\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\31\14\3\0\33\14\14\0\1\140\122\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\5\14\1\141\15\14"+
    "\1\141\5\14\3\0\5\14\1\142\1\141\2\14\1\143"+
    "\4\14\1\144\1\14\1\145\2\14\2\141\5\14\1\141"+
    "\16\0\1\146\131\0\1\147\11\0\1\150\113\0\1\150"+
    "\3\0\1\151\1\150\4\0\1\150\34\0\2\150\67\0"+
    "\1\150\113\0\1\150\3\0\1\151\1\150\4\0\2\150"+
    "\33\0\2\150\52\0\1\147\2\0\1\152\3\0\1\153"+
    "\1\154\1\155\3\0\1\150\34\0\1\154\1\147\55\0"+
    "\1\156\3\0\1\147\1\157\4\0\1\150\102\0\1\160"+
    "\1\0\2\160\11\0\1\155\1\0\1\32\6\0\3\160"+
    "\2\161\24\160\3\0\4\160\2\161\25\160\34\0\2\147"+
    "\124\0\1\147\102\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\2\14\1\162\26\14\3\0\33\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\14\14\1\163\14\14"+
    "\3\0\33\14\11\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\22\14\1\164\6\14\3\0\33\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\31\14\3\0\2\14"+
    "\1\165\30\14\11\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\31\14\3\0\22\14\1\166\10\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\31\14\3\0\1\14"+
    "\1\167\15\14\1\170\13\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\17\14\1\171\13\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\14\14\1\172\1\14\1\173\11\14\1\174\2\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\17\14\1\175\5\14\1\176\5\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\31\14\3\0\6\14"+
    "\1\177\24\14\11\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\31\14\3\0\24\14\1\200\6\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\31\14\3\0\1\14"+
    "\1\201\31\14\11\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\31\14\3\0\25\14\1\174\5\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\31\14\3\0\5\14"+
    "\1\202\25\14\11\0\1\14\1\0\2\14\13\0\1\14"+
    "\6\0\31\14\3\0\5\14\1\203\21\14\1\204\3\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\10\14\1\205\11\14\1\206\10\14\11\0\1\14"+
    "\1\0\2\14\13\0\1\14\6\0\31\14\3\0\10\14"+
    "\1\207\22\14\126\0\1\210\1\0\1\61\2\0\2\61"+
    "\2\0\1\61\1\211\4\61\1\211\6\61\1\0\101\61"+
    "\10\0\1\61\4\0\1\61\134\0\1\212\101\0\12\213"+
    "\1\214\54\213\1\215\36\213\1\0\1\216\4\0\1\216"+
    "\14\0\2\217\1\0\1\217\6\0\31\217\3\0\33\217"+
    "\77\0\1\220\7\0\1\221\1\0\1\222\114\0\1\223"+
    "\14\0\1\224\104\0\1\225\3\0\1\226\6\0\1\227"+
    "\65\0\1\230\34\0\1\231\75\0\1\232\4\0\1\233"+
    "\120\0\1\234\34\0\1\235\114\0\1\236\121\0\1\237"+
    "\7\0\1\240\115\0\1\241\7\0\1\242\115\0\1\243"+
    "\3\0\1\244\3\0\1\245\12\0\1\246\4\0\1\247"+
    "\56\0\1\250\34\0\1\251\117\0\1\252\115\0\1\253"+
    "\134\0\1\254\126\0\1\255\12\0\1\256\125\0\1\257"+
    "\107\0\1\260\6\0\1\261\127\0\1\251\35\0\1\262"+
    "\4\0\1\263\107\0\1\121\1\0\2\121\13\0\1\121"+
    "\6\0\31\121\3\0\33\121\3\0\1\264\4\0\1\264"+
    "\7\0\1\125\107\0\1\126\1\0\4\126\1\0\13\126"+
    "\1\0\2\126\1\0\2\126\1\0\75\126\6\265\1\0"+
    "\16\265\1\157\100\265\24\0\1\266\126\0\1\157\101\0"+
    "\1\135\4\0\1\135\120\0\1\135\4\0\1\136\117\0"+
    "\10\140\1\267\1\140\1\270\2\140\1\267\51\140\1\271"+
    "\36\140\7\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\20\14\1\272\12\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\16\14\1\273"+
    "\14\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\1\14\1\274\31\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\11\14\1\141"+
    "\21\14\16\0\1\275\131\0\2\150\1\0\1\150\1\0"+
    "\1\150\41\0\2\150\55\0\1\147\3\0\1\147\125\0"+
    "\1\153\125\0\1\147\127\0\1\155\11\0\2\276\33\0"+
    "\2\276\47\0\1\156\114\0\1\160\1\0\2\160\13\0"+
    "\1\160\6\0\31\160\3\0\33\160\11\0\1\160\1\0"+
    "\2\160\6\0\1\277\1\0\1\277\2\0\1\300\6\0"+
    "\31\160\3\0\33\160\11\0\1\14\1\0\2\14\13\0"+
    "\1\14\6\0\10\14\1\301\20\14\3\0\33\14\11\0"+
    "\1\14\1\0\2\14\13\0\1\14\6\0\17\14\1\302"+
    "\11\14\3\0\33\14\11\0\1\14\1\0\2\14\13\0"+
    "\1\14\6\0\2\14\1\303\26\14\3\0\33\14\11\0"+
    "\1\14\1\0\2\14\13\0\1\14\6\0\31\14\3\0"+
    "\17\14\1\304\13\14\11\0\1\14\1\0\2\14\13\0"+
    "\1\14\6\0\31\14\3\0\5\14\1\305\25\14\11\0"+
    "\1\14\1\0\2\14\13\0\1\14\6\0\31\14\3\0"+
    "\23\14\1\306\1\307\6\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\16\14\1\310\14\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\23\14\1\311\7\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\4\14\1\312\26\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\11\14\1\313\21\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\22\14\1\177\10\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\16\14\1\314\14\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\10\14\1\315\22\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\25\14\1\316\5\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\23\14\1\317\1\320"+
    "\6\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\14\14\1\321\16\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\11\14\1\322"+
    "\21\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\5\14\1\323\25\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\31\14\1\177"+
    "\1\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\11\14\1\324\21\14\126\0\1\325\2\0"+
    "\1\326\4\0\1\326\15\0\1\212\1\327\100\0\12\213"+
    "\1\330\54\213\1\215\36\213\23\0\2\217\1\0\1\217"+
    "\5\0\1\331\31\217\3\0\33\217\100\0\1\332\134\0"+
    "\1\333\135\0\1\334\123\0\1\335\130\0\1\336\114\0"+
    "\1\337\115\0\1\340\122\0\1\341\3\0\1\342\72\0"+
    "\1\343\162\0\1\344\101\0\1\345\116\0\1\346\136\0"+
    "\1\347\162\0\1\350\125\0\1\351\121\0\1\352\112\0"+
    "\1\353\147\0\1\354\105\0\1\355\135\0\1\356\132\0"+
    "\1\357\120\0\1\360\115\0\1\361\134\0\1\362\60\0"+
    "\1\363\162\0\1\364\137\0\1\365\125\0\1\366\126\0"+
    "\1\367\122\0\1\370\131\0\1\371\131\0\1\256\125\0"+
    "\1\372\103\0\1\373\32\0\6\265\1\0\16\265\1\0"+
    "\100\265\10\0\1\140\4\0\1\140\120\0\1\214\4\0"+
    "\1\214\110\0\10\140\1\267\1\140\1\374\2\140\1\267"+
    "\51\140\1\271\36\140\7\0\1\14\1\0\2\14\13\0"+
    "\1\14\6\0\31\14\3\0\23\14\1\141\7\14\11\0"+
    "\1\14\1\0\2\14\13\0\1\14\6\0\31\14\3\0"+
    "\6\14\1\141\24\14\11\0\1\14\1\0\2\14\13\0"+
    "\1\14\6\0\31\14\3\0\16\14\1\141\14\14\23\0"+
    "\1\277\1\0\1\277\2\0\1\277\125\0\1\277\106\0"+
    "\1\160\1\0\2\160\13\0\1\300\6\0\31\160\3\0"+
    "\33\160\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\7\14\1\375\21\14\3\0\33\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\3\14\1\376\25\14\3\0"+
    "\33\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\10\14\1\141\20\14\3\0\33\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\22\14\1\313"+
    "\10\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\1\14\1\377\31\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\5\14\1\171"+
    "\25\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\3\14\1\u0100\27\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\24\14\1\u0101"+
    "\6\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\5\14\1\u0102\25\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\6\14\1\u0103"+
    "\24\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\24\14\1\u0104\6\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\3\14\1\u0105"+
    "\27\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\5\14\1\u0106\25\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\23\14\1\u0107"+
    "\7\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\25\14\1\u0108\5\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\25\14\1\u0109"+
    "\5\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\5\14\1\u010a\25\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\24\14\1\u010b"+
    "\6\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\16\14\1\171\14\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\14\14\1\u010c"+
    "\16\14\3\0\1\326\4\0\1\326\16\0\1\327\125\0"+
    "\1\u010d\123\0\1\u010e\2\0\1\u010e\6\0\31\u010e\4\0"+
    "\32\u010e\107\0\1\u010f\112\0\1\u0110\143\0\1\u0111\124\0"+
    "\1\u0112\125\0\1\u0113\120\0\1\u0114\136\0\1\u0115\130\0"+
    "\1\u0116\115\0\1\u0117\64\0\1\u0118\162\0\1\u0119\62\0"+
    "\1\u011a\74\0\1\u011b\164\0\1\u011c\162\0\1\u011d\133\0"+
    "\1\u011e\133\0\1\u011f\110\0\1\u0120\131\0\1\u0121\133\0"+
    "\1\u0122\130\0\1\u0123\107\0\1\u0124\135\0\1\u0125\126\0"+
    "\1\u0126\133\0\1\u0127\61\0\1\u0128\162\0\1\u0128\111\0"+
    "\1\u0129\140\0\1\u012a\134\0\1\u012b\105\0\1\u012c\56\0"+
    "\1\u012d\64\0\1\u012c\122\0\1\u012c\43\0\1\u012e\76\0"+
    "\10\140\1\u012f\1\140\1\270\2\140\1\u012f\51\140\1\271"+
    "\36\140\7\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\16\14\1\u0130\12\14\3\0\33\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\10\14\1\u0131\20\14\3\0"+
    "\33\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\13\14\1\u0104\17\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\10\14\1\171"+
    "\22\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\11\14\1\u0132\21\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\11\14\1\u0133"+
    "\21\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\25\14\1\176\5\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\24\14\1\u0134"+
    "\6\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\22\14\1\u0135\10\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\5\14\1\u0104"+
    "\25\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\15\14\1\u0107\15\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\22\14\1\u0136"+
    "\10\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\3\14\1\u0137\27\14\11\0\1\14\1\0"+
    "\2\14\13\0\1\14\6\0\31\14\3\0\3\14\1\u0138"+
    "\27\14\11\0\1\14\1\0\2\14\13\0\1\14\6\0"+
    "\31\14\3\0\5\14\1\177\25\14\25\0\1\u010e\1\u0139"+
    "\1\0\1\u010e\6\0\31\u010e\4\0\32\u010e\104\0\1\u013a"+
    "\132\0\1\u013b\120\0\1\u013c\115\0\1\u013d\143\0\1\u013e"+
    "\136\0\1\u013f\106\0\1\u0140\120\0\1\u0141\126\0\1\u0142"+
    "\107\0\1\u0143\162\0\1\u0144\53\0\1\u0145\117\0\1\u011a"+
    "\162\0\1\u011a\141\0\1\u0146\115\0\1\u0147\121\0\1\u0148"+
    "\41\0\1\u0149\232\0\1\u014a\110\0\1\u014b\125\0\1\u014c"+
    "\136\0\1\u014d\117\0\1\u014e\122\0\1\u014f\30\0\1\u0150"+
    "\4\0\1\u0150\20\0\1\u0150\174\0\1\u0151\35\0\1\u0152"+
    "\232\0\1\u0153\41\0\1\u012d\123\0\1\u0154\125\0\1\u012d"+
    "\107\0\1\14\1\0\2\14\13\0\1\14\6\0\14\14"+
    "\1\u0155\14\14\3\0\33\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\21\14\1\141\7\14\3\0\33\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\16\14\1\u0156\14\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\6\14\1\u0157\24\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\11\14\1\u0158\21\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\27\14\1\u0159\3\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\16\14\1\u0104\14\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\24\14\1\177\6\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\10\14\1\177\22\14\25\0\1\u010e\2\0\1\u010e"+
    "\6\0\31\u015a\4\0\32\u015a\111\0\1\u015b\24\0\1\u015c"+
    "\226\0\1\u015d\131\0\1\u015e\20\0\1\u015f\234\0\1\u0160"+
    "\104\0\1\u0161\127\0\1\u0162\136\0\1\u0163\57\0\1\u0164"+
    "\162\0\1\u0165\142\0\1\u0166\110\0\1\u0167\134\0\1\u0168"+
    "\116\0\1\u0169\65\0\1\u016a\165\0\1\u016b\134\0\1\u016c"+
    "\26\0\1\u016d\125\0\1\u016e\211\0\1\u016f\147\0\1\u0170"+
    "\11\0\2\u0150\1\0\123\u0150\107\0\1\u0171\55\0\1\u0172"+
    "\74\0\1\u0173\144\0\1\u0174\107\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\4\14\1\141\24\14\3\0\33\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\25\14\1\u0107\5\14\11\0\1\14\1\0\2\14"+
    "\13\0\1\14\6\0\31\14\3\0\17\14\1\u0175\13\14"+
    "\11\0\1\14\1\0\2\14\13\0\1\14\6\0\31\14"+
    "\3\0\11\14\1\u0176\21\14\25\0\1\u010e\1\u0139\1\0"+
    "\1\u010e\6\0\31\u0177\4\0\32\u0177\100\0\1\u0178\66\0"+
    "\1\u0179\17\0\1\u017a\144\0\1\u017b\124\0\1\u017c\76\0"+
    "\1\u017d\155\0\1\u017e\35\0\1\u017f\125\0\1\u0180\234\0"+
    "\1\u0181\63\0\1\u011a\162\0\1\u011a\125\0\1\u0182\23\0"+
    "\1\u0183\125\0\1\u0184\224\0\1\u0185\65\0\1\u0186\34\0"+
    "\1\u0187\31\0\1\u0188\125\0\1\u0189\176\0\1\u018a\111\0"+
    "\1\u018b\171\0\1\u018c\133\0\1\u018d\125\0\1\u018e\63\0"+
    "\1\u018f\34\0\1\u0190\66\0\1\u0191\54\0\1\u0192\2\0"+
    "\1\u0192\3\0\1\u0192\1\0\4\u0192\1\0\110\u0192\7\0"+
    "\1\14\1\0\2\14\13\0\1\14\6\0\31\14\3\0"+
    "\16\14\1\u0193\14\14\11\0\1\14\1\0\2\14\13\0"+
    "\1\14\6\0\31\14\3\0\23\14\1\306\7\14\3\0"+
    "\1\u0194\4\0\1\u0194\14\0\1\u010e\1\u0139\1\0\1\u010e"+
    "\4\0\1\u0195\1\0\31\u0196\4\0\32\u0196\10\0\1\u0197"+
    "\172\0\1\u0198\34\0\1\u0199\62\0\1\u019a\34\0\1\u019b"+
    "\31\0\1\u019c\125\0\1\u019d\172\0\1\u019e\34\0\1\u019f"+
    "\23\0\1\u01a0\157\0\1\u01a1\130\0\1\u01a2\70\0\1\u01a3"+
    "\235\0\1\u01a4\63\0\1\u01a5\117\0\1\u01a6\65\0\1\u01a7"+
    "\162\0\1\u01a8\162\0\1\u01a9\75\0\1\u01aa\1\u01ab\117\0"+
    "\1\u01ac\142\0\1\u01ad\34\0\1\u01ae\45\0\1\u01af\34\0"+
    "\1\u01b0\131\0\1\u01b1\142\0\1\u01b2\20\0\1\u01b3\167\0"+
    "\1\u01b4\162\0\1\u01b5\55\0\1\u01b6\34\0\1\u01b7\34\0"+
    "\1\u0194\4\0\1\u0194\24\0\1\u0195\73\0\1\u0194\4\0"+
    "\1\u0194\14\0\1\u010e\1\u0139\1\0\1\u010e\4\0\1\u0195"+
    "\1\0\31\u01b8\4\0\32\u01b8\41\0\1\u01b9\144\0\1\u01ba"+
    "\162\0\1\u01bb\63\0\1\u01bc\162\0\1\u01bd\60\0\1\u01be"+
    "\130\0\1\u01bf\123\0\1\u01c0\162\0\1\u01c1\66\0\1\u01c2"+
    "\126\0\1\u01c3\34\0\1\u01c4\102\0\1\u01c5\34\0\1\u01c6"+
    "\55\0\1\u01c7\176\0\1\u011a\61\0\1\u01c8\34\0\1\u01c9"+
    "\104\0\1\u01ca\34\0\1\u01cb\45\0\1\u01cc\141\0\1\u01cd"+
    "\162\0\1\u01ce\53\0\1\u01cf\34\0\1\u01d0\70\0\1\u01d1"+
    "\34\0\1\u01d2\106\0\1\u01d3\34\0\1\u01d4\56\0\1\u01d5"+
    "\162\0\1\u01d6\105\0\1\u01d7\162\0\1\u01d8\20\0\1\u01d9"+
    "\215\0\1\u01da\66\0\1\u01db\10\0\1\u01dc\125\0\1\u01dd"+
    "\162\0\1\u01de\60\0\1\u01df\162\0\1\u01e0\31\0\1\u0194"+
    "\4\0\1\u0194\14\0\1\u010e\1\u0139\1\0\1\u010e\4\0"+
    "\1\u0195\1\0\31\u01e1\4\0\32\u01e1\37\0\1\u01e2\142\0"+
    "\1\u01e3\162\0\1\u01e4\71\0\1\u01e5\162\0\1\u01e6\65\0"+
    "\1\u01e7\34\0\1\u01e8\101\0\1\u01e9\34\0\1\u01ea\65\0"+
    "\1\u01e3\162\0\1\u01e4\53\0\1\u01eb\34\0\1\u01ec\77\0"+
    "\1\u01ed\162\0\1\u01ee\71\0\1\u01ef\162\0\1\u01f0\54\0"+
    "\1\u01f1\34\0\1\u01f2\72\0\1\u01f3\162\0\1\u01f4\101\0"+
    "\1\u01f5\162\0\1\u01f6\55\0\1\u01f7\34\0\1\u01f8\100\0"+
    "\1\u01d5\162\0\1\u01d6\75\0\1\u01f9\162\0\1\u01fa\74\0"+
    "\1\u01fb\162\0\1\u01fc\73\0\1\u01fd\162\0\1\u01fe\50\0"+
    "\1\u01ff\162\0\1\u0200\70\0\1\u0201\162\0\1\u0202\100\0"+
    "\1\u0203\62\0\1\u0204\172\0\1\u0205\34\0\1\u0206\56\0"+
    "\1\u0207\3\0\1\u01f3\30\0\1\u0208\3\0\1\u01f4\64\0"+
    "\1\u0209\162\0\1\u020a\74\0\1\u020b\162\0\1\u020c\24\0"+
    "\1\u0194\4\0\1\u0194\14\0\1\u010e\1\u0139\1\0\1\u010e"+
    "\4\0\1\u0195\1\0\31\u010e\4\0\32\u010e\60\0\1\u020d"+
    "\110\0\1\u020e\162\0\1\u020f\101\0\1\u011a\162\0\1\u011a"+
    "\63\0\1\u0210\162\0\1\u0211\66\0\1\u0212\162\0\1\u0213"+
    "\77\0\1\u0214\162\0\1\u0215\53\0\1\u0216\162\0\1\u0217"+
    "\74\0\1\u0218\162\0\1\u0219\111\0\1\u021a\162\0\1\u021b"+
    "\43\0\1\u021c\162\0\1\u021d\100\0\1\u021e\162\0\1\u021f"+
    "\104\0\1\u0220\162\0\1\u0221\47\0\1\u0164\162\0\1\u0165"+
    "\71\0\1\u0222\162\0\1\u0223\72\0\1\u0224\162\0\1\u0225"+
    "\103\0\1\u011a\162\0\1\u011a\71\0\1\u0226\162\0\1\u0227"+
    "\64\0\1\u0228\34\0\1\u0229\64\0\1\u022a\1\u022b\136\0"+
    "\1\u022c\162\0\1\u022d\55\0\1\u022e\162\0\1\u022f\102\0"+
    "\1\u0226\162\0\1\u0227\62\0\1\u0230\162\0\1\u0231\70\0"+
    "\1\u0232\133\0\1\u011a\162\0\1\u011a\45\0\1\u0233\162\0"+
    "\1\u0234\114\0\1\u0235\162\0\1\u0236\54\0\1\u0237\162\0"+
    "\1\u0238\74\0\1\u0239\162\0\1\u023a\104\0\1\u011a\163\0"+
    "\1\u011a\47\0\1\u023b\162\0\1\u023c\101\0\1\u023b\162\0"+
    "\1\u023c\47\0\1\u023d\162\0\1\u023e\73\0\1\u023f\162\0"+
    "\1\u0240\67\0\1\u0241\162\0\1\u0242\72\0\1\u01bc\162\0"+
    "\1\u01bd\107\0\1\u0243\162\0\1\u0244\70\0\1\u0245\162\0"+
    "\1\u0246\63\0\1\u0247\34\0\1\u0248\56\0\1\u0249\34\0"+
    "\1\u024a\111\0\1\u024b\162\0\1\u024c\47\0\1\u024d\162\0"+
    "\1\u024e\74\0\1\u024f\162\0\1\u0250\70\0\1\u0233\137\0"+
    "\1\u011a\162\0\1\u011a\52\0\1\u0251\162\0\1\u0252\114\0"+
    "\1\u01e3\163\0\1\u01e4\37\0\1\u0253\162\0\1\u0254\73\0"+
    "\1\u011a\162\0\1\u011a\67\0\1\u0255\162\0\1\u0256\76\0"+
    "\1\u01e5\162\0\1\u01e6\67\0\1\u0257\162\0\1\u0258\65\0"+
    "\1\u011a\162\0\1\u011a\107\0\1\u0259\162\0\1\u025a\71\0"+
    "\1\u025b\162\0\1\u025c\47\0\1\u025d\162\0\1\u025e\71\0"+
    "\1\u025f\162\0\1\u0260\110\0\1\u0261\162\0\1\u0262\32\0"+
    "\1\u0263\125\0\1\u0264\154\0\1\u0265\162\0\1\u0266\74\0"+
    "\1\u0267\162\0\1\u0268\56\0\1\u0233\162\0\1\u0234\61\0"+
    "\1\u0269\162\0\1\u026a\74\0\1\u026b\162\0\1\u026c\100\0"+
    "\1\u026d\162\0\1\u026e\75\0\1\u026f\162\0\1\u0270\70\0"+
    "\1\u020e\162\0\1\u020f\64\0\1\u0243\162\0\1\u0244\103\0"+
    "\1\u0271\125\0\1\u0272\101\0\1\u0273\162\0\1\u0274\105\0"+
    "\1\u0243\162\0\1\u0244\62\0\1\u011a\162\0\1\u011a\70\0"+
    "\1\u01e3\162\0\1\u01e4\55\0\1\u01ff\162\0\1\u0200\114\0"+
    "\1\u011a\162\0\1\u011a\62\0\1\u0275\162\0\1\u0276\101\0"+
    "\1\u011a\163\0\1\u011a\64\0\1\u0277\162\0\1\u0278\54\0"+
    "\1\u0261\162\0\1\u0262\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[50396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\4\0\1\1\1\0\1\11\10\1\2\11"+
    "\36\1\3\11\2\1\3\11\25\1\2\11\4\1\1\11"+
    "\1\1\2\11\3\1\1\0\1\1\3\0\6\1\2\11"+
    "\1\0\5\1\1\11\31\1\1\0\1\1\1\0\1\11"+
    "\46\0\1\11\1\0\2\1\3\0\35\1\1\0\1\1"+
    "\44\0\20\1\1\11\14\0\1\11\24\0\12\1\27\0"+
    "\1\1\4\0\5\1\33\0\2\1\33\0\2\1\1\0"+
    "\1\11\343\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[632];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int start;
    public int end;
    public int beginString;
    public static Set<String> commands = new HashSet<String>();
    public static Set<String> macros = new HashSet<String>();
    public static Set<String> variables = new HashSet<String>();
    public Set<String> infile;

    private ScilabDocument doc;
    private boolean transposable;
    private Element elem;
    private boolean breakstring;
    private boolean breakcomment;
    private MatchingBlockScanner matchBlock;

    static {
        // For SciNotes colors in preferences
        commands.add("cos");
        macros.add("sind");
    }

    public ScilabLexer(ScilabDocument doc) {
        this(doc, new MatchingBlockScanner(doc), true);
    }

    public ScilabLexer(ScilabDocument doc, boolean update) {
        this(doc, new MatchingBlockScanner(doc), update);
    }

    public ScilabLexer(ScilabDocument doc, MatchingBlockScanner matchBlock, boolean update) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.infile = doc.getFunctionsInDoc();
        this.matchBlock = matchBlock;
        if (update) {
                update();
        }
    }

    public static void update() {
       if (ScilabCommonsUtils.isScilabThread()) {
           String[] vars = ScilabKeywords.GetVariablesName();
           String[] funs = ScilabKeywords.GetFunctionsName();
           String[] macs = ScilabKeywords.GetMacrosName();
           variables.clear();
           commands.clear();
           macros.clear();
           if (vars != null) {
               variables.addAll(Arrays.asList(vars));
           }
           if (funs != null) {
               commands.addAll(Arrays.asList(funs));
           }
           if (macs != null) {
               macros.addAll(Arrays.asList(macs));
           }
        }
    }

    public void setRange(int p0, int p1) {
        start = p0;
        end = p1;
        transposable = false;
        breakstring = false;
        yyreset(new ScilabDocumentReader(doc, p0, p1));
        int currentLine = elem.getElementIndex(start);
        if (currentLine != 0) {
           ScilabDocument.ScilabLeafElement e = (ScilabDocument.ScilabLeafElement) elem.getElement(currentLine - 1);
           if (e.isBrokenString()) {
              yybegin(QSTRING);
           } else if (e.isBlockComment()) {
              yybegin(BLOCKCOMMENT);
           }
        }
    }

    public int yychar() {
        return (int) yychar;
    }

    public int scan() throws IOException {
        int ret = yylex();
        int lastPos = start + yychar() + yylength();
        if (lastPos == end - 1) {
           ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBrokenString(breakstring);
           breakstring = false;
        } else if (lastPos == end) {
           ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBlockComment(yystate() == BLOCKCOMMENT);
        }
        return ret;
    }

    public boolean isLineFinishedByBlockComment(int start, int end) {
        this.start = start;
        this.end = end;
        try {           
           yyreset(new ScilabDocumentReader(doc, start, end));
           int tok = 0;
           while (tok != ScilabLexerConstants.EOF) {
              tok = yylex();
           }
        } catch (Exception e) { }
        
        return yystate() == BLOCKCOMMENT;
    }

    public int getKeyword(int pos, boolean strict) {
        // Pre condition
        if (elem == null) {
            return ScilabLexerConstants.DEFAULT;
        }

        Element line = elem.getElement(elem.getElementIndex(pos));
        int end = line.getEndOffset();
        int tok = -1;
        start = line.getStartOffset();
        int startL = start;
        int s = -1;

        try {
           yyreset(new ScilabDocumentReader(doc, start, end));
           if (!strict) {
              pos++;
           }

           while (startL < pos && (s != startL || yystate() == BREAKSTRING)) {
               s = startL;
               tok = yylex();
               startL = start + yychar() + yylength();
           }

           return tok;
        } catch (IOException e) {
           return ScilabLexerConstants.DEFAULT;
        }
     }

     public static ScilabTokens getScilabTokens(String str) {
         ScilabDocument doc = new ScilabDocument(false);
         try {
             doc.insertString(0, str, null);
         } catch (BadLocationException e) { }
         return getScilabTokens(doc);
     }

     public static ScilabTokens getScilabTokens(ScilabDocument doc) {
         ScilabLexer lexer = new ScilabLexer(doc);
         lexer.yyreset(new ScilabDocumentReader(doc, 0, doc.getLength()));
         ScilabTokens tokens = new ScilabTokens();
         int tok = -1;
         try {
            while (tok != ScilabLexerConstants.EOF) {
               tok = lexer.yylex();
               tokens.add(tok, lexer.yychar() + lexer.yylength());
            }
         } catch (IOException e) { }
 
         return tokens;
     }

     public static class ScilabTokens {
        private List<Integer> tokenType = new ArrayList<Integer>();
        private List<Integer> tokenPos = new ArrayList<Integer>();

        ScilabTokens() { }

        void add(final int type, final int pos) {
           tokenType.add(type);
           tokenPos.add(pos);
        }

        public final List<Integer> getTokenType() {
           return tokenType;
        }

        public final List<Integer> getTokenPos() {
           return tokenPos;
        }
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScilabLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return ScilabLexerConstants.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ScilabLexerConstants.STRING;
            }
            // fall through
          case 45: break;
          case 2:
            { transposable = false;
                                   return ScilabLexerConstants.DEFAULT;
            }
            // fall through
          case 46: break;
          case 3:
            { return ScilabLexerConstants.TAB;
            }
            // fall through
          case 47: break;
          case 4:
            { return ScilabLexerConstants.WHITE;
            }
            // fall through
          case 48: break;
          case 5:
            { transposable = true;
                                   String str = yytext();
                                   if (commands.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.COMMANDS;
                                   } else if (macros.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROS;
                                   } else if (infile.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROINFILE;
                                   } else {
                                       List<String>[] arr = doc.getInOutArgs(start + yychar());
                                       if (arr != null && (arr[0].contains(str) || arr[1].contains(str))) {
                                           return ScilabLexerConstants.INPUTOUTPUTARGS;
                                       } else if (variables.contains(str)) {
                                           return ScilabLexerConstants.VARIABLES;
                                       }
                                   }
                                   return ScilabLexerConstants.ID;
            }
            // fall through
          case 49: break;
          case 6:
            { transposable = false;
                                   beginString = zzStartRead;
                                   yybegin(QSTRING);
                                   return ScilabLexerConstants.STRING;
            }
            // fall through
          case 50: break;
          case 7:
            { transposable = false;
                                   return ScilabLexerConstants.SPECIAL;
            }
            // fall through
          case 51: break;
          case 8:
            { transposable = false;
                                   return ScilabLexerConstants.OPERATOR;
            }
            // fall through
          case 52: break;
          case 9:
            { if (transposable) {
                                       return ScilabLexerConstants.TRANSP;
                                    } else {
                                       beginString = zzStartRead;
                                       yybegin(QSTRING);
                                       return ScilabLexerConstants.STRING;
                                    }
            }
            // fall through
          case 53: break;
          case 10:
            { transposable = false;
                                   return ScilabLexerConstants.OPENCLOSE;
            }
            // fall through
          case 54: break;
          case 11:
            { transposable = true;
                                   return ScilabLexerConstants.OPENCLOSE;
            }
            // fall through
          case 55: break;
          case 12:
            { transposable = false;
                                   yybegin(FIELD);
                                   return ScilabLexerConstants.OPERATOR;
            }
            // fall through
          case 56: break;
          case 13:
            { transposable = true;
                                   return ScilabLexerConstants.NUMBER;
            }
            // fall through
          case 57: break;
          case 14:
            { return ScilabLexerConstants.TAB_STRING;
            }
            // fall through
          case 58: break;
          case 15:
            { return ScilabLexerConstants.DEFAULT;
            }
            // fall through
          case 59: break;
          case 16:
            { return ScilabLexerConstants.WHITE_STRING;
            }
            // fall through
          case 60: break;
          case 17:
            { transposable = false;
                                   yybegin(YYINITIAL);
                                   return ScilabLexerConstants.STRING;
            }
            // fall through
          case 61: break;
          case 18:
            { return ScilabLexerConstants.COMMENT;
            }
            // fall through
          case 62: break;
          case 19:
            { return ScilabLexerConstants.TAB_COMMENT;
            }
            // fall through
          case 63: break;
          case 20:
            { return ScilabLexerConstants.WHITE_COMMENT;
            }
            // fall through
          case 64: break;
          case 21:
            { yypushback(1);
                                   yybegin(YYINITIAL);
            }
            // fall through
          case 65: break;
          case 22:
            { 
            }
            // fall through
          case 66: break;
          case 23:
            { transposable = true;
                                   return ScilabLexerConstants.FIELD;
            }
            // fall through
          case 67: break;
          case 24:
            { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.TAB;
            }
            // fall through
          case 68: break;
          case 25:
            { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.WHITE;
            }
            // fall through
          case 69: break;
          case 26:
            { yypushback(yylength());
                                   yybegin(YYINITIAL);
            }
            // fall through
          case 70: break;
          case 27:
            { return ScilabLexerConstants.ERROR;
            }
            // fall through
          case 71: break;
          case 28:
            { transposable = true;
                                   return ScilabLexerConstants.CONSTANTES;
            }
            // fall through
          case 72: break;
          case 29:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(BLOCKCOMMENT);
            }
            // fall through
          case 73: break;
          case 30:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(COMMENT);
            }
            // fall through
          case 74: break;
          case 31:
            { transposable = false;
                                   return ScilabLexerConstants.SKEYWORD;
            }
            // fall through
          case 75: break;
          case 32:
            { transposable = false;
                                   return ScilabLexerConstants.OSKEYWORD;
            }
            // fall through
          case 76: break;
          case 33:
            { yypushback(yylength());
                                   yybegin(BREAKSTRING);
                                   transposable = false;
                                   return ScilabLexerConstants.STRING;
            }
            // fall through
          case 77: break;
          case 34:
            { return ScilabLexerConstants.LATEX;
            }
            // fall through
          case 78: break;
          case 35:
            { yybegin(YYINITIAL);
                                   return ScilabLexerConstants.COMMENT;
            }
            // fall through
          case 79: break;
          case 36:
            { breakstring = true;
                                   return ScilabLexerConstants.SPECIAL;
            }
            // fall through
          case 80: break;
          case 37:
            { transposable = false;
                                   if (matchBlock != null) {
                                      MatchingBlockScanner.MatchingPositions pos = matchBlock.getMatchingBlock(start + yychar() + yylength(), false);
                                      if (pos != null) {
                                         try {
                                             String match = doc.getText(pos.secondB, pos.secondE - pos.secondB);
                                             if (match.equals("function")) {
                                                return ScilabLexerConstants.FKEYWORD;
                                             }
                                         } catch (BadLocationException e) { }
                                      }
                                   }
                                   return ScilabLexerConstants.OSKEYWORD;
            }
            // fall through
          case 81: break;
          case 38:
            { transposable = false;
                                   return ScilabLexerConstants.ELSEIF;
            }
            // fall through
          case 82: break;
          case 39:
            { transposable = false;
                                   return ScilabLexerConstants.CKEYWORD;
            }
            // fall through
          case 83: break;
          case 40:
            { return ScilabLexerConstants.AUTHORS;
            }
            // fall through
          case 84: break;
          case 41:
            { return ScilabLexerConstants.TODO;
            }
            // fall through
          case 85: break;
          case 42:
            { return ScilabLexerConstants.URL;
            }
            // fall through
          case 86: break;
          case 43:
            { transposable = false;
                                   return ScilabLexerConstants.FKEYWORD;
            }
            // fall through
          case 87: break;
          case 44:
            { return ScilabLexerConstants.MAIL;
            }
            // fall through
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
