// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: modules/scinotes/src/java/jflex/scilab.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.scinotes;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.text.BadLocationException;
import javax.swing.text.Element;
import org.scilab.modules.commons.ScilabCommonsUtils;

@javax.annotation.Generated("JFlex")


@SuppressWarnings("fallthrough")
public final class ScilabLexer extends ScilabLexerConstants {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int QSTRING = 2;
  public static final int COMMENT = 4;
  public static final int BLOCKCOMMENT = 6;
  public static final int FIELD = 8;
  public static final int COMMANDS = 10;
  public static final int COMMANDSWHITE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\3\26"+
    "\1\27\6\26\1\30\1\31\1\32\1\33\1\34\1\11"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\56\1\65\1\66\1\67\1\70\1\17\1\71\1\72"+
    "\1\0\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\67\1\125\1\17\1\126\6\0"+
    "\1\3\142\0\1\127\1\130\12\0\1\131\u0133\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\11\1\12\2\7\1\1\1\7\1\13"+
    "\1\7\1\14\1\6\2\7\3\4\1\7\16\4\1\7"+
    "\1\15\1\16\1\17\1\20\1\21\1\15\1\22\1\23"+
    "\1\24\26\22\1\25\1\26\1\27\1\25\1\30\1\31"+
    "\1\32\1\15\1\2\1\3\1\15\1\0\1\33\3\0"+
    "\1\34\1\4\2\34\2\4\2\7\1\33\1\0\1\7"+
    "\1\6\1\7\1\14\1\35\1\36\1\33\1\14\10\4"+
    "\1\37\5\4\1\40\10\4\1\7\2\0\1\41\52\0"+
    "\1\42\1\0\1\15\3\0\4\4\1\33\3\14\1\34"+
    "\11\4\1\43\12\4\1\33\1\41\1\44\51\0\7\4"+
    "\1\45\1\4\1\46\10\4\45\0\1\41\12\4\34\0"+
    "\1\47\4\0\3\4\1\45\2\4\40\0\3\4\40\0"+
    "\1\50\1\4\1\51\1\0\1\52\364\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[681];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\132\0\264\0\u010e\0\u0168\0\u01c2\0\u021c\0\u0276"+
    "\0\u02d0\0\u032a\0\u0384\0\u03de\0\u0384\0\u0438\0\u0492\0\u03de"+
    "\0\u0276\0\u0276\0\u04ec\0\u0546\0\u05a0\0\u05fa\0\u0654\0\u06ae"+
    "\0\u0708\0\u05a0\0\u0762\0\u07bc\0\u0816\0\u0870\0\u08ca\0\u05a0"+
    "\0\u0924\0\u097e\0\u09d8\0\u0a32\0\u0a8c\0\u0ae6\0\u0b40\0\u0b9a"+
    "\0\u0bf4\0\u0c4e\0\u0ca8\0\u0d02\0\u0d5c\0\u0db6\0\u0e10\0\u0e6a"+
    "\0\u0276\0\u0276\0\u0276\0\u0ec4\0\u0276\0\u0276\0\u0276\0\u0276"+
    "\0\u0f1e\0\u0f78\0\u0fd2\0\u102c\0\u1086\0\u10e0\0\u113a\0\u1194"+
    "\0\u11ee\0\u1248\0\u12a2\0\u12fc\0\u1356\0\u13b0\0\u140a\0\u1464"+
    "\0\u14be\0\u1518\0\u1572\0\u15cc\0\u1626\0\u1680\0\u0276\0\u0276"+
    "\0\u16da\0\u16da\0\u1734\0\u1734\0\u0276\0\u178e\0\u0276\0\u0276"+
    "\0\u17e8\0\u02d0\0\u1842\0\u189c\0\u05a0\0\u18f6\0\u0384\0\u1950"+
    "\0\u19aa\0\u1a04\0\u1a5e\0\u1ab8\0\u1b12\0\u0276\0\u0276\0\u1b6c"+
    "\0\u1bc6\0\u1c20\0\u1c7a\0\u1cd4\0\u1d2e\0\u0276\0\u1d88\0\u1de2"+
    "\0\u1e3c\0\u1e96\0\u1ef0\0\u1f4a\0\u1fa4\0\u1ffe\0\u2058\0\u20b2"+
    "\0\u0384\0\u210c\0\u2166\0\u21c0\0\u221a\0\u2274\0\u0384\0\u22ce"+
    "\0\u2328\0\u2382\0\u23dc\0\u2436\0\u2490\0\u24ea\0\u2544\0\u259e"+
    "\0\u0ec4\0\u0f1e\0\u0276\0\u25f8\0\u2652\0\u0fd2\0\u26ac\0\u2706"+
    "\0\u2760\0\u27ba\0\u2814\0\u286e\0\u28c8\0\u2922\0\u297c\0\u29d6"+
    "\0\u2a30\0\u2a8a\0\u2ae4\0\u2b3e\0\u2b98\0\u2bf2\0\u2c4c\0\u2ca6"+
    "\0\u2d00\0\u2d5a\0\u2db4\0\u2e0e\0\u2e68\0\u2ec2\0\u2f1c\0\u2f76"+
    "\0\u2fd0\0\u302a\0\u3084\0\u30de\0\u3138\0\u3192\0\u31ec\0\u3246"+
    "\0\u32a0\0\u32fa\0\u3354\0\u33ae\0\u1680\0\u0276\0\u1734\0\u3408"+
    "\0\u3462\0\u34bc\0\u3516\0\u3570\0\u35ca\0\u3624\0\u367e\0\u1b12"+
    "\0\u36d8\0\u3732\0\u378c\0\u37e6\0\u3840\0\u389a\0\u38f4\0\u394e"+
    "\0\u39a8\0\u3a02\0\u3a5c\0\u3ab6\0\u3b10\0\u3b6a\0\u3bc4\0\u3c1e"+
    "\0\u3c78\0\u3cd2\0\u3d2c\0\u3d86\0\u3de0\0\u3e3a\0\u3e94\0\u3eee"+
    "\0\u259e\0\u0f1e\0\u0276\0\u3f48\0\u3fa2\0\u3ffc\0\u4056\0\u40b0"+
    "\0\u410a\0\u4164\0\u41be\0\u4218\0\u4272\0\u42cc\0\u4326\0\u4380"+
    "\0\u43da\0\u4434\0\u448e\0\u44e8\0\u4542\0\u459c\0\u45f6\0\u4650"+
    "\0\u46aa\0\u4704\0\u475e\0\u47b8\0\u4812\0\u486c\0\u48c6\0\u4920"+
    "\0\u497a\0\u49d4\0\u4a2e\0\u4a88\0\u4ae2\0\u4b3c\0\u4b96\0\u4bf0"+
    "\0\u4c4a\0\u4ca4\0\u4cfe\0\u4d58\0\u4db2\0\u4e0c\0\u4e66\0\u4ec0"+
    "\0\u4f1a\0\u4f74\0\u4fce\0\u5028\0\u5082\0\u0384\0\u50dc\0\u5136"+
    "\0\u5190\0\u51ea\0\u5244\0\u529e\0\u52f8\0\u5352\0\u53ac\0\u5406"+
    "\0\u5460\0\u54ba\0\u5514\0\u556e\0\u55c8\0\u5622\0\u567c\0\u56d6"+
    "\0\u5730\0\u578a\0\u57e4\0\u583e\0\u5898\0\u58f2\0\u594c\0\u59a6"+
    "\0\u5a00\0\u5a5a\0\u5ab4\0\u5b0e\0\u5b68\0\u5bc2\0\u5c1c\0\u5c76"+
    "\0\u5cd0\0\u5d2a\0\u5d84\0\u5dde\0\u5e38\0\u5e92\0\u5eec\0\u5f46"+
    "\0\u5fa0\0\u5ffa\0\u6054\0\u3462\0\u60ae\0\u6108\0\u6162\0\u61bc"+
    "\0\u6216\0\u6270\0\u62ca\0\u6324\0\u637e\0\u63d8\0\u6432\0\u648c"+
    "\0\u64e6\0\u6540\0\u659a\0\u65f4\0\u664e\0\u66a8\0\u6702\0\u675c"+
    "\0\u67b6\0\u6810\0\u686a\0\u68c4\0\u691e\0\u6978\0\u69d2\0\u6a2c"+
    "\0\u6a86\0\u6ae0\0\u6b3a\0\u6b94\0\u6bee\0\u6c48\0\u6ca2\0\u6cfc"+
    "\0\u6d56\0\u6db0\0\u6e0a\0\u6e64\0\u6ebe\0\u6f18\0\u6f72\0\u6fcc"+
    "\0\u7026\0\u7080\0\u0384\0\u70da\0\u7134\0\u718e\0\u71e8\0\u7242"+
    "\0\u729c\0\u72f6\0\u7350\0\u73aa\0\u7404\0\u745e\0\u74b8\0\u7512"+
    "\0\u756c\0\u75c6\0\u7620\0\u767a\0\u76d4\0\u772e\0\u7788\0\u77e2"+
    "\0\u783c\0\u7896\0\u78f0\0\u794a\0\u79a4\0\u79fe\0\u7a58\0\u7ab2"+
    "\0\u7b0c\0\u7b66\0\u7bc0\0\u7c1a\0\u7c74\0\u7cce\0\u7d28\0\u7d82"+
    "\0\u7ddc\0\u7e36\0\u7e90\0\u7eea\0\u7f44\0\u7f9e\0\u7ff8\0\u8052"+
    "\0\u80ac\0\u8106\0\u8160\0\u81ba\0\u8214\0\u826e\0\u82c8\0\u8322"+
    "\0\u837c\0\u83d6\0\u8430\0\u848a\0\u84e4\0\u853e\0\u8598\0\u85f2"+
    "\0\u864c\0\u86a6\0\u8700\0\u875a\0\u87b4\0\u880e\0\u8868\0\u88c2"+
    "\0\u7c74\0\u891c\0\u0384\0\u8976\0\u0276\0\u89d0\0\u8a2a\0\u8a84"+
    "\0\u8ade\0\u8b38\0\u8b92\0\u8bec\0\u8c46\0\u8ca0\0\u8cfa\0\u8d54"+
    "\0\u8dae\0\u8e08\0\u8e62\0\u8ebc\0\u8f16\0\u8f70\0\u8fca\0\u9024"+
    "\0\u907e\0\u90d8\0\u9132\0\u918c\0\u91e6\0\u9240\0\u929a\0\u92f4"+
    "\0\u934e\0\u93a8\0\u9402\0\u945c\0\u94b6\0\u9510\0\u956a\0\u95c4"+
    "\0\u961e\0\u9678\0\u96d2\0\u972c\0\u9786\0\u97e0\0\u983a\0\u9894"+
    "\0\u98ee\0\u9948\0\u99a2\0\u99fc\0\u9a56\0\u9ab0\0\u9b0a\0\u9b64"+
    "\0\u9bbe\0\u9c18\0\u9c72\0\u9ccc\0\u9d26\0\u9d80\0\u9dda\0\u9e34"+
    "\0\u9e8e\0\u9ee8\0\u9f42\0\u9f9c\0\u9ff6\0\ua050\0\ua0aa\0\ua104"+
    "\0\ua15e\0\ua1b8\0\ua212\0\ua26c\0\ua2c6\0\ua320\0\ua37a\0\ua3d4"+
    "\0\ua42e\0\ua488\0\ua4e2\0\ua53c\0\ua596\0\ua5f0\0\ua64a\0\ua6a4"+
    "\0\ua6fe\0\ua758\0\ua7b2\0\ua80c\0\ua866\0\ua8c0\0\ua91a\0\ua974"+
    "\0\ua9ce\0\uaa28\0\uaa82\0\uaadc\0\uab36\0\uab90\0\uabea\0\uac44"+
    "\0\uac9e\0\uacf8\0\uad52\0\uadac\0\uae06\0\uae60\0\uaeba\0\uaf14"+
    "\0\uaf6e\0\uafc8\0\ub022\0\ub07c\0\ub0d6\0\ub130\0\ub18a\0\ub1e4"+
    "\0\ub23e\0\ub298\0\ub2f2\0\ub34c\0\ub3a6\0\ub400\0\ub45a\0\ub4b4"+
    "\0\ub50e\0\ub568\0\ub5c2\0\ub61c\0\ub676\0\ub6d0\0\ub72a\0\ub784"+
    "\0\ub7de\0\ub838\0\ub892\0\ub8ec\0\ub946\0\ub9a0\0\ub9fa\0\uba54"+
    "\0\ubaae\0\ubb08\0\ubb62\0\ubbbc\0\ubc16\0\ubc70\0\ubcca\0\ubd24"+
    "\0\ubd7e\0\ubdd8\0\ube32\0\ube8c\0\ubee6\0\ubf40\0\ubf9a\0\ubff4"+
    "\0\uc04e\0\uc0a8\0\uc102\0\uc15c\0\uc1b6\0\uc210\0\uc26a\0\uc2c4"+
    "\0\uc31e\0\uc378\0\uc3d2\0\uc42c\0\uc486\0\uc4e0\0\uc53a\0\uc594"+
    "\0\uc5ee\0\uc648\0\uc6a2\0\uc6fc\0\uc756\0\uc7b0\0\uc80a\0\uc864"+
    "\0\uc8be\0\uc918\0\uc972\0\uc9cc\0\uca26\0\uca80\0\ucada\0\ucb34"+
    "\0\ucb8e\0\ucbe8\0\ucc42\0\ucc9c\0\uccf6\0\ucd50\0\ucdaa\0\uce04"+
    "\0\uce5e\0\uceb8\0\ucf12\0\ucf6c\0\ucfc6\0\ud020\0\ud07a\0\ud0d4"+
    "\0\ud12e\0\ud188\0\ud1e2\0\ud23c\0\ud296\0\ud2f0\0\ud34a\0\ud3a4"+
    "\0\ud3fe\0\ud458\0\ud4b2\0\ud50c\0\ud566\0\ud5c0\0\ud61a\0\ud674"+
    "\0\ud6ce\0\ud728\0\ud782\0\ud7dc\0\ud836\0\ud890\0\ud8ea\0\ud944"+
    "\0\ud99e\0\ud9f8\0\uda52\0\udaac\0\udb06\0\udb60\0\udbba\0\udc14"+
    "\0\udc6e\0\udcc8\0\udd22\0\udd7c\0\uddd6\0\ude30\0\ude8a\0\udee4"+
    "\0\udf3e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[681];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\10\3\0\1\12\1\13\1\14\1\13"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\2\31\1\32\1\10\1\33"+
    "\3\34\22\13\1\35\1\36\2\13\1\37\2\13\1\21"+
    "\2\40\1\13\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\2\13\1\47\5\13\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\2\13\1\56\3\13\1\57\1\34\3\10\1\60"+
    "\1\61\1\62\2\60\1\0\1\63\1\60\1\64\4\60"+
    "\1\64\6\60\1\65\105\60\1\66\1\67\1\66\3\0"+
    "\1\70\3\66\1\71\14\66\1\72\2\66\1\73\3\66"+
    "\1\74\1\75\1\76\1\77\1\100\3\66\1\101\1\102"+
    "\2\66\1\103\2\66\1\104\2\66\1\105\1\106\1\66"+
    "\1\107\1\66\1\110\1\111\11\66\1\112\1\66\1\113"+
    "\12\66\1\114\1\115\14\66\1\67\1\66\3\0\1\70"+
    "\3\66\1\71\5\66\1\116\6\66\1\72\2\66\1\73"+
    "\3\66\1\74\1\75\1\76\1\77\1\100\3\66\1\101"+
    "\1\102\2\66\1\103\2\66\1\104\2\66\1\105\1\106"+
    "\1\66\1\107\1\66\1\110\1\111\11\66\1\112\1\66"+
    "\1\113\12\66\1\114\1\115\13\66\2\117\1\120\3\0"+
    "\1\117\1\121\1\117\1\121\1\122\1\121\22\117\31\121"+
    "\3\117\33\121\6\117\1\123\1\120\3\0\1\124\7\117"+
    "\1\125\113\117\1\126\1\127\4\126\1\130\13\126\1\117"+
    "\2\126\1\131\3\126\1\117\100\126\133\0\1\132\4\0"+
    "\1\133\124\0\1\133\4\0\1\134\1\135\131\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\33\13"+
    "\17\0\1\136\126\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\5\13\1\137\15\13\1\137\5\13\3\0\3\13"+
    "\1\140\1\13\1\141\1\137\2\13\1\142\4\13\1\143"+
    "\1\13\1\144\2\13\2\137\5\13\1\137\21\0\1\145"+
    "\135\0\1\146\12\0\1\147\116\0\1\147\3\0\1\150"+
    "\1\147\5\0\1\147\34\0\2\147\73\0\1\147\116\0"+
    "\1\147\3\0\1\150\1\147\5\0\2\147\33\0\2\147"+
    "\55\0\1\146\2\0\1\151\3\0\1\152\1\153\2\154"+
    "\3\0\1\147\34\0\1\153\1\146\60\0\1\155\3\0"+
    "\1\146\1\156\5\0\1\147\105\0\1\157\1\0\2\157"+
    "\11\0\1\154\1\0\2\31\6\0\3\157\2\160\24\157"+
    "\3\0\4\157\2\160\25\157\40\0\2\146\130\0\1\146"+
    "\105\0\1\13\1\0\2\13\13\0\2\13\6\0\2\13"+
    "\1\161\26\13\3\0\33\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\14\13\1\162\14\13\3\0\33\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\22\13"+
    "\1\163\6\13\3\0\33\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\2\13\1\164\17\13"+
    "\1\165\10\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\22\13\1\166\10\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\1\13"+
    "\1\167\15\13\1\170\13\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\17\13\1\171\13\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\14\13\1\172\1\13\1\173\11\13\1\174\2\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\17\13\1\175\5\13\1\176\5\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\6\13"+
    "\1\177\24\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\24\13\1\200\6\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\1\13"+
    "\1\201\31\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\25\13\1\174\5\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\5\13"+
    "\1\202\25\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\5\13\1\203\21\13\1\204\3\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\10\13\1\205\11\13\1\206\10\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\10\13"+
    "\1\207\22\13\132\0\1\210\4\0\1\60\2\0\2\60"+
    "\2\0\1\60\1\211\4\60\1\211\6\60\1\0\105\60"+
    "\10\0\1\60\4\0\1\60\114\0\12\212\1\213\55\212"+
    "\1\214\41\212\41\0\1\215\71\0\1\216\4\0\1\216"+
    "\14\0\2\217\1\0\2\217\6\0\31\217\3\0\33\217"+
    "\103\0\1\220\7\0\1\221\1\0\1\222\120\0\1\223"+
    "\14\0\1\224\110\0\1\225\3\0\1\226\6\0\1\227"+
    "\21\0\1\230\47\0\1\231\24\0\1\232\7\0\1\233"+
    "\101\0\1\234\4\0\1\235\124\0\1\236\34\0\1\237"+
    "\120\0\1\240\30\0\1\241\74\0\1\242\7\0\1\243"+
    "\121\0\1\244\7\0\1\245\121\0\1\246\3\0\1\247"+
    "\3\0\1\250\12\0\1\251\4\0\1\252\62\0\1\253"+
    "\34\0\1\254\123\0\1\255\121\0\1\256\140\0\1\257"+
    "\132\0\1\260\12\0\1\261\131\0\1\262\113\0\1\263"+
    "\6\0\1\264\133\0\1\254\40\0\1\265\4\0\1\266"+
    "\113\0\1\121\1\0\2\121\13\0\2\121\6\0\31\121"+
    "\3\0\33\121\6\0\1\267\4\0\1\267\7\0\1\125"+
    "\113\0\1\126\1\0\4\126\1\0\13\126\1\0\2\126"+
    "\1\0\3\126\1\0\100\126\6\270\1\0\16\270\1\156"+
    "\104\270\1\0\1\133\4\0\1\133\124\0\1\133\4\0"+
    "\1\134\123\0\10\136\1\271\1\136\1\272\2\136\1\271"+
    "\52\136\1\273\41\136\7\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\10\13\1\274\22\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\20\13\1\275\12\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\16\13\1\276\14\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\1\13\1\277\31\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\11\13\1\137\21\13\21\0"+
    "\1\300\135\0\2\147\1\0\1\147\1\0\1\147\42\0"+
    "\2\147\60\0\1\146\3\0\1\146\131\0\1\152\131\0"+
    "\1\146\133\0\2\154\11\0\2\301\33\0\2\301\52\0"+
    "\1\155\120\0\1\157\1\0\2\157\13\0\2\157\6\0"+
    "\31\157\3\0\33\157\14\0\1\157\1\0\2\157\6\0"+
    "\1\302\1\0\1\302\2\0\2\303\6\0\31\157\3\0"+
    "\33\157\14\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\10\13\1\304\20\13\3\0\33\13\14\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\17\13\1\305\11\13\3\0"+
    "\33\13\14\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\2\13\1\306\26\13\3\0\33\13\14\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\17\13\1\307"+
    "\13\13\14\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\7\13\1\310\23\13\14\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\5\13\1\311"+
    "\25\13\14\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\23\13\1\312\1\313\6\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\16\13"+
    "\1\314\14\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\23\13\1\315\7\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\4\13"+
    "\1\316\26\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\11\13\1\317\21\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\22\13"+
    "\1\177\10\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\16\13\1\320\14\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\10\13"+
    "\1\321\22\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\25\13\1\322\5\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\23\13"+
    "\1\323\1\324\6\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\14\13\1\325\16\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\11\13\1\326\21\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\5\13\1\327\25\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\31\13\1\177\1\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\11\13\1\330\21\13\132\0"+
    "\1\331\4\0\12\212\1\332\55\212\1\214\41\212\60\0"+
    "\1\333\74\0\2\217\1\0\2\217\5\0\1\334\31\217"+
    "\3\0\33\217\104\0\1\335\140\0\1\336\141\0\1\337"+
    "\127\0\1\340\134\0\1\341\120\0\1\342\121\0\1\343"+
    "\126\0\1\344\3\0\1\345\30\0\1\346\77\0\1\347"+
    "\77\0\1\350\202\0\1\351\115\0\1\352\105\0\1\353"+
    "\122\0\1\354\142\0\1\355\166\0\1\356\131\0\1\357"+
    "\131\0\1\360\125\0\1\361\116\0\1\362\153\0\1\363"+
    "\111\0\1\364\141\0\1\365\136\0\1\366\124\0\1\367"+
    "\121\0\1\370\30\0\1\371\107\0\1\372\64\0\1\373"+
    "\166\0\1\374\143\0\1\375\131\0\1\376\132\0\1\377"+
    "\126\0\1\u0100\135\0\1\u0101\135\0\1\261\131\0\1\u0102"+
    "\107\0\1\u0103\35\0\6\270\1\0\16\270\1\0\104\270"+
    "\10\0\1\136\4\0\1\136\124\0\1\213\4\0\1\213"+
    "\114\0\10\136\1\271\1\136\1\u0104\2\136\1\271\52\136"+
    "\1\273\41\136\7\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\1\13\1\u0105\31\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\23\13"+
    "\1\137\7\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\6\13\1\137\24\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\16\13"+
    "\1\137\14\13\26\0\1\302\1\0\1\302\2\0\2\302"+
    "\130\0\2\302\111\0\1\157\1\0\2\157\13\0\2\303"+
    "\6\0\31\157\3\0\33\157\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\7\13\1\u0106\21\13\3\0\33\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\3\13"+
    "\1\u0107\25\13\3\0\33\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\10\13\1\137\20\13\3\0\33\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\22\13\1\317\10\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\25\13\1\u0108\5\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\1\13\1\u0109\31\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\5\13\1\171\25\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\3\13\1\u010a\27\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\24\13\1\u010b\6\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\5\13\1\u010c\25\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\6\13\1\u010d\24\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\24\13\1\u010e\6\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\3\13\1\u010f\27\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\5\13\1\u0110\25\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\23\13\1\u0111\7\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\25\13\1\u0112\5\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\25\13\1\u0113\5\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\5\13\1\u0114\25\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\24\13\1\u0115\6\13"+
    "\14\0\1\13\1\0\2\13\13\0\2\13\6\0\31\13"+
    "\3\0\16\13\1\171\14\13\14\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\14\13\1\u0116\16\13"+
    "\30\0\1\u0117\2\0\2\u0117\6\0\31\u0117\4\0\32\u0117"+
    "\113\0\1\u0118\116\0\1\u0119\147\0\1\u011a\130\0\1\u011b"+
    "\131\0\1\u011c\124\0\1\u011d\142\0\1\u011e\134\0\1\u011f"+
    "\121\0\1\u0120\131\0\1\u0121\136\0\1\u0122\63\0\1\u0123"+
    "\200\0\1\u0124\117\0\1\u0125\66\0\1\333\77\0\1\u0126"+
    "\171\0\1\u0127\166\0\1\u0128\137\0\1\u0129\151\0\1\u012a"+
    "\117\0\1\u012b\114\0\1\u012c\135\0\1\u012d\137\0\1\u012e"+
    "\134\0\1\u012f\113\0\1\u0130\141\0\1\u0131\132\0\1\u0132"+
    "\131\0\1\u0133\137\0\1\u0134\65\0\1\u0135\166\0\1\u0135"+
    "\115\0\1\u0136\144\0\1\u0137\140\0\1\u0138\111\0\1\u0139"+
    "\62\0\1\u013a\64\0\1\u0139\126\0\1\u0139\47\0\1\u013b"+
    "\101\0\10\136\1\u013c\1\136\1\272\2\136\1\u013c\52\136"+
    "\1\273\41\136\7\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\22\13\1\275\10\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\16\13\1\u013d\12\13"+
    "\3\0\33\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\10\13\1\u013e\20\13\3\0\33\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\15\13"+
    "\1\u013f\15\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\13\13\1\u010e\17\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\10\13"+
    "\1\171\22\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\11\13\1\u0140\21\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\11\13"+
    "\1\u0141\21\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\25\13\1\176\5\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\24\13"+
    "\1\u0142\6\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\22\13\1\u0143\10\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\5\13"+
    "\1\u010e\25\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\15\13\1\u0111\15\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\22\13"+
    "\1\u0144\10\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\3\13\1\u0145\27\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\3\13"+
    "\1\u0146\27\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\5\13\1\177\25\13\30\0\1\u0117"+
    "\1\u0147\1\0\2\u0117\6\0\31\u0117\4\0\32\u0117\110\0"+
    "\1\u0148\136\0\1\u0149\124\0\1\u014a\121\0\1\u014b\147\0"+
    "\1\u014c\142\0\1\u014d\112\0\1\u014e\124\0\1\u014f\132\0"+
    "\1\u0150\131\0\1\u0151\135\0\1\u0152\107\0\1\u0153\143\0"+
    "\1\u0154\154\0\1\u0155\57\0\1\u0156\123\0\1\333\166\0"+
    "\1\333\145\0\1\u0157\131\0\1\u0158\121\0\1\u0159\125\0"+
    "\1\u015a\44\0\1\u015b\237\0\1\u015c\114\0\1\u015d\131\0"+
    "\1\u015e\142\0\1\u015f\123\0\1\u0160\131\0\1\u0161\126\0"+
    "\1\u0162\33\0\1\u0163\4\0\1\u0163\21\0\1\u0163\200\0"+
    "\1\u0164\40\0\1\u0165\237\0\1\u0166\45\0\1\u013a\126\0"+
    "\1\u0167\131\0\1\u013a\113\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\14\13\1\u0168\14\13\3\0\33\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\21\13\1\137"+
    "\7\13\3\0\33\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\5\13\1\u0169\25\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\16\13\1\u016a\14\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\6\13\1\u016b\24\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\11\13\1\u016c\21\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\27\13\1\u016d\3\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\16\13\1\u010e\14\13\14\0\1\13\1\0\2\13\13\0"+
    "\2\13\6\0\31\13\3\0\24\13\1\177\6\13\14\0"+
    "\1\13\1\0\2\13\13\0\2\13\6\0\31\13\3\0"+
    "\10\13\1\177\22\13\30\0\1\u0117\2\0\2\u0117\6\0"+
    "\31\u016e\4\0\32\u016e\115\0\1\u016f\27\0\1\u0170\233\0"+
    "\1\u0171\135\0\1\u0172\23\0\1\u0173\241\0\1\u0174\110\0"+
    "\1\u0175\133\0\1\u0176\142\0\1\u0177\131\0\1\u0178\116\0"+
    "\1\u0179\76\0\1\u017a\206\0\1\u017b\111\0\1\u017c\146\0"+
    "\1\u017d\114\0\1\u017e\131\0\1\u017f\140\0\1\u0180\122\0"+
    "\1\u0181\71\0\1\u0182\171\0\1\u0183\140\0\1\u0184\31\0"+
    "\1\u0185\131\0\1\u0186\216\0\1\u0187\131\0\1\u0188\153\0"+
    "\1\u0189\14\0\2\u0163\1\0\127\u0163\110\0\1\u018a\61\0"+
    "\1\u018b\77\0\1\u018c\150\0\1\u018d\113\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\4\13\1\137\24\13\3\0"+
    "\33\13\14\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\16\13\1\u018e\14\13\14\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\25\13\1\u0111"+
    "\5\13\14\0\1\13\1\0\2\13\13\0\2\13\6\0"+
    "\31\13\3\0\17\13\1\u018f\13\13\14\0\1\13\1\0"+
    "\2\13\13\0\2\13\6\0\31\13\3\0\11\13\1\u0190"+
    "\21\13\30\0\1\u0117\1\u0147\1\0\2\u0117\6\0\31\u0191"+
    "\4\0\32\u0191\104\0\1\u0192\72\0\1\u0193\17\0\1\u0194"+
    "\150\0\1\u0195\130\0\1\u0196\102\0\1\u0197\161\0\1\u0198"+
    "\40\0\1\u0199\131\0\1\u019a\241\0\1\u019b\131\0\1\u019c"+
    "\21\0\1\u019d\177\0\1\333\163\0\1\u019e\134\0\1\333"+
    "\131\0\1\u019f\26\0\1\u01a0\131\0\1\u01a1\131\0\1\u01a2"+
    "\231\0\1\u01a3\71\0\1\u01a4\34\0\1\u01a5\34\0\1\u01a6"+
    "\131\0\1\u01a7\203\0\1\u01a8\115\0\1\u01a9\175\0\1\u01aa"+
    "\131\0\1\u01ab\137\0\1\u01ac\131\0\1\u01ad\67\0\1\u01ae"+
    "\34\0\1\u01af\72\0\1\u01b0\57\0\1\u01b1\2\0\1\u01b1"+
    "\3\0\1\u01b1\1\0\4\u01b1\1\0\114\u01b1\7\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\24\13"+
    "\1\u01b2\6\13\14\0\1\13\1\0\2\13\13\0\2\13"+
    "\6\0\31\13\3\0\16\13\1\u01b3\14\13\14\0\1\13"+
    "\1\0\2\13\13\0\2\13\6\0\31\13\3\0\23\13"+
    "\1\312\7\13\6\0\1\u01b4\4\0\1\u01b4\14\0\1\u0117"+
    "\1\u0147\1\0\2\u0117\4\0\1\u01b5\1\0\31\u01b6\4\0"+
    "\32\u01b6\13\0\1\u01b7\177\0\1\u01b8\34\0\1\u01b9\66\0"+
    "\1\u01ba\34\0\1\u01bb\34\0\1\u01bc\131\0\1\u01bd\177\0"+
    "\1\u01be\34\0\1\u01bf\26\0\1\u01c0\164\0\1\u01c1\134\0"+
    "\1\u01c2\73\0\1\u01c3\131\0\1\u01c4\164\0\1\u01c5\206\0"+
    "\1\u01c6\132\0\1\u01c7\67\0\1\u01c8\131\0\1\u01c9\123\0"+
    "\1\u01ca\70\0\1\u01cb\167\0\1\u01cc\166\0\1\u01cd\101\0"+
    "\1\u01ce\1\u01cf\123\0\1\u01d0\146\0\1\u01d1\34\0\1\u01d2"+
    "\51\0\1\u01d3\34\0\1\u01d4\135\0\1\u01d5\131\0\1\u01d6"+
    "\146\0\1\u01d7\23\0\1\u01d8\174\0\1\u01d9\166\0\1\u01da"+
    "\61\0\1\u01db\34\0\1\u01dc\45\0\1\13\1\0\2\13"+
    "\13\0\2\13\6\0\31\13\3\0\23\13\1\177\7\13"+
    "\6\0\1\u01b4\4\0\1\u01b4\25\0\1\u01b5\76\0\1\u01b4"+
    "\4\0\1\u01b4\14\0\1\u0117\1\u0147\1\0\2\u0117\4\0"+
    "\1\u01b5\1\0\31\u01dd\4\0\32\u01dd\45\0\1\u01de\150\0"+
    "\1\u01df\166\0\1\u01e0\67\0\1\u01e1\166\0\1\u01e2\64\0"+
    "\1\u01e3\134\0\1\u01e4\127\0\1\u01e5\166\0\1\u01e6\72\0"+
    "\1\u01e7\132\0\1\u01e8\34\0\1\u01e9\106\0\1\u01ea\34\0"+
    "\1\u01eb\61\0\1\u01ec\131\0\1\u01ed\132\0\1\u01e8\75\0"+
    "\1\u01ee\235\0\1\333\65\0\1\u01ef\34\0\1\u01f0\74\0"+
    "\1\u01ef\145\0\1\u01f1\34\0\1\u01f2\51\0\1\u01f3\145\0"+
    "\1\u01f4\166\0\1\u01f5\57\0\1\u01f6\34\0\1\u01f7\74\0"+
    "\1\u01f8\34\0\1\u01f9\112\0\1\u01fa\34\0\1\u01fb\62\0"+
    "\1\u01fc\166\0\1\u01fd\111\0\1\u01fe\166\0\1\u01ff\23\0"+
    "\1\u0200\131\0\1\u0201\222\0\1\u0202\72\0\1\u0203\10\0"+
    "\1\u0204\131\0\1\u0205\166\0\1\u0206\64\0\1\u0207\166\0"+
    "\1\u0208\34\0\1\u01b4\4\0\1\u01b4\14\0\1\u0117\1\u0147"+
    "\1\0\2\u0117\4\0\1\u01b5\1\0\31\u0209\4\0\32\u0209"+
    "\43\0\1\u020a\34\0\1\u020b\111\0\1\u020c\166\0\1\u020d"+
    "\75\0\1\u020e\166\0\1\u020f\71\0\1\u0210\34\0\1\u0211"+
    "\105\0\1\u0212\34\0\1\u0213\71\0\1\u020c\166\0\1\u020d"+
    "\57\0\1\u0214\34\0\1\u0215\103\0\1\u0216\166\0\1\u0217"+
    "\75\0\1\u0218\166\0\1\u0219\60\0\1\u021a\34\0\1\u021b"+
    "\74\0\1\u021a\153\0\1\u021c\111\0\1\u021d\166\0\1\u021e"+
    "\105\0\1\u021f\166\0\1\u0220\61\0\1\u0221\34\0\1\u0222"+
    "\104\0\1\u01fc\166\0\1\u01fd\101\0\1\u0223\166\0\1\u0224"+
    "\100\0\1\u0225\166\0\1\u0226\77\0\1\u0227\166\0\1\u0228"+
    "\54\0\1\u0229\166\0\1\u022a\74\0\1\u022b\166\0\1\u022c"+
    "\104\0\1\u022d\131\0\1\u022e\65\0\1\u022f\177\0\1\u0230"+
    "\34\0\1\u0231\62\0\1\u0232\3\0\1\u021d\30\0\1\u0233"+
    "\3\0\1\u021e\70\0\1\u0234\166\0\1\u0235\100\0\1\u0236"+
    "\166\0\1\u0237\27\0\1\u01b4\4\0\1\u01b4\14\0\1\u0117"+
    "\1\u0147\1\0\2\u0117\4\0\1\u01b5\1\0\31\u0117\4\0"+
    "\32\u0117\64\0\1\u0238\166\0\1\u0239\57\0\1\u023a\166\0"+
    "\1\u023b\105\0\1\333\166\0\1\333\67\0\1\u023c\166\0"+
    "\1\u023d\72\0\1\u023e\166\0\1\u023f\103\0\1\u0240\166\0"+
    "\1\u0241\57\0\1\u0242\166\0\1\u0243\100\0\1\u0244\166\0"+
    "\1\u0245\115\0\1\u0246\166\0\1\u0247\134\0\1\u0248\44\0"+
    "\1\u0249\166\0\1\u024a\104\0\1\u024b\166\0\1\u024c\110\0"+
    "\1\u024d\166\0\1\u024e\53\0\1\u017a\166\0\1\u017c\75\0"+
    "\1\u024f\166\0\1\u0250\76\0\1\u0251\166\0\1\u0252\107\0"+
    "\1\333\166\0\1\333\75\0\1\u0253\166\0\1\u0254\70\0"+
    "\1\u0255\34\0\1\u0256\74\0\1\u0255\125\0\1\u0257\1\u0258"+
    "\142\0\1\u0259\166\0\1\u025a\61\0\1\u025b\166\0\1\u025c"+
    "\106\0\1\u0253\166\0\1\u0254\66\0\1\u025d\166\0\1\u025e"+
    "\74\0\1\u025f\166\0\1\u0260\102\0\1\333\166\0\1\333"+
    "\51\0\1\215\166\0\1\u0261\120\0\1\u0262\166\0\1\u0263"+
    "\60\0\1\u0264\166\0\1\u0265\100\0\1\u0266\166\0\1\u0267"+
    "\110\0\1\333\167\0\1\333\53\0\1\u0268\166\0\1\u0269"+
    "\143\0\1\u026a\73\0\1\u0268\166\0\1\u0269\53\0\1\u026b"+
    "\166\0\1\u026c\77\0\1\u026d\166\0\1\u026e\73\0\1\u026f"+
    "\166\0\1\u0270\76\0\1\u01e1\166\0\1\u01e2\113\0\1\u0271"+
    "\166\0\1\u0272\74\0\1\u0273\166\0\1\u0274\67\0\1\u0275"+
    "\34\0\1\u0276\62\0\1\u0277\34\0\1\u0278\115\0\1\u0279"+
    "\166\0\1\u027a\53\0\1\u027b\166\0\1\u027c\100\0\1\u027d"+
    "\166\0\1\u027e\74\0\1\215\166\0\1\u0261\143\0\1\333"+
    "\56\0\1\u027f\166\0\1\u0280\120\0\1\u020c\167\0\1\u020d"+
    "\43\0\1\u0281\166\0\1\u0282\77\0\1\333\166\0\1\333"+
    "\151\0\1\u0283\53\0\1\u0284\166\0\1\u0285\102\0\1\u020e"+
    "\166\0\1\u020f\73\0\1\u0286\166\0\1\u0287\71\0\1\333"+
    "\166\0\1\333\113\0\1\u0288\166\0\1\u0289\75\0\1\u028a"+
    "\166\0\1\u028b\53\0\1\u028c\166\0\1\u028d\75\0\1\u028e"+
    "\166\0\1\u028f\114\0\1\u0290\166\0\1\u0291\35\0\1\u0292"+
    "\131\0\1\u0293\161\0\1\u0294\166\0\1\u0295\100\0\1\u0296"+
    "\166\0\1\u0297\144\0\1\u0298\47\0\1\215\166\0\1\u0261"+
    "\65\0\1\u0299\166\0\1\u029a\100\0\1\u029b\166\0\1\u029c"+
    "\104\0\1\u029d\166\0\1\u029e\101\0\1\u029f\166\0\1\u02a0"+
    "\74\0\1\u023a\166\0\1\u023b\70\0\1\u0271\166\0\1\u0272"+
    "\107\0\1\u02a1\131\0\1\u02a2\105\0\1\u02a3\166\0\1\u02a4"+
    "\111\0\1\u0271\166\0\1\u0272\124\0\1\u02a5\73\0\1\333"+
    "\166\0\1\333\74\0\1\u020c\166\0\1\u020d\61\0\1\u0229"+
    "\166\0\1\u022a\120\0\1\333\166\0\1\333\66\0\1\u02a6"+
    "\166\0\1\u02a7\105\0\1\333\167\0\1\333\105\0\1\u0261"+
    "\114\0\1\u02a8\166\0\1\u02a9\60\0\1\u0290\166\0\1\u0291"+
    "\26\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[57240];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\10\1\2\11\36\1\3\11\1\1\4\11"+
    "\26\1\2\11\4\1\1\11\1\1\2\11\1\1\1\0"+
    "\1\1\3\0\7\1\2\11\1\0\5\1\1\11\32\1"+
    "\2\0\1\11\52\0\1\11\1\0\1\1\3\0\37\1"+
    "\1\11\51\0\22\1\45\0\13\1\34\0\1\1\4\0"+
    "\6\1\40\0\3\1\40\0\3\1\1\0\1\11\364\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[681];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public int start;
    public int end;
    public int beginString;
    public static Set<String> commands = new HashSet<String>();
    public static Set<String> macros = new HashSet<String>();
    public static Set<String> variables = new HashSet<String>();
    public Set<String> infile;

    private ScilabDocument doc;
    private boolean transposable;
    private Element elem;
    private MatchingBlockScanner matchBlock;

    static {
        // For SciNotes colors in preferences
        commands.add("cos");
        macros.add("sind");
    }

    public ScilabLexer(ScilabDocument doc) {
        this(doc, new MatchingBlockScanner(doc), true);
    }

    public ScilabLexer(ScilabDocument doc, boolean update) {
        this(doc, new MatchingBlockScanner(doc), update);
    }

    public ScilabLexer(ScilabDocument doc, MatchingBlockScanner matchBlock, boolean update) {
        this.doc = doc;
        this.elem = doc.getDefaultRootElement();
        this.infile = doc.getFunctionsInDoc();
        this.matchBlock = matchBlock;
        if (update) {
                update();
        }
    }

    public static void update() {
       if (ScilabCommonsUtils.isScilabThread()) {
           String[] vars = ScilabKeywords.GetVariablesName();
           String[] funs = ScilabKeywords.GetFunctionsName();
           String[] macs = ScilabKeywords.GetMacrosName();
           variables.clear();
           commands.clear();
           macros.clear();
           if (vars != null) {
               variables.addAll(Arrays.asList(vars));
           }
           if (funs != null) {
               commands.addAll(Arrays.asList(funs));
           }
           if (macs != null) {
               macros.addAll(Arrays.asList(macs));
           }
        }
    }

    public void setRange(int p0, int p1) {
        start = p0;
        end = p1;
        transposable = false;
        yyreset(new ScilabDocumentReader(doc, p0, p1));
        int currentLine = elem.getElementIndex(start);
        if (currentLine != 0) {
           ScilabDocument.ScilabLeafElement e = (ScilabDocument.ScilabLeafElement) elem.getElement(currentLine - 1);
           if (e.isBlockComment()) {
              yybegin(BLOCKCOMMENT);
           }
        }
    }

    public int yychar() {
        return (int) yychar;
    }

    public int scan() throws IOException {
        int ret = yylex();
        int lastPos = start + yychar() + yylength();
        if (lastPos == end) {
           ((ScilabDocument.ScilabLeafElement) elem.getElement(elem.getElementIndex(start))).setBlockComment(yystate() == BLOCKCOMMENT);
        }
        return ret;
    }

    public boolean isLineFinishedByBlockComment(int start, int end) {
        this.start = start;
        this.end = end;
        try {           
           yyreset(new ScilabDocumentReader(doc, start, end));
           int tok = 0;
           while (tok != ScilabLexerConstants.EOF) {
              tok = yylex();
           }
        } catch (Exception e) { }
        
        return yystate() == BLOCKCOMMENT;
    }

    public int getKeyword(int pos, boolean strict) {
        // Pre condition
        if (elem == null) {
            return ScilabLexerConstants.DEFAULT;
        }

        Element line = elem.getElement(elem.getElementIndex(pos));
        int end = line.getEndOffset();
        int tok = -1;
        start = line.getStartOffset();
        int startL = start;
        int s = -1;

        try {
           yyreset(new ScilabDocumentReader(doc, start, end));
           if (!strict) {
              pos++;
           }

           while (startL < pos && s != startL && tok != EOF) {
               s = startL;
               tok = yylex();
               startL = start + yychar() + yylength();
           }

           return tok;
        } catch (IOException e) {
           return ScilabLexerConstants.DEFAULT;
        }
     }

     public static ScilabTokens getScilabTokens(String str) {
         ScilabDocument doc = new ScilabDocument(false);
         try {
             doc.insertString(0, str, null);
         } catch (BadLocationException e) { }
         return getScilabTokens(doc);
     }

     public static ScilabTokens getScilabTokens(ScilabDocument doc) {
         ScilabLexer lexer = new ScilabLexer(doc);
         lexer.yyreset(new ScilabDocumentReader(doc, 0, doc.getLength()));
         ScilabTokens tokens = new ScilabTokens();
         int tok = -1;
         try {
            while (tok != ScilabLexerConstants.EOF) {
               tok = lexer.yylex();
               tokens.add(tok, lexer.yychar() + lexer.yylength());
            }
         } catch (IOException e) { }
 
         return tokens;
     }

     public static class ScilabTokens {
        private List<Integer> tokenType = new ArrayList<Integer>();
        private List<Integer> tokenPos = new ArrayList<Integer>();

        ScilabTokens() { }

        void add(final int type, final int pos) {
           tokenType.add(type);
           tokenPos.add(pos);
        }

        public final List<Integer> getTokenType() {
           return tokenType;
        }

        public final List<Integer> getTokenPos() {
           return tokenPos;
        }
     }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScilabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return ScilabLexerConstants.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { transposable = false;
                                   return ScilabLexerConstants.DEFAULT;
            }
          // fall through
          case 43: break;
          case 2:
            { return ScilabLexerConstants.TAB;
            }
          // fall through
          case 44: break;
          case 3:
            { return ScilabLexerConstants.WHITE;
            }
          // fall through
          case 45: break;
          case 4:
            { transposable = true;
                                   String str = yytext();
                                   if (commands.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.COMMANDS;
                                   } else if (macros.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROS;
                                   } else if (infile.contains(str)) {
                                       yybegin(COMMANDS);
                                       return ScilabLexerConstants.MACROINFILE;
                                   } else {
                                       List<String>[] arr = doc.getInOutArgs(start + yychar());
                                       if (arr != null && (arr[0].contains(str) || arr[1].contains(str))) {
                                           return ScilabLexerConstants.INPUTOUTPUTARGS;
                                       } else if (variables.contains(str)) {
                                           return ScilabLexerConstants.VARIABLES;
                                       }
                                   }
                                   return ScilabLexerConstants.ID;
            }
          // fall through
          case 46: break;
          case 5:
            { transposable = false;
                                   beginString = zzStartRead;
                                   yybegin(QSTRING);
                                   return ScilabLexerConstants.STRING;
            }
          // fall through
          case 47: break;
          case 6:
            { transposable = false;
                                   return ScilabLexerConstants.SPECIAL;
            }
          // fall through
          case 48: break;
          case 7:
            { transposable = false;
                                   return ScilabLexerConstants.OPERATOR;
            }
          // fall through
          case 49: break;
          case 8:
            { if (transposable) {
                                       return ScilabLexerConstants.TRANSP;
                                    } else {
                                       beginString = zzStartRead;
                                       yybegin(QSTRING);
                                       return ScilabLexerConstants.STRING;
                                    }
            }
          // fall through
          case 50: break;
          case 9:
            { transposable = false;
                                   return ScilabLexerConstants.OPENCLOSE;
            }
          // fall through
          case 51: break;
          case 10:
            { transposable = true;
                                   return ScilabLexerConstants.OPENCLOSE;
            }
          // fall through
          case 52: break;
          case 11:
            { transposable = false;
                                   yybegin(FIELD);
                                   return ScilabLexerConstants.OPERATOR;
            }
          // fall through
          case 53: break;
          case 12:
            { transposable = true;
                                   return ScilabLexerConstants.NUMBER;
            }
          // fall through
          case 54: break;
          case 13:
            { return ScilabLexerConstants.STRING;
            }
          // fall through
          case 55: break;
          case 14:
            { return ScilabLexerConstants.TAB_STRING;
            }
          // fall through
          case 56: break;
          case 15:
            { return ScilabLexerConstants.DEFAULT;
            }
          // fall through
          case 57: break;
          case 16:
            { return ScilabLexerConstants.WHITE_STRING;
            }
          // fall through
          case 58: break;
          case 17:
            { transposable = false;
                                   yybegin(YYINITIAL);
                                   return ScilabLexerConstants.STRING;
            }
          // fall through
          case 59: break;
          case 18:
            { return ScilabLexerConstants.COMMENT;
            }
          // fall through
          case 60: break;
          case 19:
            { return ScilabLexerConstants.TAB_COMMENT;
            }
          // fall through
          case 61: break;
          case 20:
            { return ScilabLexerConstants.WHITE_COMMENT;
            }
          // fall through
          case 62: break;
          case 21:
            { yypushback(1);
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 63: break;
          case 22:
            { 
            }
          // fall through
          case 64: break;
          case 23:
            { transposable = true;
                                   return ScilabLexerConstants.FIELD;
            }
          // fall through
          case 65: break;
          case 24:
            { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.TAB;
            }
          // fall through
          case 66: break;
          case 25:
            { yybegin(COMMANDSWHITE);
                                   return ScilabLexerConstants.WHITE;
            }
          // fall through
          case 67: break;
          case 26:
            { yypushback(yylength());
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 68: break;
          case 27:
            { return ScilabLexerConstants.ERROR;
            }
          // fall through
          case 69: break;
          case 28:
            { transposable = true;
                                   return ScilabLexerConstants.CONSTANTES;
            }
          // fall through
          case 70: break;
          case 29:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(BLOCKCOMMENT);
            }
          // fall through
          case 71: break;
          case 30:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(COMMENT);
            }
          // fall through
          case 72: break;
          case 31:
            { transposable = false;
                                   return ScilabLexerConstants.SKEYWORD;
            }
          // fall through
          case 73: break;
          case 32:
            { transposable = false;
                                   return ScilabLexerConstants.OSKEYWORD;
            }
          // fall through
          case 74: break;
          case 33:
            { return ScilabLexerConstants.LATEX;
            }
          // fall through
          case 75: break;
          case 34:
            { yybegin(YYINITIAL);
                                   return ScilabLexerConstants.COMMENT;
            }
          // fall through
          case 76: break;
          case 35:
            { transposable = false;
                                   if (matchBlock != null) {
                                      MatchingBlockScanner.MatchingPositions pos = matchBlock.getMatchingBlock(start + yychar() + yylength(), false);
                                      if (pos != null) {
                                         try {
                                             String match = doc.getText(pos.secondB, pos.secondE - pos.secondB);
                                             if (match.equals("function")) {
                                                return ScilabLexerConstants.FKEYWORD;
                                             }
                                         } catch (BadLocationException e) { }
                                      }
                                   }
                                   return ScilabLexerConstants.OSKEYWORD;
            }
          // fall through
          case 77: break;
          case 36:
            { return ScilabLexerConstants.AUTHORS;
            }
          // fall through
          case 78: break;
          case 37:
            { transposable = false;
                                   return ScilabLexerConstants.ELSEIF;
            }
          // fall through
          case 79: break;
          case 38:
            { transposable = false;
                                   return ScilabLexerConstants.CKEYWORD;
            }
          // fall through
          case 80: break;
          case 39:
            { return ScilabLexerConstants.TODO;
            }
          // fall through
          case 81: break;
          case 40:
            { return ScilabLexerConstants.URL;
            }
          // fall through
          case 82: break;
          case 41:
            { transposable = false;
                                   return ScilabLexerConstants.FKEYWORD;
            }
          // fall through
          case 83: break;
          case 42:
            { return ScilabLexerConstants.MAIL;
            }
          // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
