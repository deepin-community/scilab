// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: jflex/indentation.jflex

//CHECKSTYLE:OFF 

package org.scilab.modules.scinotes;

import java.io.IOException;
import javax.swing.text.Element;
import javax.swing.text.BadLocationException;

@javax.annotation.Generated("JFlex")

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public final class IndentScanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int INDENT = 2;
  public static final int WHITE = 4;
  public static final int TAB = 6;
  public static final int BEG = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\3\6\1\0\1\10\1\0\1\11\5\0\1\12"+
    "\12\6\5\0\1\6\1\0\32\6\2\0\1\11\1\0"+
    "\1\6\1\0\1\13\1\6\1\14\1\15\1\16\1\17"+
    "\1\6\1\20\1\21\2\6\1\22\1\6\1\23\1\24"+
    "\2\6\1\25\1\26\1\27\1\30\1\6\1\31\1\6"+
    "\1\32\1\6\2\0\1\11\7\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\2\0\1\2\1\3\14\2\2\1\1\4"+
    "\11\0\1\2\6\0\1\4\22\0\1\5\1\0\1\2"+
    "\7\0\1\2\5\0\1\6\1\0\1\6\1\2\6\0"+
    "\1\2\4\0\2\2\7\0\1\2\4\0\1\2\4\0"+
    "\3\2\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\0\0\0"+
    "\0\242\0\275\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f"+
    "\0\u017a\0\u0195\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237"+
    "\0\u0252\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\275"+
    "\0\u030f\0\u032a\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc"+
    "\0\u03e7\0\u0402\0\u041d\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4"+
    "\0\u04bf\0\u04da\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c"+
    "\0\u0597\0\u05b2\0\u05cd\0\u05e8\0\u03cc\0\u0603\0\u061e\0\u0639"+
    "\0\u0654\0\u066f\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711"+
    "\0\u072c\0\u0747\0\u03cc\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce"+
    "\0\u07e9\0\u0804\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6"+
    "\0\u08c1\0\u08dc\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e"+
    "\0\u0999\0\u09b4\0\u09cf\0\u09ea\0\u0a05\0\u0a20\0\u0a3b\0\u0a56"+
    "\0\u0a71\0\u0a8c\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13\0\u03cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\33\0\2\7\1\10\2\0\1\7\1\11\2\12\1\13"+
    "\1\14\1\11\1\15\1\11\1\16\1\17\1\11\1\20"+
    "\2\11\1\21\1\11\1\22\1\23\1\11\1\24\1\11"+
    "\3\10\2\0\1\25\26\10\1\26\1\10\2\0\26\10"+
    "\3\7\2\0\27\7\1\27\1\7\2\0\1\27\25\7"+
    "\10\0\1\7\3\0\1\30\1\0\1\31\1\32\1\0"+
    "\1\33\2\0\1\34\1\0\1\35\1\36\1\0\1\37"+
    "\1\0\2\40\1\0\1\40\1\0\2\40\2\41\22\40"+
    "\10\0\1\7\34\0\1\42\30\0\1\7\2\0\1\43"+
    "\1\30\1\0\1\31\1\32\1\0\1\33\2\0\1\34"+
    "\1\0\1\35\1\36\1\0\1\37\11\0\1\7\3\0"+
    "\1\30\1\0\1\31\1\32\1\0\1\33\1\44\1\45"+
    "\1\34\1\0\1\35\1\36\1\0\1\37\11\0\1\7"+
    "\3\0\1\30\1\0\1\31\1\32\1\0\1\33\2\0"+
    "\1\46\1\0\1\35\1\36\1\47\1\37\11\0\1\7"+
    "\3\0\1\30\1\0\1\31\1\50\1\0\1\33\2\0"+
    "\1\34\1\0\1\35\1\36\1\0\1\37\11\0\1\7"+
    "\3\0\1\30\1\0\1\31\1\32\1\0\1\33\2\0"+
    "\1\34\1\0\1\35\1\51\1\0\1\37\11\0\1\7"+
    "\3\0\1\30\1\0\1\52\1\32\1\0\1\33\2\0"+
    "\1\34\1\0\1\35\1\36\1\0\1\53\11\0\1\7"+
    "\3\0\1\30\1\0\1\31\1\32\1\0\1\33\2\0"+
    "\1\34\1\54\1\35\1\36\1\0\1\37\11\0\1\7"+
    "\3\0\1\30\1\0\1\31\1\32\1\55\1\33\2\0"+
    "\1\34\1\0\1\35\1\36\1\0\1\37\6\0\1\25"+
    "\26\0\1\26\32\0\1\27\3\0\1\27\40\0\1\56"+
    "\41\0\1\57\1\60\33\0\1\61\3\0\1\62\21\0"+
    "\1\7\42\0\1\63\21\0\1\64\12\0\1\65\26\0"+
    "\1\66\25\0\1\67\21\0\2\40\22\0\2\42\1\7"+
    "\2\0\26\42\26\0\1\70\1\71\31\0\1\72\21\0"+
    "\1\73\42\0\1\50\1\0\1\63\26\0\1\74\15\0"+
    "\1\75\4\0\20\75\20\0\1\76\4\0\1\66\27\0"+
    "\1\77\1\60\27\0\1\67\1\100\43\0\1\50\21\0"+
    "\1\101\37\0\1\102\1\103\31\0\1\104\21\0\1\105"+
    "\42\0\1\7\30\0\1\106\27\0\1\107\34\0\1\110"+
    "\31\0\1\111\43\0\1\7\21\0\1\112\27\0\1\113"+
    "\30\0\1\114\34\0\1\115\22\0\1\75\4\0\4\75"+
    "\1\116\13\75\14\0\1\117\34\0\1\120\32\0\1\121"+
    "\7\0\1\104\33\0\1\122\25\0\1\123\26\0\1\7"+
    "\30\0\1\124\34\0\1\125\33\0\1\126\27\0\1\127"+
    "\34\0\1\130\32\0\1\131\43\0\1\103\25\0\1\102"+
    "\30\0\1\113\20\0\1\75\4\0\6\75\1\132\11\75"+
    "\6\0\1\75\4\0\15\75\1\133\2\75\27\0\1\134"+
    "\30\0\1\135\21\0\1\136\32\0\1\137\34\0\1\50"+
    "\34\0\1\7\33\0\1\33\41\0\1\62\31\0\1\140"+
    "\30\0\1\141\21\0\1\142\24\0\1\75\4\0\4\75"+
    "\1\113\13\75\6\0\1\75\4\0\10\75\1\143\7\75"+
    "\21\0\1\144\42\0\1\145\30\0\1\50\23\0\1\50"+
    "\33\0\1\146\42\0\1\147\30\0\1\7\11\0\1\75"+
    "\4\0\1\75\1\150\16\75\24\0\1\151\27\0\1\152"+
    "\35\0\1\153\27\0\1\154\17\0\1\75\4\0\14\75"+
    "\1\155\3\75\23\0\1\50\35\0\1\70\27\0\1\7"+
    "\35\0\1\102\12\0\1\75\4\0\6\75\1\156\11\75"+
    "\6\0\1\75\4\0\11\75\1\157\6\75\6\0\1\75"+
    "\4\0\10\75\1\160\7\75";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2862];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\10\1\0\2\1\2\0\2\11\17\1\11\0\1\1"+
    "\6\0\1\1\22\0\1\1\1\0\1\1\7\0\1\1"+
    "\5\0\1\1\1\0\2\1\6\0\1\1\4\0\2\1"+
    "\7\0\1\1\4\0\1\1\4\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[112];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private ScilabDocument doc;
    private Element elem;

    public IndentScanner(ScilabDocument doc) {
    	this.doc = doc;
	this.elem = doc.getDefaultRootElement();
    }
   
    public int getIndentNumber(int lineNumber, char type) {
        if (lineNumber < 0) {
	    return 0;
	}
        try {
	     Element line = elem.getElement(lineNumber);
	     int startL = line.getStartOffset();
	     int endL = line.getEndOffset();	
	     yyreset(new ScilabDocumentReader(doc, startL, endL));
	     switch (type) {
	     	 case ' ':
	      	 yybegin(WHITE);
	      	 break;
	    	 case '\t':
	     	 yybegin(TAB);
	      	 break;
	     default:
		 yybegin(WHITE);
	     }
	     return yylex();
	} catch (IOException e) {
	     return 0;
	}
    }	

    public int getTabsAtBeginning(int pos) {
    	Element line = elem.getElement(pos);
	int startL = line.getStartOffset();
	int endL = line.getEndOffset();
	try {
	    yyreset(new ScilabDocumentReader(doc, startL, endL));
	    yybegin(BEG);
	    if (yylex() == 1) {
	        return yylength();
       	    }
	} catch (IOException e) {  
	    return 0;	
    	}
	return 0;
    }	    

    public void getIndentLevel(int pos, int[] level) {
    	Element line = elem.getElement(elem.getElementIndex(pos));
	int startL = line.getStartOffset();
	int endL = line.getEndOffset();
	level[0] = 0;
	level[1] = 0;
	try {
	    yyreset(new ScilabDocumentReader(doc, startL, endL));
	    yybegin(INDENT);
	    do {
	        switch (yylex()) {
	       	case 0:
	              break;
	       	case 1:
	             level[1]++;
		     break;
	       	case 2:
	             if (level[1] > 0) {
		         level[1]--;
		     } else {
	        	 level[0]++;
		     }
	             break;
	       	case 3:
	             if (level[1] == 0) {
		         level[0]++;
		         level[1]++;
		     }
                }	         
	    } while (zzMarkedPos != 0);
        } catch (IOException e) { } 	  
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IndentScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return 0;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return yylength();
            }
            // fall through
          case 7: break;
          case 2:
            { 
            }
            // fall through
          case 8: break;
          case 3:
            { return 0;
            }
            // fall through
          case 9: break;
          case 4:
            { return 1;
            }
            // fall through
          case 10: break;
          case 5:
            { return 2;
            }
            // fall through
          case 11: break;
          case 6:
            { return 3;
            }
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
