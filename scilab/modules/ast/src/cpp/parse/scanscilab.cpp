
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 145
#define YY_END_OF_BUFFER 146
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[959] =
    {   0,
    16408,  124,  124,  133,  133,  115,  115,  111,  111,  146,
       85,  145,   81,   85,  145,   82,  145,   82,   85,  145,
       75,   85,  145,   79,   85,  145,   27,   85,  145,   75,
       85,  145,   30,   85,  145,   80,   85,  145,   34,   85,
      145,   35,   85,  145,   48,   85,  145,   47,   85,  145,
       37,   85,  145,   46,   85,  145,   67,   85,  145,   49,
       85,  145,   69,   85,  145,   38,   85,  145,   36,   85,
      145,   60,   85,  145,   64,   85,  145,   61,   85,  145,
       26,   85,  145,   65,   85,  145,   50,   85,  145,   66,
       85,  145,   51,   85,  145,   75,   85,  145,   75,   85,

      145,   75,   85,  145,   75,   85,  145,   75,   85,  145,
       75,   85,  145,   75,   85,  145,   75,   85,  145,   75,
       85,  145,   75,   85,  145,   75,   85,  145,   39,   85,
      145,   32,   85,  145,   40,   85,  145,   26,   85,  145,
       85,  145,   85,  145,   85,  145,   85,  145,   85,  145,
       85,  145,   85,  145,   85,  145,   85,  145,   81,   85,
      145,16408,   75,   85,  145,   27,   85,  145,   75,   85,
      145,   75,   85,  145,   75,   85,  145,   75,   85,  145,
       75,   85,  145,   75,   85,  145,   75,   85,  145,   75,
       85,  145,   75,   85,  145,   75,   85,  145,   75,   85,

      145,   75,   85,  145,   85,  145,   85,  145,   85,  145,
       85,  145,   85,  145,   85,  145,   85,  145,   85,  145,
       85,  145,  124,  125,  145,  123,  145,  123,  125,  145,
      122,  125,  145,  121,  125,  145,  125,  145,  133,  134,
      145,  132,  145,  132,  134,  145,  130,  134,  145,  131,
      134,  145,  134,  145,  115,  116,  145,  114,  145,  114,
      116,  145,  116,  145,  116,  145,  111,  145,  110,  145,
      110,  145,  109,  145,  108,  109,  145,  105,  145,  105,
      109,  145,  109,  145,  100,  145,   81,  100,  145,   90,
      145,   90,  100,  145,   75,  100,  145,   79,  100,  145,

       27,  100,  145,   75,  100,  145,   30,  100,  145,   80,
      100,  145,   86,  100,  145,   87,  100,  145,   48,  100,
      145,   94,  100,  145,   37,  100,  145,   96,  100,  145,
       67,  100,  145,   49,  100,  145,   69,  100,  145,   38,
       89,  100,  145,   36,  100,  145,   60,  100,  145,   64,
      100,  145,   61,  100,  145,   26,  100,  145,   65,  100,
      145,   50,  100,  145,   92,  100,  145,   51,  100,  145,
       39,  100,  145,   32,  100,  145,   93,  100,  145,   26,
      100,  145,  100,  145,  100,  145,  100,  145,  100,  145,
      100,  145,  100,  145,  100,  145,  100,  145,  144,  145,

      135,  145,  138,  145,  138,  145,   79,  145,   80,  145,
      140,  144,  145,  137,  145,  144,  145,  136,  145,  141,
      144,  145,  139,  144,  145,  142,  144,  145,  143,  144,
      145,  145,   25,  145,  145,   25,  145,  145,   25,  145,
       25,  145,   25,  145,   25,  145,   25,  145,   25,  145,
       25,  145,   25,  145,   25,  145,   25,  145,   25,  145,
      145,  145,  145,  145,  145,  145,  145,  145,   81,   83,
       83,   82,   75,   75,    3,   29,   75,    2,   28,   75,
       31,   51,   41,   42,   68,   43,   74,   44,   45,   77,
       78,   76,   73,   69,   76,   76,   62,   59,   58,   63,

       75,   75,   75,   17,   75,   75,   75,   75,   75,    4,
       75,   75,   75,   75,   75,   75,   75,   75,   33,   75,
       81,16408,   75,   75,    3,   29,   75,    2,   28,   75,
       75,   75,   75,   17,   75,   75,   75,   75,   75,    4,
       75,   75,   75,   75,   75,   75,   75,   75,   75,  124,
      123,  117,  118,  119,  120,  133,  132,  126,  127,  128,
      129,  115,  114,  112,  113,  111,  110,  108,  105,  106,
      107,   81,   91,   88,   98,   99,   89,   90,   29,   75,
       28,   75,  103,   89,  144,  135,  138,   77,  144,   78,
      144,   25,   25,    3,   25,    2,   25,   25,   25,   25,

       17,   25,   25,   25,   25,   25,    4,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   84,   84,   55,   52,
       53,   54,   56,   76,   76,   72,   73,   70,   76,   71,
       76,   57,   75,   75,   75,   75,   75,    8,   75,   15,
       75,   75,   75,   75,   75,   75,   75,   75,   20,   75,
       75,    1,   75, 8216, 8216,   75,   75,   75,   75,   75,
        8,   75,   15,   75,   75,   75,   75,   75,   75,   75,
       75,   20,   75,   75,    1,   75,   95,   97,  104,  101,
      102,   25,   25,   25,   25,   25,    8,   25,   15,   25,
       25,   25,   25,   25,   25,   25,   25,   20,   25,   25,

       70,   71,   76,   76,   75,   12,   75,   75,   75,    6,
       75,   75,   75,   75,   75,   75,   75,   75,    5,   75,
       75,    1,    1,   75,    1,    1,    1,    1,    1,    1,
        1,    1,   75, 8216,   75,   12,   75,   75,   75,    6,
       75,   75,   75,   75,   75,   75,   75,   75,    5,   75,
       75,    1,    1,   75,    1,    1,    1,    1,    1,    1,
        1,    1,   75,   25,   12,   25,   25,   25,    6,   25,
       25,   25,   25,   25,   25,   25,   25,    5,   25,   25,
       25,   75,   75,   76,   76,   18,   75,   21,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   16,   75,

        1,    1,    1,    1,    1,    1,    1,   75,   75,   18,
       75,   21,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   16,   75,    1, 8216,    1, 8216,    1,    1,
        1,    1,    1,    1,    1,   25,   25,   18,   25,   21,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       16,   25,   76,   76,   75,    7,   75,   75,   75,   75,
       23,   75,   22,   75,    9,   75,   10,   75,    1,    1,
        1,   75,    7,   75,   75,   75,   75,   23,   75,   22,
       75,    9,   75,   10,   75,    1, 8216,    1,    1,    1,
       25,    7,   25,   25,   25,   25,   23,   25,   22,   25,

        9,   25,   10,   25,   76,   75,   75,   75,   75,    1,
       75,   75,   75,   75,   75,    1,   75,   25,   25,   25,
       25,   76,   19,   75,   75,   13,   75,   75,   19,   75,
       75,   13,   75,   75,   19,   25,   25,   13,   25,   25,
       75,   11,   75,   75,   11,   75,   25,   11,   25,   75,
       75,   25,   14,   75,   14,   75,   14,   25
    } ;

static const flex_int16_t yy_accept[917] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  143,  145,  147,  149,  151,  153,
      155,  157,  159,  163,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  205,  207,  209,
      211,  213,  215,  217,  219,  221,  223,  226,  228,  231,

      234,  237,  239,  242,  244,  247,  250,  253,  255,  258,
      260,  263,  265,  267,  269,  271,  273,  275,  278,  280,
      283,  285,  287,  290,  292,  295,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      340,  344,  347,  350,  353,  356,  359,  362,  365,  368,
      371,  374,  377,  380,  383,  385,  387,  389,  391,  393,
      395,  397,  399,  401,  403,  405,  407,  409,  411,  414,
      416,  418,  420,  423,  426,  429,  432,  433,  435,  436,
      438,  439,  441,  443,  445,  447,  449,  451,  453,  455,
      457,  459,  461,  462,  463,  464,  465,  466,  467,  468,

      469,  470,  471,  472,  472,  472,  473,  474,  474,  474,
      474,  474,  474,  474,  474,  474,  475,  475,  475,  475,
      475,  475,  475,  475,  475,  478,  481,  482,  483,  483,
      484,  485,  486,  487,  488,  489,  490,  491,  491,  492,
      493,  493,  494,  495,  496,  497,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  498,  499,  499,  500,  500,
      501,  501,  501,  502,  503,  504,  506,  507,  508,  509,
      510,  512,  513,  514,  515,  516,  517,  518,  519,  520,
      520,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  524,  524,  524,  524,  524,  524,  524,  524,
      524,  525,  525,  525,  525,  525,  525,  525,  525,  525,
      528,  531,  532,  533,  534,  536,  537,  538,  539,  540,
      542,  543,  544,  545,  546,  547,  548,  549,  550,  550,
      550,  550,  550,  550,  550,  550,  550,  551,  552,  553,
      554,  555,  556,  557,  558,  559,  560,  561,  562,  563,
      564,  565,  566,  567,  568,  569,  570,  571,  572,  573,
      574,  575,  576,  577,  577,  578,  579,  581,  583,  583,
      583,  584,  585,  586,  587,  588,  590,  592,  593,  593,
      593,  593,  593,  593,  593,  593,  593,  594,  594,  594,

      594,  594,  594,  594,  594,  594,  596,  598,  599,  600,
      601,  603,  604,  605,  606,  607,  609,  610,  611,  612,
      613,  614,  615,  616,  617,  617,  617,  617,  617,  617,
      617,  617,  618,  619,  619,  619,  619,  619,  619,  619,
      619,  619,  619,  619,  619,  619,  619,  619,  620,  621,
      622,  622,  622,  623,  624,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  627,  628,  628,  630,  630,  632,  632,
      632,  632,  632,  632,  632,  632,  633,  634,  635,  636,
      637,  638,  640,  642,  643,  644,  645,  646,  647,  648,

      649,  651,  652,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  654,  654,  654,  654,  654,  654,  654,  654,
      654,  654,  655,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  657,  658,
      659,  660,  661,  663,  665,  666,  667,  668,  669,  670,
      671,  672,  674,  675,  677,  677,  677,  677,  678,  679,
      680,  681,  682,  682,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  682,  682,  682,  683,  684,  685,
      686,  687,  689,  691,  692,  693,  694,  695,  696,  697,

      698,  700,  701,  701,  701,  701,  701,  701,  701,  701,
      701,  701,  702,  703,  703,  703,  703,  703,  703,  703,
      703,  703,  703,  703,  703,  703,  703,  703,  704,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  706,  708,  709,  710,  712,  713,  714,  715,  716,
      717,  718,  719,  721,  722,  723,  725,  726,  727,  728,
      729,  730,  731,  732,  733,  734,  734,  734,  734,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  734,  735,  735,  735,  735,  735,  735,  735,
      736,  738,  739,  740,  742,  743,  744,  745,  746,  747,

      748,  749,  751,  752,  753,  755,  756,  757,  758,  759,
      760,  761,  762,  763,  764,  764,  764,  764,  764,  764,
      764,  765,  767,  768,  769,  771,  772,  773,  774,  775,
      776,  777,  778,  780,  781,  782,  783,  784,  784,  784,
      784,  784,  784,  784,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      786,  788,  790,  791,  792,  793,  794,  795,  796,  797,
      798,  799,  801,  802,  803,  804,  805,  806,  807,  808,
      808,  808,  808,  808,  808,  808,  808,  809,  810,  812,
      814,  815,  816,  817,  818,  819,  820,  821,  822,  823,

      825,  827,  829,  830,  831,  832,  833,  834,  835,  836,
      837,  838,  840,  842,  843,  844,  845,  846,  847,  848,
      849,  850,  851,  853,  854,  855,  855,  855,  855,  855,
      855,  855,  855,  855,  855,  855,  856,  858,  859,  860,
      861,  863,  865,  867,  869,  870,  871,  872,  872,  872,
      873,  875,  876,  877,  878,  880,  882,  884,  886,  888,
      889,  890,  891,  892,  894,  895,  896,  897,  899,  901,
      903,  905,  905,  905,  905,  906,  907,  908,  909,  910,
      912,  913,  914,  915,  916,  918,  919,  920,  921,  922,
      923,  925,  926,  928,  929,  931,  932,  934,  935,  937,

      938,  940,  941,  942,  944,  945,  947,  948,  950,  951,
      952,  953,  955,  957,  959,  959
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,    5,   40,   41,    5,   42,   43,   44,   45,
       46,    5,    5,   47,   48,   49,   50,    5,   51,    5,
       52,    5,   53,   54,   55,   56,    1,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   60,   59,   59,   59,
       61,    1,    1,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   63,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   65,   66,   67,   68,
       69,   69,   69,   70,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    1,    6,
        8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
       10,    8,    8,    8,    1,    5,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5
    } ;

static const flex_int16_t yy_base[948] =
    {   0,
        0,   70,  138,  143,  148,  153,  158,  164,  169,  171,
      176,  181,  199,    0,  268,  323,  379,    0, 1223, 4715,
      184,  273,  282,  242, 4715,  251,  422, 1209, 4715, 4715,
     4715,  176, 4715, 4715, 4715,  318,  178,  488, 4715, 4715,
      275,  141,  143,  167, 4715, 1188, 4715, 4715,  311,  325,
      327,  424,  426,  429,  431,  470,  531,  534,  472, 4715,
     1146, 4715,  278,  484,  302,  507,  140,  518,  527,  309,
      532, 1125,  592,  544,  553,  661,  596,  598,  600,  636,
      602,  638,  643,  645,  667,  673,  704,  543,  422,  677,
      224,  688,  697,  681,  702, 1119,    0, 4715, 1171,  290,

      456, 4715,    0, 4715, 1165,  496,  628, 4715,    0, 4715,
     1163, 1146, 1149,    0, 4715, 1095, 4715, 1094, 4715, 1059,
      339, 4715,  762,  676,  696,  741, 4715,  729,  772,  977,
     4715, 4715, 4715,  623,  963, 4715,  916,  795,  690,    0,
      927, 4715,  691,  300,  320,  454, 4715,  910, 4715, 4715,
     4715,  865, 4715,  495,  726,  488,  758,  320,  772,  764,
      777,  860,    0,  909, 4715,  902, 4715, 4715,    0, 4715,
      461, 4715,    0,    0,    0,    0, 4715,  777,  786,  829,
      691,  832,  836,  834,  861,  838,  873,  879,  885,  887,
      892,  914,  887,  609,  898,  446,  907,  891,  912,  846,

      748, 4715,  883,  972,  975,  979,  956,  949,  743,  954,
      514,  959,  943,  964,  819,    0,  969,  901,  974,  540,
      979,  983,  988,  815, 1022, 1024, 4715, 4715,    0, 4715,
      663,  852,  803, 1038,  790, 4715, 4715,    0, 4715, 1015,
     1024, 1041,    0, 1081,  921, 1009,  938, 1044,  710, 1049,
     1053, 1058,  732,  786, 4715, 4715,  804, 4715,  907, 4715,
     1097,    0, 1093, 1124, 1126, 1128, 1130, 1152, 1155, 1158,
     1167, 1170, 1183, 1185, 1197, 1201, 1213, 1215, 4715, 1137,
     1219, 1066, 1076, 1212, 1217, 1222, 1227, 1232, 1237, 1297,
     1243, 1252, 1266, 1069, 1271,  717, 1276, 1280, 1285,  724,

     1136, 1319, 1292, 1200, 1312,  925, 1317, 1296, 1322,  720,
     1382, 1328, 1331, 1336,  931, 1341, 1345, 1350,  714, 1384,
     1386, 1388, 1390, 1414, 1392, 1426, 1429, 1432, 1441, 1444,
     1448, 1456, 1463, 1470, 1479, 1485, 1492, 1487, 1485, 1490,
     1495, 1500, 1505, 1510, 1515, 1520,    0, 4715, 4715, 4715,
     4715, 4715,    0, 4715, 4715, 4715, 4715, 4715,    0, 4715,
     4715, 4715,    0, 4715,  719, 4715, 4715, 4715, 1580, 4715,
     4715,  857, 1168,  702,  686, 1206, 1559, 1564,  669,  636,
      633,  640,    0,  631, 4715,    0,    0, 1573, 1557, 1479,
     1566,  934, 1571, 1546, 1576,  548, 1576, 1590, 1550, 1595,

      998, 1600, 1604, 1609,  504, 1643, 1645, 1647, 1649, 1661,
     1652, 1674, 1679, 1686, 1691, 1698, 1703, 1710, 1717, 1722,
     1726, 1739, 1741, 1744, 1737, 1742, 1747, 1752, 1757, 1762,
     1767, 4715,  517, 1772, 1777, 1782, 1787, 1792, 1797, 1802,
     1807, 1812, 1817, 1822, 1827, 1832, 1837, 4715, 4715, 4715,
     1174, 1201, 4715, 4715, 1448, 1842, 1560, 1847, 1083, 1852,
     1726, 1857,  456, 1857, 1871, 1874, 1879, 1209, 1884, 1888,
     1893,  453, 4715,  313,  475, 1948,  445, 2012, 1900, 1905,
     1911, 1916, 1921, 1926, 1931, 4715, 1993, 1995, 2000, 2009,
     2012, 2017, 2024, 2055, 2057, 2059, 2061, 2064, 2086, 2088,

     2090, 2093, 2142, 1936, 1941, 1946, 2211, 2010, 2155, 2160,
     1245, 2165, 2169, 2174,  318, 2234, 2180, 2183, 2188, 1443,
     2193, 2197, 2202,  315, 2207, 2225, 2230, 2248, 2253, 2258,
     2263, 4715, 2323, 2269, 2282, 2291, 2296, 2301, 2306, 2311,
     2316, 2321, 2326, 2331, 2336, 2341, 2346, 2380, 2382, 2387,
     2389, 2396, 2404, 2411, 2413, 2418, 2426, 2430, 2435, 2442,
     2449, 2454, 2457, 2506, 2520, 2525, 2530,  363,  340,  278,
      270,  259, 2535, 2540, 2545, 2550, 2555, 2560, 2565, 2570,
     2575, 2580, 2585, 2590, 2595, 2600, 2634, 2636, 2641, 2643,
     2650, 2658, 2665, 2667, 2672, 2680, 2684, 2689, 2696, 2703,

     2708, 2711, 2704, 2709, 2714, 2719, 2724, 2729, 2734, 2739,
     2744, 2789, 2792, 2763, 2774, 2779, 2784, 2789, 2794, 2799,
     2804, 2809, 2814, 2819, 2824, 2829, 2834, 1511, 2834, 2848,
     2210, 2853, 1465, 2858, 2234, 2863,  216, 2868, 2873, 2878,
     2912, 2914, 2916, 2918, 2921, 2940, 2943, 2946, 2952, 2955,
     2969, 2971, 2983, 2985,    0,    0, 2968, 2272, 2978, 1528,
     2983, 2987, 2992,  135, 3026, 2999, 3009, 3019, 3024, 3029,
     3034, 3039, 3044, 3049, 3054, 3059, 3064, 3069, 3074, 3079,
     3084, 3089, 3149, 3095, 3108, 3117, 3122, 3127, 3132, 3166,
     3168, 3170, 3172, 3175, 3194, 3197, 3200, 3206, 3209, 3223,

     3225, 3237, 3239, 3268,    0, 3237, 2276, 3242, 1647, 3247,
     3003, 3252,  124, 3286, 3259, 3269, 3279, 3284, 3289, 3294,
     3328, 3330, 3332, 3334, 3337, 3356, 3359, 3362, 3368, 3371,
     3385, 3387, 3399, 3401, 3403, 3415, 3393, 3408, 3413, 3418,
     3423, 3428, 3433, 3433, 3447, 2753, 3452, 1654, 3457, 3013,
     3462,   93, 3467, 3472, 3477, 3482, 3487, 3492, 3497, 1760,
     3531, 3533, 3536, 3538, 3545, 3550, 3564, 3567, 3569, 3572,
     3591, 3594, 3567, 3577, 3587, 3592, 3597, 3602, 3607, 3612,
     3617, 3622, 3627, 3632, 3637,    0, 3671, 3639, 3683, 3685,
     3688, 3690, 3697, 3702, 3716, 3719, 3721, 3724, 3743, 3746,

        0, 3774, 3729, 3741, 3746, 3751, 3756, 3761, 3766, 3800,
        0, 3802, 3804, 3807, 3809, 3816, 3831, 3834, 3838, 3850,
     3853, 3865, 3862, 2041,    0, 3849, 3858, 3863, 3868, 3873,
     3878, 3883, 3888, 3893, 3898, 3932, 3934, 3936, 3938, 3950,
     3941, 3964, 3966, 3968, 3951, 3961, 3966,    0,    0, 4000,
     4002, 4004, 4006, 4018, 4009, 4032, 4034, 4036, 4066, 4019,
     4033, 4038, 4072, 4074, 4076, 4078, 4090, 4081, 4104, 4106,
     4108, 4091, 4101, 4106, 2112, 4140, 4142, 4145, 4147,    0,
     4154, 4159, 4171, 4173,    0, 4176, 4178, 4190, 4195,    0,
     4202, 4208, 4217, 4224, 4226, 4230, 4239, 4248, 4252, 4254,

     4261, 4270, 4276, 4278, 4284, 4292, 4300, 4306, 4308, 4315,
     4322, 4330, 4334, 4337, 4715, 4386, 4398, 4410, 4422, 4434,
     4446, 4454, 4462, 4473, 4479, 4487, 4499, 4511, 4523, 4535,
     4547, 4555, 4563, 4575, 4586, 4593, 4601, 4613, 4623, 4631,
     4643, 4651, 4659, 4671, 4683, 4691, 4702
    } ;

static const flex_int16_t yy_def[948] =
    {   0,
      915,  915,  916,  916,  917,  917,  918,  918,  919,  919,
      920,  920,  915,   13,  921,  921,  915,   17,  915,  915,
      915,  915,  915,  922,  915,  923,  922,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  924,  925,  926,  925,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  927,  915,  915,  915,

      915,  915,  928,  915,  915,  915,  915,  915,  929,  915,
      915,  915,  915,  930,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,   27,  915,  923,   27,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,   38,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  931,  915,  915,  915,  915,  915,  931,  915,
      931,  915,  931,  931,  931,  931,  915,  932,  933,  932,
      915,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  915,   27,  915,  915,  915,
      915,  915,  915,  915,  915,  128,  915,  915,  915,  915,
      915,  915,  915,  915,   27,   27,  915,  915,  934,  915,
      915,  915,  915,  915,  915,  915,  915,  935,  915,  936,
      937,   38,   38,  936,  244,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  938,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,  915,  915,
       27,  915,  915,  915,  915,  915,  915,  915,  915,  924,
      939,  940,  915,  915,  915,  915,  915,  915,  915,  915,

      941,   76,  915,  915,  915,  915,  915,  915,  915,  915,
      926,  915,  915,  915,  915,  915,  915,  915,  915,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  915,  915,
      915,  915,  915,  915,  915,  915,  927,  915,  915,  915,
      915,  915,  928,  915,  915,  915,  915,  915,  929,  915,
      915,  915,  930,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,   27,   27,  915,  915,
      915,  915,  931,  915,  915,  931,  931,  180,  915,  915,
      915,  915,  915,  915,  915,  915,  933,  915,  915,  915,

      915,  915,  915,  915,  915,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  244,  915,  915,  915,  915,  915,
      915,  915,  915,  937,  915,  915,  915,  915,  915,  915,
      915,  915,  915,   38,  915,  942,  915,  942,  915,  915,
      915,  915,  915,  915,  915,  915,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,  915,  915,  915,  915,  939,  915,  915,  915,
      915,  915,  915,  915,  915,  940,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  941,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  915,  915,  915,  915,  915,  915,  915,  915,
      915,   38,   38,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  244,  943,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  944,  503,  944,  944,  944,  944,
      944,  944,  944,  944,   27,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  941,  915,  915,  915,  915,  915,  915,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

       76,   76,   76,  945,  564,  944,  944,  944,  944,  944,
      944,  944,  944,   76,  915,  915,  915,  915,  915,  915,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,   27,  946,  915,  915,  915,
      915,  915,  915,  943,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  244,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,  944,  944,  944,  944,  944,  944,  944,  915,
      915,  915,  915,  915,  915,  507,   76,  947,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,

      944,  945,  944,  944,  944,  944,  944,  944,  944,  180,
      397,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  244,  464,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  944,  944,  944,  507,  516,   76,
       76,   76,   76,   76,   76,   76,   76,   76,  945,  944,
      944,  944,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  915,  915,  915,  244,   27,   27,   27,   27,  503,
       76,   76,   76,   76,  564,  180,  180,  180,  180,  744,
       27,   27,   27,   27,   76,   76,   76,   76,  180,  180,

      180,  180,   27,   27,   76,   76,  180,  180,   27,   76,
      180,   27,   76,  180,    0,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915
    } ;

static const flex_int16_t yy_nxt[4786] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   24,   24,   24,   24,   45,
       46,   47,   48,   24,   49,   50,   51,   52,   53,   24,
       54,   24,   24,   24,   24,   55,   56,   57,   58,   24,
       59,   24,   60,   61,   62,   63,   20,   20,   20,   20,
       20,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       20,   73,   22,   23,   74,   25,   75,   76,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   74,   74,   74,   74,   45,

       46,   47,   48,   74,   77,   78,   79,   80,   81,   74,
       82,   74,   74,   74,   74,   83,   84,   85,   86,   74,
       87,   74,   60,   61,   62,   63,   20,   20,   20,   20,
       20,   88,   89,   90,   91,   92,   93,   94,   95,   96,
       98,   99,  257,  100,  259,   98,   99,  101,  100,  832,
      104,  105,  101,  106,  102,  104,  105,  107,  106,  102,
      110,  111,  107,  258,  108,  260,  110,  111,  261,  108,
      112,  115,  116,  115,  116,  113,  112,  118,  119,  120,
      809,  113,  118,  119,  120,  201,  202,  203,  228,  256,
      237,  779,  229,  121,  238,  239,  284,  284,  121,  122,

      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  126,  126,  126,  126,  147,  148,
      149,  150,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  151,  152,  153,  154,  122,  122,  122,  122,  122,
      155,  156,  157,  158,  159,  159,  160,  161,  162,  164,
      165,  166,  759,  167,  204,  572,  254,  168,  169,  280,
      341,  341,  170,  204,  206,  171,  571,  205,  172,  173,
      174,  175,  176,  205,  570,  349,  205,  255,  256,  350,

      256,  257,  205,  208,  209,  210,  211,  212,  212,  213,
      214,  215,  217,  218,  219,  220,  221,  221,  222,  223,
      224,  259,  258,  176,  164,  165,  166,  230,  167,  915,
      231,  474,  168,  169,  232,  233,  234,  170,  207,  207,
      171,  569,  260,  172,  173,  174,  175,  176,  235,  207,
      236,  367,  207,  207,  207,  207,  368,  263,  264,  207,
      282,  282,  282,  207,  568,  207,  287,  287,  287,  287,
      265,  679,  266,  207,  672,  207,  284,  284,  176,  177,
      177,  177,  177,  178,  177,  179,  180,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  181,  177,  177,  177,

      177,  177,  177,  177,  178,  178,  178,  178,  177,  177,
      177,  177,  178,  182,  183,  184,  185,  186,  178,  187,
      178,  178,  178,  178,  188,  189,  190,  191,  178,  192,
      178,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      193,  194,  195,  196,  197,  197,  198,  199,  200,  225,
      226,  207,  207,  207,  207,  261,  207,  207,  207,  207,
      225,  351,  207,  613,  207,  352,  267,  271,  268,  207,
      226,  269,  207,  386,  207,  270,  256,  207,  387,  272,
      339,  339,  339,  208,  209,  210,  211,  212,  212,  213,
      214,  215,  240,  612,  241,  240,  280,  207,  207,  207,

      207,  355,  427,  427,  242,  356,  243,  273,  207,  627,
      207,  278,  620,  244,  245,  240,  240,  256,  207,  432,
      207,  240,  240,  240,  244,  245,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      281,  281,  281,  281,  281,  301,  282,  282,  282,  246,
      247,  248,  249,  250,  250,  251,  252,  253,  207,  207,
      586,  207,  207,  283,  283,  283,  283,  283,  274,  207,
      436,  436,  207,  276,  285,  285,  285,  285,  285,  207,
      277,  275,  207,  285,  285,  285,  286,  285,  288,  288,
      288,  288,  288,  290,  202,  203,  443,  443,  292,  338,

      338,  338,  338,  338,  579,  303,  304,  305,  306,  307,
      307,  308,  309,  310,  312,  313,  314,  315,  316,  316,
      317,  318,  319,  302,  302,  302,  302,  302,  302,  302,
      302,  323,  384,  357,  302,  228,  302,  358,  302,  229,
      302,  382,  322,  324,  302,  325,  302,  328,  302,  381,
      302,  329,  572,  293,  294,  295,  296,  297,  297,  298,
      299,  300,  301,  302,  302,  302,  302,  425,  425,  425,
      302,  302,  302,  302,  302,  236,  330,  204,  326,  449,
      327,  302,  332,  302,  302,  571,  302,  382,  320,  321,
      205,  331,  254,  302,  302,  302,  205,  204,  376,  320,

      302,  302,  237,  237,  333,  302,  238,  239,  239,  321,
      205,  302,  335,  255,  256,  302,  205,  334,  570,  336,
      365,  302,  303,  304,  305,  306,  307,  307,  308,  309,
      310,  302,  302,  340,  340,  340,  340,  340,  344,  344,
      344,  344,  302,  337,  342,  342,  342,  342,  342,  201,
      202,  203,  302,  342,  342,  342,  343,  342,  345,  345,
      345,  345,  345,  369,  202,  203,  481,  481,  207,  207,
      547,  370,  371,  527,  527,  372,  540,  373,  374,  207,
      531,  375,  281,  281,  281,  281,  281,  254,  485,  207,
      217,  218,  219,  220,  221,  221,  222,  223,  224,  377,

      378,  434,  434,  434,  230,  257,  453,  231,  255,  256,
      377,  381,  233,  234,  283,  283,  283,  283,  283,  450,
      378,  287,  287,  287,  287,  235,  258,  236,  285,  285,
      285,  285,  285,  288,  288,  288,  288,  288,  389,  390,
      391,  392,  393,  393,  394,  395,  396,  398,  399,  400,
      401,  402,  402,  403,  404,  405,  406,  407,  568,  388,
      388,  388,  388,  388,  388,  388,  388,  406,  232,  409,
      388,  447,  388,  379,  388,  440,  388,  407,  408,  411,
      388,  410,  388,  414,  388,  202,  388,  415,  388,  388,
      389,  390,  391,  392,  393,  393,  394,  395,  396,  388,

      388,  388,  431,  412,  385,  413,  388,  388,  259,  388,
      384,  416,  388,  388,  388,  388,  289,  388,  279,  388,
      388,  388,  418,  388,  419,  388,  262,  417,  382,  260,
      388,  421,  380,  388,  477,  388,  477,  420,  422,  478,
      388,  388,  388,  424,  424,  424,  424,  424,  429,  429,
      429,  429,  388,  423,  426,  426,  426,  426,  426,  441,
      441,  441,  388,  428,  428,  428,  428,  428,  430,  430,
      430,  430,  430,  204,  432,  433,  204,  432,  433,  379,
      204,  536,  536,  207,  207,  227,  205,  543,  543,  205,
      575,  575,  205,  205,  207,  205,  479,  479,  479,  205,

      438,  438,  438,  438,  207,  207,  207,  207,  207,  207,
      435,  435,  435,  435,  435,  437,  437,  437,  437,  437,
      439,  439,  439,  439,  439,  216,  216,  216,  216,  216,
      442,  442,  442,  442,  442,  444,  444,  444,  444,  444,
      445,  445,  445,  445,  446,  446,  446,  446,  446,  207,
      207,  207,  207,  473,  582,  582,  234,  915,  473,  474,
      207,  366,  207,  451,  452,  240,  240,  240,  240,  240,
      207,  473,  207,  473,  451,  452,  456,  457,  458,  459,
      460,  460,  461,  462,  463,  465,  466,  467,  468,  469,
      469,  470,  471,  472,  475,  365,  475,  364,  261,  476,

      480,  480,  480,  480,  480,  482,  482,  482,  482,  482,
      483,  483,  483,  483,  484,  484,  484,  484,  484,  256,
      207,  207,  281,  281,  281,  281,  281,  525,  525,  525,
      487,  207,  281,  281,  281,  281,  281,  301,  280,  616,
      616,  207,  456,  457,  458,  459,  460,  460,  461,  462,
      463,  207,  207,  207,  207,  207,  207,  207,  207,  256,
      533,  362,  207,  361,  207,  360,  207,  354,  207,  569,
      490,  488,  489,  348,  207,  346,  207,  491,  207,  207,
      207,  289,  207,  207,  380,  207,  207,  475,  492,  475,
      207,  533,  612,  207,  207,  207,  207,  207,  207,  279,

      207,  493,  494,  207,  262,  207,  207,  204,  207,  495,
      207,  207,  207,  207,  477,  207,  477,  227,  207,  613,
      205,  207,  915,  207,  207,  207,  205,  498,  207,  207,
      496,  497,  915,  207,  915,  207,  915,  499,  500,  207,
      207,  207,  207,  207,  301,  207,  207,  207,  915,  207,
      915,  207,  915,  207,  915,  502,  915,  207,  534,  534,
      534,  207,  915,  207,  501,  623,  623,  207,  281,  281,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  503,  504,  504,  504,  504,  504,  505,  505,
      505,  505,  505,  506,  506,  506,  506,  506,  290,  202,

      203,  668,  668,  292,  508,  509,  510,  511,  512,  512,
      513,  514,  515,  517,  518,  519,  520,  521,  521,  522,
      523,  524,  291,  291,  291,  291,  291,  526,  526,  526,
      526,  526,  528,  528,  528,  528,  528,  529,  529,  529,
      529,  530,  530,  530,  530,  530,  302,  302,  302,  302,
      302,  302,  302,  538,  538,  538,  538,  302,  293,  294,
      295,  296,  297,  297,  298,  299,  300,  302,  535,  535,
      535,  535,  535,  537,  537,  537,  537,  537,  539,  539,
      539,  539,  539,  301,  311,  311,  311,  311,  311,  541,
      541,  541,  542,  542,  542,  542,  542,  544,  544,  544,

      544,  544,  545,  545,  545,  545,  546,  546,  546,  546,
      546,  302,  302,  302,  302,  302,  302,  302,  302,  302,
      302,  915,  302,  915,  302,  548,  302,  915,  302,  915,
      302,  915,  302,  915,  302,  915,  302,  549,  550,  915,
      302,  302,  302,  312,  313,  314,  315,  316,  316,  317,
      318,  319,  302,  302,  302,  915,  302,  302,  551,  302,
      302,  915,  302,  915,  302,  553,  455,  302,  302,  302,
      302,  302,  302,  552,  302,  302,  302,  302,  554,  302,
      302,  915,  302,  302,  302,  555,  302,  556,  915,  302,
      302,  302,  302,  915,  302,  915,  302,  302,  302,  675,

      675,  302,  915,  557,  558,  559,  302,  302,  302,  915,
      560,  302,  302,  302,  302,  302,  561,  302,  302,  302,
      302,  755,  755,  302,  915,  302,  915,  302,  915,  455,
      302,  915,  563,  302,  915,  302,  562,  573,  573,  573,
      302,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  564,  565,  565,  565,  565,
      565,  566,  566,  566,  566,  566,  567,  567,  567,  567,
      567,  369,  202,  203,  775,  775,  207,  207,  915,  370,
      371,  207,  207,  372,  915,  373,  374,  207,  915,  375,

      388,  388,  207,  577,  577,  577,  577,  207,  580,  580,
      580,  388,  207,  388,  388,  388,  388,  388,  614,  614,
      614,  388,  574,  574,  574,  574,  574,  576,  576,  576,
      576,  576,  578,  578,  578,  578,  578,  398,  399,  400,
      401,  402,  402,  403,  404,  405,  397,  397,  397,  397,
      397,  581,  581,  581,  581,  581,  583,  583,  583,  583,
      583,  584,  584,  584,  584,  585,  585,  585,  585,  585,
      388,  388,  388,  388,  388,  388,  388,  388,  915,  388,
      388,  388,  915,  388,  587,  388,  915,  388,  388,  388,
      388,  388,  915,  388,  915,  388,  588,  589,  915,  388,

      388,  388,  388,  805,  805,  590,  388,  388,  915,  388,
      828,  828,  388,  388,  388,  592,  915,  388,  388,  388,
      915,  591,  388,  915,  388,  388,  388,  388,  915,  388,
      388,  388,  593,  915,  388,  594,  388,  388,  388,  388,
      915,  388,  595,  915,  388,  388,  388,  915,  388,  388,
      388,  388,  915,  388,  388,  388,  915,  596,  597,  598,
      388,  915,  599,  600,  388,  388,  388,  388,  388,  388,
      388,  388,  388,  915,  388,  915,  915,  388,  455,  388,
      915,  602,  388,  618,  618,  618,  618,  388,  915,  388,
      601,  915,  388,  424,  424,  424,  424,  424,  424,  424,

      424,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  603,  603,  603,  603,  603,  604,  604,
      604,  604,  604,  605,  605,  605,  605,  605,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  606,  606,
      606,  606,  606,  607,  607,  607,  607,  607,  608,  608,
      608,  608,  608,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
      216,  216,  216,  609,  609,  609,  609,  609,  610,  610,
      610,  610,  610,  611,  611,  611,  611,  611,  455,  455,

      455,  455,  455,  615,  615,  615,  615,  615,  617,  617,
      617,  617,  617,  619,  619,  619,  619,  619,  465,  466,
      467,  468,  469,  469,  470,  471,  472,  464,  464,  464,
      464,  464,  621,  621,  621,  622,  622,  622,  622,  622,
      624,  624,  624,  624,  624,  625,  625,  625,  625,  626,
      626,  626,  626,  626,  629,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  476,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  638,  638,  638,
      638,  638,  639,  639,  639,  639,  639,  640,  640,  640,
      640,  640,  665,  665,  665,  665,  665,  665,  665,  665,

      665,  665,  665,  665,  665,  665,  665,  915,  915,  630,
      631,  632,  633,  634,  634,  635,  636,  637,  629,  240,
      207,  207,  207,  207,  915,  915,  641,  207,  207,  915,
      478,  207,  642,  207,  915,  643,  207,  207,  207,  207,
      207,  207,  915,  207,  207,  207,  915,  207,  207,  645,
      207,  207,  207,  915,  915,  646,  915,  644,  915,  455,
      207,  915,  207,  915,  915,  207,  507,  507,  507,  507,
      507,  915,  207,  630,  631,  632,  633,  634,  634,  635,
      636,  637,  207,  207,  207,  207,  207,  207,  207,  207,
      647,  207,  207,  207,  648,  207,  915,  207,  915,  207,

      915,  651,  207,  207,  915,  207,  915,  207,  649,  207,
      650,  915,  207,  207,  207,  207,  207,  207,  207,  915,
      207,  207,  915,  915,  207,  915,  207,  915,  207,  915,
      455,  207,  653,  915,  652,  654,  207,  915,  207,  915,
      915,  207,  655,  655,  915,  655,  656,  655,  656,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      656,  655,  655,  655,  655,  655,  655,  656,  656,  656,
      656,  655,  655,  655,  655,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  656,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  657,  658,  659,  660,  661,  661,  662,
      663,  664,  301,  666,  666,  666,  667,  667,  667,  667,
      667,  669,  669,  669,  669,  669,  670,  670,  670,  670,
      671,  671,  671,  671,  671,  301,  516,  516,  516,  516,
      516,  673,  673,  673,  674,  674,  674,  674,  674,  676,
      676,  676,  676,  676,  677,  677,  677,  677,  678,  678,
      678,  678,  678,  291,  291,  291,  291,  291,  753,  753,
      753,  915,  508,  509,  510,  511,  512,  512,  513,  514,
      515,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  757,  757,  757,  757,  517,  518,  519,  520,  521,

      521,  522,  523,  524,  291,  291,  291,  291,  291,  680,
      680,  680,  680,  680,  681,  681,  681,  681,  681,  682,
      682,  682,  682,  682,  683,  302,  302,  302,  302,  302,
      773,  773,  773,  532,  803,  803,  803,  532,  302,  302,
      302,  302,  302,  532,  532,  915,  532,  302,  302,  302,
      302,  302,  302,  302,  302,  302,  302,  684,  684,  684,
      684,  684,  685,  685,  685,  685,  685,  686,  686,  686,
      686,  686,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  687,  687,  687,  687,  687,  688,  688,  688,

      688,  688,  689,  689,  689,  689,  689,  302,  302,  302,
      302,  915,  915,  690,  302,  302,  302,  302,  302,  691,
      302,  915,  692,  302,  302,  302,  915,  302,  302,  915,
      302,  302,  302,  694,  302,  302,  915,  693,  302,  302,
      302,  302,  695,  915,  302,  302,  302,  915,  696,  302,
      915,  302,  302,  302,  302,  697,  302,  302,  302,  302,
      915,  302,  302,  302,  302,  915,  302,  915,  302,  302,
      302,  915,  700,  302,  302,  698,  302,  302,  302,  699,
      302,  302,  302,  302,  302,  302,  915,  302,  915,  915,
      701,  915,  302,  702,  915,  302,  915,  302,  915,  703,

      915,  915,  302,  915,  915,  302,  655,  704,  915,  655,
      705,  655,  705,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  705,  655,  655,  655,  655,  655,
      655,  705,  705,  705,  705,  655,  655,  655,  655,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  705,  705,  705,  705,  705,  705,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  706,  707,  708,
      709,  710,  710,  711,  712,  713,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  388,  388,  388,  388,  388,  388,  388,  388,  388,

      388,  388,  388,  388,  388,  388,  388,  388,  388,  388,
      388,  715,  715,  715,  715,  715,  716,  716,  716,  716,
      716,  717,  717,  717,  717,  717,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  718,  718,  718,  718,
      718,  719,  719,  719,  719,  719,  720,  720,  720,  720,
      720,  388,  388,  388,  388,  915,  915,  721,  388,  388,
      388,  388,  388,  722,  388,  915,  723,  388,  388,  388,
      915,  388,  388,  915,  388,  388,  388,  725,  388,  388,
      915,  724,  388,  388,  388,  388,  726,  915,  388,  388,

      388,  915,  727,  388,  915,  388,  388,  388,  388,  728,
      388,  388,  388,  388,  915,  388,  388,  388,  388,  915,
      388,  915,  388,  388,  388,  915,  731,  388,  388,  729,
      388,  388,  388,  730,  388,  388,  388,  388,  388,  388,
      915,  388,  915,  915,  732,  915,  388,  733,  915,  388,
      915,  388,  915,  734,  915,  915,  388,  915,  915,  388,
      735,  735,  735,  735,  735,  735,  735,  735,  735,  735,
      735,  735,  735,  735,  735,  736,  736,  736,  736,  736,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  915,  915,  612,  915,  915,
      613,  826,  826,  826,  240,  240,  915,  240,  240,  455,
      455,  455,  455,  455,  915,  240,  240,  915,  240,  240,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  738,  738,  738,  738,  738,
      739,  739,  739,  739,  739,  740,  740,  740,  740,  740,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      741,  741,  741,  741,  741,  742,  742,  742,  742,  742,
      743,  743,  743,  743,  743,  745,  746,  747,  748,  749,

      749,  750,  751,  752,  628,  628,  628,  628,  628,  754,
      754,  754,  754,  754,  756,  756,  756,  756,  756,  758,
      758,  758,  758,  758,  760,  760,  760,  760,  760,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,  207,
      207,  207,  207,  207,  207,  207,  207,  915,  207,  207,
      207,  915,  207,  761,  207,  762,  207,  915,  763,  207,
      207,  764,  207,  915,  207,  915,  207,  207,  207,  207,
      207,  207,  915,  207,  207,  915,  915,  915,  207,  207,
      207,  207,  207,  207,  207,  915,  915,  915,  207,  765,
      207,  766,  767,  207,  207,  768,  207,  207,  207,  207,

      207,  769,  915,  207,  770,  915,  771,  207,  915,  207,
      207,  207,  207,  207,  915,  915,  915,  207,  915,  207,
      915,  207,  772,  207,  656,  656,  656,  656,  656,  915,
      915,  207,  915,  207,  774,  774,  774,  774,  774,  776,
      776,  776,  776,  776,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  207,  207,  507,  507,  507,  507,  507,
      807,  807,  807,  807,  207,  507,  507,  507,  507,  507,
      830,  830,  830,  830,  207,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  780,  780,  780,  780,  780,
      781,  781,  781,  781,  781,  782,  782,  782,  782,  782,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      783,  783,  783,  783,  783,  784,  784,  784,  784,  784,
      785,  785,  785,  785,  785,  786,  786,  786,  786,  786,
      786,  786,  786,  786,  786,  786,  786,  786,  786,  786,
      683,  787,  787,  787,  787,  787,  915,  915,  915,  532,
      915,  915,  915,  532,  787,  787,  787,  787,  787,  532,
      532,  915,  532,  787,  787,  787,  787,  787,  788,  788,
      788,  788,  788,  788,  788,  788,  788,  788,  788,  788,
      788,  788,  788,  302,  302,  302,  302,  302,  302,  302,

      302,  915,  302,  302,  302,  915,  302,  789,  302,  790,
      302,  915,  791,  302,  302,  792,  302,  915,  302,  915,
      302,  302,  302,  302,  302,  302,  915,  302,  302,  915,
      915,  915,  302,  302,  302,  302,  302,  302,  302,  915,
      915,  915,  302,  793,  302,  794,  795,  302,  302,  796,
      302,  302,  302,  302,  302,  797,  915,  302,  798,  915,
      799,  302,  915,  302,  302,  302,  302,  302,  915,  704,
      532,  302,  915,  302,  915,  302,  800,  302,  655,  915,
      915,  915,  655,  915,  915,  302,  915,  302,  655,  655,
      655,  655,  802,  705,  705,  705,  705,  705,  804,  804,

      804,  804,  804,  806,  806,  806,  806,  806,  808,  808,
      808,  808,  808,  302,  302,  810,  810,  810,  810,  810,
      915,  915,  915,  802,  302,  810,  810,  810,  810,  810,
      915,  915,  915,  915,  302,  810,  810,  810,  810,  810,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  388,  388,  388,  388,  388,
      388,  388,  388,  915,  388,  388,  388,  915,  388,  812,
      388,  813,  388,  915,  814,  388,  388,  815,  388,  915,
      388,  915,  388,  388,  388,  388,  388,  388,  915,  388,
      388,  915,  915,  915,  388,  388,  388,  388,  388,  388,

      388,  915,  915,  915,  388,  816,  388,  817,  818,  388,
      388,  819,  388,  388,  388,  388,  388,  820,  915,  388,
      821,  915,  822,  388,  915,  388,  388,  388,  388,  388,
      388,  388,  915,  388,  915,  388,  915,  388,  823,  388,
      915,  388,  207,  207,  915,  915,  915,  388,  915,  388,
      915,  388,  915,  207,  217,  218,  219,  220,  221,  221,
      222,  223,  224,  207,  824,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  824,  824,  824,  824,  825,
      825,  825,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  745,  746,  747,  748,  749,  749,

      750,  751,  752,  744,  744,  744,  744,  744,  827,  827,
      827,  827,  827,  829,  829,  829,  829,  829,  831,  831,
      831,  831,  831,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  628,  833,  833,  833,  833,  833,  834,  834,
      834,  834,  834,  835,  835,  835,  835,  835,  207,  207,
      207,  207,  915,  207,  207,  207,  207,  915,  915,  207,
      915,  207,  207,  207,  207,  915,  837,  207,  207,  207,
      836,  207,  915,  207,  207,  915,  207,  915,  207,  838,
      839,  207,  207,  207,  207,  207,  207,  207,  207,  207,

      207,  915,  207,  915,  841,  207,  915,  207,  915,  915,
      207,  915,  207,  842,  840,  207,  915,  207,  207,  207,
      843,  207,  207,  656,  656,  656,  656,  656,  915,  207,
      844,  915,  207,  656,  656,  656,  656,  656,  915,  207,
      301,  915,  207,  656,  656,  656,  656,  656,  656,  656,
      656,  656,  656,  845,  845,  845,  845,  845,  846,  846,
      846,  846,  846,  847,  847,  847,  847,  847,  848,  848,
      848,  848,  848,  848,  848,  848,  848,  848,  848,  848,
      848,  848,  848,  849,  849,  849,  849,  849,  849,  849,
      849,  849,  849,  849,  849,  849,  849,  849,  302,  302,

      312,  313,  314,  315,  316,  316,  317,  318,  319,  302,
      302,  302,  302,  302,  915,  302,  302,  302,  302,  302,
      915,  302,  915,  302,  302,  302,  302,  915,  851,  302,
      302,  302,  850,  302,  915,  302,  302,  915,  302,  915,
      302,  852,  853,  302,  302,  302,  302,  302,  302,  302,
      302,  302,  302,  915,  302,  915,  855,  302,  915,  302,
      915,  915,  302,  915,  302,  856,  854,  302,  915,  302,
      302,  302,  857,  302,  302,  859,  532,  915,  915,  915,
      915,  302,  858,  915,  302,  705,  705,  705,  705,  705,
      915,  302,  915,  915,  302,  915,  655,  705,  705,  705,

      705,  705,  705,  705,  705,  705,  705,  705,  705,  705,
      705,  705,  860,  860,  860,  860,  860,  861,  861,  861,
      861,  861,  862,  862,  862,  862,  862,  388,  388,  388,
      388,  388,  388,  915,  388,  388,  388,  388,  388,  915,
      388,  915,  388,  388,  388,  388,  915,  864,  388,  915,
      388,  863,  388,  915,  388,  388,  915,  388,  388,  388,
      865,  388,  388,  915,  388,  388,  388,  915,  915,  388,
      915,  866,  388,  915,  915,  868,  388,  388,  388,  388,
      388,  388,  388,  915,  867,  915,  388,  915,  388,  388,
      388,  388,  388,  388,  869,  915,  915,  915,  388,  915,

      388,  870,  915,  388,  871,  744,  744,  744,  744,  744,
      388,  915,  915,  388,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  872,
      872,  872,  872,  872,  873,  873,  873,  873,  873,  874,
      874,  874,  874,  874,  875,  875,  875,  875,  875,  875,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  207,
      207,  207,  207,  207,  207,  207,  207,  915,  207,  207,
      207,  877,  207,  915,  207,  915,  207,  207,  207,  207,
      207,  876,  207,  878,  207,  915,  207,  915,  207,  207,
      879,  207,  207,  207,  207,  207,  207,  915,  207,  915,

      915,  915,  207,  915,  207,  915,  207,  880,  880,  880,
      880,  880,  207,  915,  207,  915,  207,  880,  880,  880,
      880,  880,  880,  880,  880,  880,  880,  302,  302,  302,
      302,  302,  302,  302,  302,  915,  302,  302,  302,  882,
      302,  915,  302,  915,  302,  302,  302,  302,  302,  881,
      302,  883,  302,  915,  302,  915,  302,  302,  884,  302,
      302,  302,  302,  302,  302,  915,  302,  859,  532,  915,
      302,  915,  302,  915,  302,  885,  885,  885,  885,  885,
      302,  915,  302,  915,  302,  915,  915,  915,  655,  885,
      885,  885,  885,  885,  885,  885,  885,  885,  885,  388,

      388,  388,  388,  388,  388,  388,  388,  915,  388,  388,
      388,  887,  388,  915,  388,  915,  388,  388,  388,  388,
      388,  886,  388,  888,  388,  915,  388,  915,  388,  388,
      889,  388,  388,  388,  388,  388,  388,  915,  388,  915,
      915,  915,  388,  915,  388,  915,  388,  890,  890,  890,
      890,  890,  388,  915,  388,  915,  388,  890,  890,  890,
      890,  890,  890,  890,  890,  890,  890,  207,  207,  207,
      207,  915,  207,  207,  207,  207,  915,  891,  207,  915,
      207,  302,  302,  207,  915,  207,  302,  302,  207,  893,
      892,  895,  302,  207,  894,  207,  915,  302,  302,  302,

      302,  302,  302,  388,  388,  388,  388,  896,  915,  302,
      915,  302,  915,  899,  388,  897,  388,  388,  388,  302,
      898,  302,  388,  388,  388,  915,  900,  915,  388,  207,
      207,  915,  915,  388,  901,  207,  207,  915,  388,  915,
      207,  915,  902,  388,  207,  207,  207,  915,  903,  915,
      207,  207,  207,  302,  302,  207,  207,  302,  302,  915,
      915,  904,  207,  915,  302,  207,  302,  302,  302,  915,
      905,  915,  207,  915,  302,  302,  302,  302,  302,  388,
      388,  388,  388,  915,  915,  906,  302,  302,  388,  388,
      388,  915,  388,  915,  907,  915,  302,  388,  388,  388,

      388,  915,  388,  207,  207,  207,  207,  908,  388,  388,
      915,  302,  302,  915,  207,  915,  207,  915,  388,  302,
      302,  909,  302,  915,  207,  915,  207,  388,  388,  910,
      302,  915,  302,  388,  388,  207,  207,  915,  388,  915,
      302,  915,  302,  302,  388,  911,  207,  915,  388,  388,
      388,  915,  912,  302,  388,  915,  207,  207,  207,  913,
      388,  302,  302,  302,  388,  388,  914,  915,  207,  915,
      388,  915,  302,  915,  915,  388,  915,  915,  207,  915,
      915,  915,  302,  915,  915,  388,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      109,  109,  109,  109,  109,  109,  109,  109,  109,  109,
      109,  109,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  114,  114,  117,  117,  117,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  207,  915,
      915,  915,  915,  915,  915,  207,  216,  915,  915,  915,
      915,  915,  915,  216,  291,  291,  291,  291,  915,  291,
      302,  915,  915,  302,  915,  915,  915,  915,  915,  915,
      302,  311,  915,  915,  915,  915,  915,  915,  311,  347,

      347,  915,  915,  347,  915,  347,  347,  347,  347,  915,
      347,  353,  353,  915,  915,  353,  915,  353,  353,  353,
      353,  915,  353,  359,  359,  915,  915,  359,  359,  359,
      359,  915,  359,  359,  359,  363,  363,  915,  915,  363,
      363,  363,  363,  363,  363,  363,  363,  383,  915,  915,
      915,  383,  915,  383,  383,  383,  915,  383,  383,  388,
      915,  915,  915,  915,  915,  915,  388,  397,  915,  915,
      915,  915,  915,  915,  397,  448,  448,  448,  448,  448,
      448,  448,  448,  448,  448,  448,  454,  454,  454,  454,
      454,  454,  454,  454,  454,  454,  454,  455,  915,  915,

      915,  915,  915,  915,  455,  464,  915,  915,  915,  915,
      915,  915,  464,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  507,  915,  915,  507,  915,  915,
      915,  915,  915,  915,  507,  516,  915,  915,  915,  915,
      915,  915,  516,  532,  532,  532,  532,  532,  532,  532,
      915,  532,  915,  532,  532,  628,  915,  628,  915,  915,
      915,  915,  628,  744,  915,  915,  915,  915,  915,  915,
      744,  655,  655,  915,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  801,  801,  801,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  216,  915,  915,  915,  915,

      915,  915,  216,  311,  915,  915,  311,  915,  915,  915,
      915,  915,  915,  311,   19,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915
    } ;

static const flex_int16_t yy_chk[4786] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        3,    3,   42,    3,   43,    4,    4,    3,    4,  752,
        5,    5,    4,    5,    3,    6,    6,    5,    6,    4,
        7,    7,    6,   42,    5,   43,    8,    8,   44,    6,
        7,    9,    9,   10,   10,    7,    8,   11,   11,   11,
      713,    8,   12,   12,   12,   21,   21,   21,   32,   44,
       37,  664,   32,   11,   37,   37,   67,   67,   12,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   15,
       15,   15,  637,   15,   22,  572,   41,   15,   15,   63,
       91,   91,   15,   23,   23,   15,  571,   22,   15,   15,
       15,   15,   15,   22,  570,  100,   23,   41,   41,  100,

       63,  144,   23,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   26,   26,   26,   26,   26,   26,   26,   26,
       26,  145,  144,   15,   16,   16,   16,   36,   16,  474,
       36,  474,   16,   16,   36,   36,   36,   16,   49,   49,
       16,  569,  145,   16,   16,   16,   16,   16,   36,   49,
       36,  121,   50,   50,   51,   51,  121,   49,   50,   49,
       65,   65,   65,   50,  568,   51,   70,   70,   70,   70,
       50,  524,   51,   50,  515,   51,  158,  158,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   27,
       27,   52,   52,   53,   53,  146,   54,   54,   55,   55,
       27,  101,   52,  477,   53,  101,   52,   54,   52,   55,
       27,   53,   52,  171,   53,   53,  146,   54,  171,   55,
       89,   89,   89,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   38,  475,   38,   38,  154,   56,   56,   59,

       59,  106,  196,  196,   38,  106,   38,   56,   56,  472,
       59,   59,  463,   38,   38,   38,   38,  154,   56,  433,
       59,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       64,   64,   64,   64,   64,   74,  156,  156,  156,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   57,   57,
      405,   58,   58,   66,   66,   66,   66,   66,   57,   57,
      211,  211,   58,   58,   68,   68,   68,   68,   68,   57,
       58,   57,   58,   69,   69,   69,   69,   69,   71,   71,
       71,   71,   71,   73,   73,   73,  220,  220,   73,   88,

       88,   88,   88,   88,  396,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   77,   77,   78,   78,   79,   79,   81,
       81,   78,  384,  107,   77,  134,   78,  107,   79,  134,
       81,  382,   77,   78,   77,   79,   78,   81,   79,  381,
       81,   81,  380,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   76,   80,   80,   82,   82,  194,  194,  194,
       83,   83,   84,   84,   80,  231,   82,  124,   80,  231,
       80,   83,   84,   84,   80,  379,   82,  375,   76,   76,
      124,   83,  143,   84,   85,   85,  124,  125,  125,   76,

       86,   86,  139,  181,   85,   85,  139,  139,  181,   76,
      125,   86,   86,  143,  143,   85,  125,   85,  374,   86,
      365,   86,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   87,   87,   90,   90,   90,   90,   90,   94,   94,
       94,   94,   87,   87,   92,   92,   92,   92,   92,  201,
      201,  201,   87,   93,   93,   93,   93,   93,   95,   95,
       95,   95,   95,  123,  123,  123,  249,  249,  126,  126,
      319,  123,  123,  296,  296,  123,  310,  123,  123,  126,
      300,  123,  155,  155,  155,  155,  155,  254,  253,  126,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  129,

      129,  209,  209,  209,  138,  257,  235,  138,  254,  254,
      129,  138,  138,  138,  157,  157,  157,  157,  157,  233,
      129,  160,  160,  160,  160,  138,  257,  138,  159,  159,
      159,  159,  159,  161,  161,  161,  161,  161,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  180,  180,  372,  182,
      182,  184,  184,  183,  183,  186,  186,  180,  232,  183,
      182,  224,  184,  372,  183,  215,  186,  180,  182,  184,
      182,  183,  184,  186,  183,  203,  186,  186,  185,  185,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  185,

      187,  187,  200,  185,  166,  185,  188,  188,  259,  185,
      164,  187,  189,  189,  190,  190,  162,  188,  152,  191,
      191,  187,  189,  189,  190,  190,  148,  188,  141,  259,
      191,  191,  137,  189,  245,  190,  245,  190,  191,  245,
      191,  192,  192,  193,  193,  193,  193,  193,  198,  198,
      198,  198,  192,  192,  195,  195,  195,  195,  195,  218,
      218,  218,  192,  197,  197,  197,  197,  197,  199,  199,
      199,  199,  199,  204,  204,  204,  205,  205,  205,  135,
      206,  306,  306,  207,  207,  130,  204,  315,  315,  205,
      392,  392,  204,  206,  207,  205,  247,  247,  247,  206,

      213,  213,  213,  213,  207,  208,  208,  208,  208,  208,
      210,  210,  210,  210,  210,  212,  212,  212,  212,  212,
      214,  214,  214,  214,  214,  217,  217,  217,  217,  217,
      219,  219,  219,  219,  219,  221,  221,  221,  221,  221,
      222,  222,  222,  222,  223,  223,  223,  223,  223,  225,
      225,  226,  226,  242,  401,  401,  234,  242,  242,  242,
      225,  120,  226,  234,  234,  246,  246,  246,  246,  246,
      225,  242,  226,  242,  234,  234,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  244,  118,  244,  116,  261,  244,

      248,  248,  248,  248,  248,  250,  250,  250,  250,  250,
      251,  251,  251,  251,  252,  252,  252,  252,  252,  261,
      263,  263,  282,  282,  282,  282,  282,  294,  294,  294,
      263,  263,  283,  283,  283,  283,  283,  301,  280,  459,
      459,  263,  244,  244,  244,  244,  244,  244,  244,  244,
      244,  264,  264,  265,  265,  266,  266,  267,  267,  280,
      301,  113,  264,  112,  265,  111,  266,  105,  267,  373,
      265,  264,  264,   99,  265,   96,  266,  267,  267,  268,
      268,   72,  269,  269,  373,  270,  270,  451,  268,  451,
      268,  301,  451,  269,  271,  271,  270,  272,  272,   61,

      268,  269,  270,  269,   46,  271,  270,  376,  272,  272,
      273,  273,  274,  274,  452,  271,  452,   28,  272,  452,
      376,  273,   19,  274,  275,  275,  376,  274,  276,  276,
      273,  273,    0,  274,    0,  275,    0,  275,  276,  276,
      277,  277,  278,  278,  291,  275,  281,  281,    0,  276,
        0,  277,    0,  278,    0,  278,    0,  281,  304,  304,
      304,  277,    0,  278,  277,  468,  468,  281,  284,  284,
      284,  284,  284,  285,  285,  285,  285,  285,  286,  286,
      286,  286,  286,  287,  287,  287,  287,  287,  288,  288,
      288,  288,  288,  289,  289,  289,  289,  289,  290,  290,

      290,  511,  511,  290,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  292,  292,  292,  292,  292,  292,  292,
      292,  292,  293,  293,  293,  293,  293,  295,  295,  295,
      295,  295,  297,  297,  297,  297,  297,  298,  298,  298,
      298,  299,  299,  299,  299,  299,  302,  302,  303,  303,
      303,  303,  303,  308,  308,  308,  308,  302,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  302,  305,  305,
      305,  305,  305,  307,  307,  307,  307,  307,  309,  309,
      309,  309,  309,  311,  312,  312,  312,  312,  312,  313,
      313,  313,  314,  314,  314,  314,  314,  316,  316,  316,

      316,  316,  317,  317,  317,  317,  318,  318,  318,  318,
      318,  320,  320,  321,  321,  322,  322,  323,  323,  325,
      325,    0,  320,    0,  321,  322,  322,    0,  323,    0,
      325,    0,  320,    0,  321,    0,  322,  323,  323,    0,
      325,  324,  324,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  324,  326,  326,    0,  327,  327,  324,  328,
      328,  455,  324,  455,  326,  327,  455,  327,  329,  329,
      328,  330,  330,  326,  326,  331,  331,  327,  328,  329,
      328,    0,  330,  332,  332,  329,  331,  331,    0,  329,
      333,  333,  330,    0,  332,    0,  331,  334,  334,  520,

      520,  333,    0,  332,  332,  333,  335,  335,  334,    0,
      334,  333,  336,  336,  338,  338,  335,  335,  334,  337,
      337,  633,  633,  336,  628,  338,  628,  335,    0,  628,
      337,    0,  337,  336,    0,  338,  336,  390,  390,  390,
      337,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      340,  341,  341,  341,  341,  341,  342,  342,  342,  342,
      342,  343,  343,  343,  343,  343,  344,  344,  344,  344,
      344,  345,  345,  345,  345,  345,  346,  346,  346,  346,
      346,  369,  369,  369,  660,  660,  377,  377,    0,  369,
      369,  378,  378,  369,    0,  369,  369,  377,    0,  369,

      388,  388,  378,  394,  394,  394,  394,  377,  399,  399,
      399,  388,  378,  389,  389,  389,  389,  389,  457,  457,
      457,  388,  391,  391,  391,  391,  391,  393,  393,  393,
      393,  393,  395,  395,  395,  395,  395,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  398,  398,  398,  398,
      398,  400,  400,  400,  400,  400,  402,  402,  402,  402,
      402,  403,  403,  403,  403,  404,  404,  404,  404,  404,
      406,  406,  407,  407,  408,  408,  409,  409,    0,  411,
      411,  406,    0,  407,  408,  408,    0,  409,  410,  410,
      411,  406,    0,  407,    0,  408,  409,  409,    0,  410,

      411,  412,  412,  709,  709,  410,  413,  413,    0,  410,
      748,  748,  412,  414,  414,  413,    0,  413,  415,  415,
        0,  412,  412,    0,  414,  416,  416,  413,    0,  415,
      417,  417,  414,    0,  414,  415,  416,  418,  418,  415,
        0,  417,  417,    0,  419,  419,  416,    0,  418,  420,
      420,  417,    0,  421,  421,  419,    0,  418,  418,  419,
      420,    0,  420,  421,  421,  419,  422,  422,  423,  423,
      420,  424,  424,  760,  421,  760,    0,  422,  760,  423,
        0,  423,  424,  461,  461,  461,  461,  422,    0,  423,
      422,    0,  424,  425,  425,  425,  425,  425,  426,  426,

      426,  426,  426,  427,  427,  427,  427,  427,  428,  428,
      428,  428,  428,  429,  429,  429,  429,  429,  430,  430,
      430,  430,  430,  431,  431,  431,  431,  431,  434,  434,
      434,  434,  434,  435,  435,  435,  435,  435,  436,  436,
      436,  436,  436,  437,  437,  437,  437,  437,  438,  438,
      438,  438,  438,  439,  439,  439,  439,  439,  440,  440,
      440,  440,  440,  441,  441,  441,  441,  441,  442,  442,
      442,  442,  442,  443,  443,  443,  443,  443,  444,  444,
      444,  444,  444,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  447,  447,  447,  447,  447,  456,  456,

      456,  456,  456,  458,  458,  458,  458,  458,  460,  460,
      460,  460,  460,  462,  462,  462,  462,  462,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  465,  465,  465,
      465,  465,  466,  466,  466,  467,  467,  467,  467,  467,
      469,  469,  469,  469,  469,  470,  470,  470,  470,  471,
      471,  471,  471,  471,  476,  476,  479,  479,  479,  479,
      479,  480,  480,  480,  480,  480,  476,  481,  481,  481,
      481,  481,  482,  482,  482,  482,  482,  483,  483,  483,
      483,  483,  484,  484,  484,  484,  484,  485,  485,  485,
      485,  485,  504,  504,  504,  504,  504,  505,  505,  505,

      505,  505,  506,  506,  506,  506,  506,    0,    0,  476,
      476,  476,  476,  476,  476,  476,  476,  476,  478,  478,
      487,  487,  488,  488,    0,    0,  487,  489,  489,    0,
      478,  487,  488,  488,    0,  489,  490,  490,  489,  491,
      491,  487,    0,  488,  492,  492,    0,  490,  489,  491,
      491,  493,  493,    0,  824,  492,  824,  490,    0,  824,
      491,    0,  493,    0,    0,  492,  508,  508,  508,  508,
      508,    0,  493,  478,  478,  478,  478,  478,  478,  478,
      478,  478,  494,  494,  495,  495,  496,  496,  497,  497,
      494,  498,  498,  494,  495,  495,    0,  496,    0,  497,

        0,  498,  498,  494,    0,  495,    0,  496,  496,  497,
      497,    0,  498,  499,  499,  500,  500,  501,  501,    0,
      502,  502,    0,    0,  499,  875,  500,  875,  501,    0,
      875,  502,  500,    0,  499,  502,  500,    0,  501,    0,
        0,  502,  503,  503,    0,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,

      503,  503,  503,  503,  503,  503,  503,  503,  503,  503,
      503,  503,  507,  509,  509,  509,  510,  510,  510,  510,
      510,  512,  512,  512,  512,  512,  513,  513,  513,  513,
      514,  514,  514,  514,  514,  516,  517,  517,  517,  517,
      517,  518,  518,  518,  519,  519,  519,  519,  519,  521,
      521,  521,  521,  521,  522,  522,  522,  522,  523,  523,
      523,  523,  523,  525,  525,  525,  525,  525,  631,  631,
      631,    0,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  526,  526,  526,  526,  526,  527,  527,  527,  527,
      527,  635,  635,  635,  635,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  528,  528,  528,  528,  528,  529,
      529,  529,  529,  529,  530,  530,  530,  530,  530,  531,
      531,  531,  531,  531,  533,  534,  534,  534,  534,  534,
      658,  658,  658,  533,  707,  707,  707,  533,  535,  535,
      535,  535,  535,  533,  533,    0,  533,  536,  536,  536,
      536,  536,  537,  537,  537,  537,  537,  538,  538,  538,
      538,  538,  539,  539,  539,  539,  539,  540,  540,  540,
      540,  540,  541,  541,  541,  541,  541,  542,  542,  542,
      542,  542,  543,  543,  543,  543,  543,  544,  544,  544,
      544,  544,  545,  545,  545,  545,  545,  546,  546,  546,

      546,  546,  547,  547,  547,  547,  547,  548,  548,  549,
      549,    0,    0,  548,  550,  550,  551,  551,  548,  549,
      549,    0,  550,  552,  552,  550,    0,  551,  548,    0,
      549,  553,  553,  552,  552,  550,    0,  551,  554,  554,
      555,  555,  553,    0,  552,  556,  556,    0,  555,  554,
        0,  555,  553,  557,  557,  556,  556,  558,  558,  554,
        0,  555,  559,  559,  557,    0,  556,    0,  558,  560,
      560,    0,  559,  559,  557,  557,  561,  561,  558,  558,
      560,  562,  562,  559,  563,  563,    0,  561,    0,    0,
      560,    0,  562,  561,    0,  563,    0,  561,    0,  563,

        0,    0,  562,    0,    0,  563,  564,  564,    0,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  564,  564,  564,  564,
      564,  564,  564,  564,  564,  564,  565,  565,  565,  565,
      565,  566,  566,  566,  566,  566,  567,  567,  567,  567,
      567,  573,  573,  573,  573,  573,  574,  574,  574,  574,

      574,  575,  575,  575,  575,  575,  576,  576,  576,  576,
      576,  577,  577,  577,  577,  577,  578,  578,  578,  578,
      578,  579,  579,  579,  579,  579,  580,  580,  580,  580,
      580,  581,  581,  581,  581,  581,  582,  582,  582,  582,
      582,  583,  583,  583,  583,  583,  584,  584,  584,  584,
      584,  585,  585,  585,  585,  585,  586,  586,  586,  586,
      586,  587,  587,  588,  588,    0,    0,  587,  589,  589,
      590,  590,  587,  588,  588,    0,  589,  591,  591,  589,
        0,  590,  587,    0,  588,  592,  592,  591,  591,  589,
        0,  590,  593,  593,  594,  594,  592,    0,  591,  595,

      595,    0,  594,  593,    0,  594,  592,  596,  596,  595,
      595,  597,  597,  593,    0,  594,  598,  598,  596,    0,
      595,    0,  597,  599,  599,    0,  598,  598,  596,  596,
      600,  600,  597,  597,  599,  601,  601,  598,  602,  602,
        0,  600,    0,    0,  599,    0,  601,  600,    0,  602,
        0,  600,    0,  602,    0,    0,  601,    0,    0,  602,
      603,  603,  603,  603,  603,  604,  604,  604,  604,  604,
      605,  605,  605,  605,  605,  606,  606,  606,  606,  606,
      607,  607,  607,  607,  607,  608,  608,  608,  608,  608,
      609,  609,  609,  609,  609,  610,  610,  610,  610,  610,

      611,  611,  611,  611,  611,  612,    0,  612,  613,    0,
      613,  746,  746,  746,  612,  612,    0,  613,  613,  614,
      614,  614,  614,  614,    0,  612,  612,    0,  613,  613,
      615,  615,  615,  615,  615,  616,  616,  616,  616,  616,
      617,  617,  617,  617,  617,  618,  618,  618,  618,  618,
      619,  619,  619,  619,  619,  620,  620,  620,  620,  620,
      621,  621,  621,  621,  621,  622,  622,  622,  622,  622,
      623,  623,  623,  623,  623,  624,  624,  624,  624,  624,
      625,  625,  625,  625,  625,  626,  626,  626,  626,  626,
      627,  627,  627,  627,  627,  629,  629,  629,  629,  629,

      629,  629,  629,  629,  630,  630,  630,  630,  630,  632,
      632,  632,  632,  632,  634,  634,  634,  634,  634,  636,
      636,  636,  636,  636,  638,  638,  638,  638,  638,  639,
      639,  639,  639,  639,  640,  640,  640,  640,  640,  641,
      641,  642,  642,  643,  643,  644,  644,    0,  645,  645,
      641,    0,  642,  641,  643,  643,  644,    0,  644,  645,
      641,  645,  642,    0,  643,    0,  644,  646,  646,  645,
      647,  647,    0,  648,  648,    0,    0,    0,  646,  649,
      649,  647,  650,  650,  648,    0,    0,    0,  646,  646,
      649,  647,  648,  650,  648,  649,  651,  651,  652,  652,

      649,  650,    0,  650,  651,    0,  652,  651,    0,  652,
      653,  653,  654,  654,    0,    0,    0,  651,    0,  652,
        0,  653,  654,  654,  657,  657,  657,  657,  657,    0,
        0,  653,    0,  654,  659,  659,  659,  659,  659,  661,
      661,  661,  661,  661,  662,  662,  662,  662,  663,  663,
      663,  663,  663,  665,  665,  666,  666,  666,  666,  666,
      711,  711,  711,  711,  665,  667,  667,  667,  667,  667,
      750,  750,  750,  750,  665,  668,  668,  668,  668,  668,
      669,  669,  669,  669,  669,  670,  670,  670,  670,  670,
      671,  671,  671,  671,  671,  672,  672,  672,  672,  672,

      673,  673,  673,  673,  673,  674,  674,  674,  674,  674,
      675,  675,  675,  675,  675,  676,  676,  676,  676,  676,
      677,  677,  677,  677,  677,  678,  678,  678,  678,  678,
      679,  679,  679,  679,  679,  680,  680,  680,  680,  680,
      681,  681,  681,  681,  681,  682,  682,  682,  682,  682,
      683,  684,  684,  684,  684,  684,    0,    0,    0,  683,
        0,    0,    0,  683,  685,  685,  685,  685,  685,  683,
      683,    0,  683,  686,  686,  686,  686,  686,  687,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  690,  690,  691,  691,  692,  692,  693,

      693,    0,  694,  694,  690,    0,  691,  690,  692,  692,
      693,    0,  693,  694,  690,  694,  691,    0,  692,    0,
      693,  695,  695,  694,  696,  696,    0,  697,  697,    0,
        0,    0,  695,  698,  698,  696,  699,  699,  697,    0,
        0,    0,  695,  695,  698,  696,  697,  699,  697,  698,
      700,  700,  701,  701,  698,  699,    0,  699,  700,    0,
      701,  700,    0,  701,  702,  702,  703,  703,    0,  704,
      704,  700,    0,  701,    0,  702,  703,  703,  704,    0,
        0,    0,  704,    0,    0,  702,    0,  703,  704,  704,
      704,  704,  704,  706,  706,  706,  706,  706,  708,  708,

      708,  708,  708,  710,  710,  710,  710,  710,  712,  712,
      712,  712,  712,  714,  714,  715,  715,  715,  715,  715,
        0,    0,    0,  704,  714,  716,  716,  716,  716,  716,
        0,    0,    0,    0,  714,  717,  717,  717,  717,  717,
      718,  718,  718,  718,  718,  719,  719,  719,  719,  719,
      720,  720,  720,  720,  720,  721,  721,  722,  722,  723,
      723,  724,  724,    0,  725,  725,  721,    0,  722,  721,
      723,  723,  724,    0,  724,  725,  721,  725,  722,    0,
      723,    0,  724,  726,  726,  725,  727,  727,    0,  728,
      728,    0,    0,    0,  726,  729,  729,  727,  730,  730,

      728,    0,    0,    0,  726,  726,  729,  727,  728,  730,
      728,  729,  731,  731,  732,  732,  729,  730,    0,  730,
      731,    0,  732,  731,    0,  732,  733,  733,  734,  734,
      735,  735,    0,  731,    0,  732,    0,  733,  734,  734,
        0,  735,  736,  736,    0,    0,    0,  733,    0,  734,
        0,  735,    0,  736,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  736,  738,  738,  738,  738,  738,  739,
      739,  739,  739,  739,  740,  740,  740,  740,  740,  741,
      741,  741,  741,  741,  742,  742,  742,  742,  742,  743,
      743,  743,  743,  743,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  745,  745,  745,  745,  745,  747,  747,
      747,  747,  747,  749,  749,  749,  749,  749,  751,  751,
      751,  751,  751,  753,  753,  753,  753,  753,  754,  754,
      754,  754,  754,  755,  755,  755,  755,  755,  756,  756,
      756,  756,  756,  757,  757,  757,  757,  757,  758,  758,
      758,  758,  758,  759,  759,  759,  759,  759,  761,  761,
      762,  762,    0,  763,  763,  764,  764,    0,    0,  761,
        0,  762,  765,  765,  763,    0,  764,  766,  766,  761,
      763,  762,    0,  765,  763,    0,  764,    0,  766,  765,
      766,  767,  767,  765,  768,  768,  769,  769,  766,  770,

      770,    0,  767,    0,  768,  768,    0,  769,    0,    0,
      770,    0,  767,  769,  767,  768,    0,  769,  771,  771,
      770,  772,  772,  773,  773,  773,  773,  773,    0,  771,
      771,    0,  772,  774,  774,  774,  774,  774,    0,  771,
      788,    0,  772,  775,  775,  775,  775,  775,  776,  776,
      776,  776,  776,  777,  777,  777,  777,  777,  778,  778,
      778,  778,  778,  779,  779,  779,  779,  779,  780,  780,
      780,  780,  780,  781,  781,  781,  781,  781,  782,  782,
      782,  782,  782,  783,  783,  783,  783,  783,  784,  784,
      784,  784,  784,  785,  785,  785,  785,  785,  787,  787,

      788,  788,  788,  788,  788,  788,  788,  788,  788,  787,
      789,  789,  790,  790,    0,  791,  791,  792,  792,  787,
        0,  789,    0,  790,  793,  793,  791,    0,  792,  794,
      794,  789,  791,  790,    0,  793,  791,    0,  792,    0,
      794,  793,  794,  795,  795,  793,  796,  796,  797,  797,
      794,  798,  798,    0,  795,    0,  796,  796,    0,  797,
        0,    0,  798,    0,  795,  797,  795,  796,    0,  797,
      799,  799,  798,  800,  800,  802,  802,    0,    0,    0,
        0,  799,  799,    0,  800,  803,  803,  803,  803,  803,
        0,  799,    0,    0,  800,    0,  802,  804,  804,  804,

      804,  804,  805,  805,  805,  805,  805,  806,  806,  806,
      806,  806,  807,  807,  807,  807,  807,  808,  808,  808,
      808,  808,  809,  809,  809,  809,  809,  810,  810,  812,
      812,  813,  813,    0,  814,  814,  815,  815,  810,    0,
      812,    0,  813,  816,  816,  814,    0,  815,  810,    0,
      812,  814,  813,    0,  816,  814,    0,  815,  817,  817,
      816,  818,  818,    0,  816,  819,  819,    0,    0,  817,
        0,  817,  818,    0,    0,  819,  819,  820,  820,  817,
      821,  821,  818,    0,  818,    0,  819,    0,  820,  823,
      823,  821,  822,  822,  820,    0,    0,    0,  820,    0,

      823,  821,    0,  822,  822,  826,  826,  826,  826,  826,
      823,    0,    0,  822,  827,  827,  827,  827,  827,  828,
      828,  828,  828,  828,  829,  829,  829,  829,  829,  830,
      830,  830,  830,  830,  831,  831,  831,  831,  831,  832,
      832,  832,  832,  832,  833,  833,  833,  833,  833,  834,
      834,  834,  834,  834,  835,  835,  835,  835,  835,  836,
      836,  837,  837,  838,  838,  839,  839,    0,  841,  841,
      836,  838,  837,    0,  838,    0,  839,  840,  840,  841,
      836,  836,  837,  839,  838,    0,  839,    0,  840,  841,
      840,  842,  842,  843,  843,  844,  844,    0,  840,    0,

        0,    0,  842,    0,  843,    0,  844,  845,  845,  845,
      845,  845,  842,    0,  843,    0,  844,  846,  846,  846,
      846,  846,  847,  847,  847,  847,  847,  850,  850,  851,
      851,  852,  852,  853,  853,    0,  855,  855,  850,  852,
      851,    0,  852,    0,  853,  854,  854,  855,  850,  850,
      851,  853,  852,    0,  853,    0,  854,  855,  854,  856,
      856,  857,  857,  858,  858,    0,  854,  859,  859,    0,
      856,    0,  857,    0,  858,  860,  860,  860,  860,  860,
      856,    0,  857,    0,  858,    0,    0,    0,  859,  861,
      861,  861,  861,  861,  862,  862,  862,  862,  862,  863,

      863,  864,  864,  865,  865,  866,  866,    0,  868,  868,
      863,  865,  864,    0,  865,    0,  866,  867,  867,  868,
      863,  863,  864,  866,  865,    0,  866,    0,  867,  868,
      867,  869,  869,  870,  870,  871,  871,    0,  867,    0,
        0,    0,  869,    0,  870,    0,  871,  872,  872,  872,
      872,  872,  869,    0,  870,    0,  871,  873,  873,  873,
      873,  873,  874,  874,  874,  874,  874,  876,  876,  877,
      877,    0,  878,  878,  879,  879,    0,  876,  876,    0,
      877,  881,  881,  878,    0,  879,  882,  882,  876,  878,
      877,  881,  881,  878,  879,  879,    0,  882,  883,  883,

      884,  884,  881,  886,  886,  887,  887,  882,    0,  883,
        0,  884,    0,  886,  886,  883,  887,  888,  888,  883,
      884,  884,  889,  889,  886,    0,  887,    0,  888,  891,
      891,    0,    0,  889,  888,  892,  892,    0,  888,    0,
      891,    0,  889,  889,  893,  893,  892,    0,  892,    0,
      891,  894,  894,  895,  895,  893,  892,  896,  896,    0,
        0,  894,  894,    0,  895,  893,  897,  897,  896,    0,
      896,    0,  894,    0,  895,  898,  898,  897,  896,  899,
      899,  900,  900,    0,    0,  898,  898,  897,  901,  901,
      899,    0,  900,    0,  900,    0,  898,  902,  902,  901,

      899,    0,  900,  903,  903,  904,  904,  902,  902,  901,
        0,  905,  905,    0,  903,    0,  904,    0,  902,  906,
      906,  903,  905,    0,  903,    0,  904,  907,  907,  905,
      906,    0,  905,  908,  908,  909,  909,    0,  907,    0,
      906,    0,  910,  910,  908,  907,  909,    0,  907,  911,
      911,    0,  909,  910,  908,    0,  909,  912,  912,  910,
      911,  913,  913,  910,  914,  914,  911,    0,  912,    0,
      911,    0,  913,    0,    0,  914,    0,    0,  912,    0,
        0,    0,  913,    0,    0,  914,  916,  916,  916,  916,
      916,  916,  916,  916,  916,  916,  916,  916,  917,  917,

      917,  917,  917,  917,  917,  917,  917,  917,  917,  917,
      918,  918,  918,  918,  918,  918,  918,  918,  918,  918,
      918,  918,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  920,  920,  920,  920,  920,  920,
      920,  920,  920,  920,  920,  920,  921,  921,  921,  921,
      921,  921,  921,  921,  921,  921,  921,  921,  922,    0,
        0,    0,    0,    0,    0,  922,  923,    0,    0,    0,
        0,    0,    0,  923,  924,  924,  924,  924,    0,  924,
      925,    0,    0,  925,    0,    0,    0,    0,    0,    0,
      925,  926,    0,    0,    0,    0,    0,    0,  926,  927,

      927,    0,    0,  927,    0,  927,  927,  927,  927,    0,
      927,  928,  928,    0,    0,  928,    0,  928,  928,  928,
      928,    0,  928,  929,  929,    0,    0,  929,  929,  929,
      929,    0,  929,  929,  929,  930,  930,    0,    0,  930,
      930,  930,  930,  930,  930,  930,  930,  931,    0,    0,
        0,  931,    0,  931,  931,  931,    0,  931,  931,  932,
        0,    0,    0,    0,    0,    0,  932,  933,    0,    0,
        0,    0,    0,    0,  933,  934,  934,  934,  934,  934,
      934,  934,  934,  934,  934,  934,  935,  935,  935,  935,
      935,  935,  935,  935,  935,  935,  935,  936,    0,    0,

        0,    0,    0,    0,  936,  937,    0,    0,    0,    0,
        0,    0,  937,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  939,    0,    0,  939,    0,    0,
        0,    0,    0,    0,  939,  940,    0,    0,    0,    0,
        0,    0,  940,  941,  941,  941,  941,  941,  941,  941,
        0,  941,    0,  941,  941,  942,    0,  942,    0,    0,
        0,    0,  942,  943,    0,    0,    0,    0,    0,    0,
      943,  944,  944,    0,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  946,    0,    0,    0,    0,

        0,    0,  946,  947,    0,    0,  947,    0,    0,    0,
        0,    0,    0,  947,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 916 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4715 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 25:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
	    std::string str = "Can\'t convert \'";
	    str += yytext;
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable())
        {
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
        }
	return scan_throw(ID);
    }
	YY_BREAK

case 26:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 72:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{

  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
	std::string str = "Can\'t convert \'";
	str += yytext;
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    yyerror("syntax error, unexpected identifier, expecting end of file");
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer.clear();
      str_opener_column = yylloc.first_column;
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
        scan_step();
}
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 85:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 86:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 87:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
      unput(yytext[yyleng - 1]);
      --yylloc.last_column;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 91:
YY_RULE_SETUP
{
      unput('\'');
      yylloc.last_column--;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 94:
case 95:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 96:
case 97:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 98:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, +b] and plus here is unary and is not removed, as unary plus
    // is not necessary defined for all data types (http://bugzilla.scilab.org/show_bug.cgi?id=15850)
    // A priori, the space *is* coding

    unput('+');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale

    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 101:
YY_RULE_SETUP
{
             // This rule is made to take into account a +... without spaces after plus
             // if one simply ignores the next a situation like this could arise
             // Example
             // =======
             // A = [1 +...
             // 2] 
             //
             // what is meant by the user [1 +2] ? or [1 + 2]
             // simply ignoring the ... would yield the 1st situation [1, 2]
             // We consider this is NOT proper and instead that the user meant a binary plus
             // split is two lines
             // The same rationale applies to minus.

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = PLUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(PLUS);
         }
	YY_BREAK
case 102:
YY_RULE_SETUP
{
             // see {spaces}*{minus}{next} for the rationale

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = MINUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(MINUS);
         }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = TRUE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
      paren_levels.pop();
  }
	YY_BREAK

case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
        // This is important to restore coding spaces as if ... was not present
        unput(' ');
        linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 106:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
        //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
        //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
        wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
        //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
        if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
        {
	    pstBuffer.clear();
	    std::string str = "Can\'t convert \'";
	    str += pstBuffer.c_str();
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.comment = new std::wstring(pwstBuffer);
	pstBuffer.clear();
        FREE (pwstBuffer);
        return scan_throw(COMMENT);
    }
    else
    {
	pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
	str += pstBuffer.c_str();
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 112:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      delete yylval.comment;
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n//";
  }
	YY_BREAK
case 115:
case 116:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 117:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 118:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 124:
case 125:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 126:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 127:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 133:
case 134:
YY_RULE_SETUP
{
   //scan_step();
   pstBuffer += yytext;
  }
	YY_BREAK

case 135:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            //return ID;
        }
    }
	YY_BREAK
case 136:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 139:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 145:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 916 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 916 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 915);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
    std::string str;
    switch(token)
    {
        case AND :                   str = "AND";
                                     break;
        case ASSIGN :                str = "ASSIGN";
                                     break;
        case BOOLFALSE :             str = "BOOLFALSE";
                                     break;
        case BOOLTRUE :              str = "BOOLTRUE";
                                     break;
        case BREAK :                 str = "BREAK";
                                     break;
        case CASE :                  str = "CASE";
                                     break;
        case CATCH :                 str = "CATCH";
                                     break;
        case COLON :                 str = "COLON";
                                     break;
        case COMMA :                 str = "COMMA";
                                     break;
        case COMMENT :               str = "COMMENT";
                                     break;
        case CONTINUE :              str = "CONTINUE";
                                     break;
        case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE";
                                     break;
        case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE";
                                     break;
        case CONTROLTIMES :          str = "CONTROLTIMES";
                                     break;
        case DO :                    str = "DO";
                                     break;
        case DOLLAR :                str = "DOLLAR";
                                     break;
        case DOT :                   str = "DOT";
                                     break;
        case DOTLDIVIDE :            str = "DOTLDIVIDE";
                                     break;
        case DOTPOWER :              str = "DOTPOWER";
                                     break;
        case DOTQUOTE :              str = "DOTQUOTE";
                                     break;
        case DOTRDIVIDE :            str = "DOTRDIVIDE";
                                     break;
        case DOTS :                  str = "DOTS";
                                     break;
        case DOTTIMES :              str = "DOTTIMES";
                                     break;
        case ELSE :                  str = "ELSE";
                                     break;
        case ELSEIF :                str = "ELSEIF";
                                     break;
        case END :                   str = "END";
                                     break;
        case ENDFUNCTION :           str = "ENDFUNCTION";
                                     break;
        case EOL :                   str = "EOL";
                                     break;
        case EQ :                    str = "EQ";
                                     break;
        case FLEX_ERROR :            str = "FLEX_ERROR";
                                     break;
        case FOR :                   str = "FOR";
                                     break;
        case FUNCTION :              str = "FUNCTION";
                                     break;
        case GE :                    str = "GE";
                                     break;
        case GT :                    str = "GT";
                                     break;
        case ID :                    str = "ID";
                                     break;
        case IF :                    str = "IF";
                                     break;
        case KRONLDIVIDE :           str = "KRONLDIVIDE";
                                     break;
        case KRONRDIVIDE :           str = "KRONRDIVIDE";
                                     break;
        case KRONTIMES :             str = "KRONTIMES";
                                     break;
        case LBRACE :                str = "LBRACE";
                                     break;
        case LBRACK :                str = "LBRACK";
                                     break;
        case LDIVIDE :               str = "LDIVIDE";
                                     break;
        case LE :                    str = "LE";
                                     break;
        case LPAREN :                str = "LPAREN";
                                     break;
        case LT :                    str = "LT";
                                     break;
        case MINUS :                 str = "MINUS";
                                     break;
        case NE :                    str = "NE";
                                     break;
        case NOT :                   str = "NOT";
                                     break;
        case NUM :                   str = "NUM";
                                     break;
        case OR :                    str = "OR";
                                     break;
        case OROR :                  str = "OROR";
                                     break;
        case OTHERWISE :             str = "OTHERWISE";
                                     break;
        case PLUS :                  str = "PLUS";
                                     break;
        case POWER :                 str = "POWER";
                                     break;
        case QUOTE :                 str = "QUOTE";
                                     break;
        case RBRACE :                str = "RBRACE";
                                     break;
        case RBRACK :                str = "RBRACK";
                                     break;
        case RDIVIDE :               str = "RDIVIDE";
                                     break;
        case RETURN :                str = "RETURN";
                                     break;
        case RPAREN :                str = "RPAREN";
                                     break;
        case SELECT :                str = "SELECT";
                                     break;
        case SEMI :                  str = "SEMI";
                                     break;
        case SPACES :                str = "SPACES";
                                     break;
        case STR :                   str = "STR";
                                     break;
        case SWITCH :                str = "SWITCH";
                                     break;
        case THEN :                  str = "THEN";
                                     break;
        case TIMES :                 str = "TIMES";
                                     break;
        case TRY :                   str = "TRY";
                                     break;
        case VARFLOAT :              str = "VARFLOAT";
                                     break;
        case VARINT :                str = "VARINT";
                                     break;
        case WHILE :                 str = "WHILE";
                                     break;
        default :                    str = "UNKNOWN";
                                     break;
    }
    return str;

}
#endif

