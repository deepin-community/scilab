<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( https://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) - INRIA
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - 2023 - Samuel GOUGEON
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML"
        xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"
        xml:lang="fr" xml:id="for">
    <refnamediv>
        <refname>for</refname>
        <refpurpose>Ouverture d'une boucle itérative non conditionnelle</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntaxe</title>
        <synopsis>
            for variable = expression, instruction ; .. ; instruction; end

            for variable = expression
                instruction
                ..
                instruction
            end

            for variable = expression do
                instruction,
                ..
                instruction
            end
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Description</title>
        <para>
            Si <literal>expression</literal> est un tableau (homogène ou non),
            <literal>variable</literal> prend les valeurs successives de chaque colonne du
            tableau (ou de <literal>matrix(expression, size(expression,1), -1))</literal>).
        </para>
        <para>
            Un exemple utile : <literal>for variable = n1:pas:n2,  ...,end</literal>
        </para>
        <para>
            Si <literal>expression</literal> est une liste, <function>for</function> itère
            sur les éléments de la liste : <literal>variable</literal> prend chaque
            élément de la liste comme valeurs successives.
        </para>
        <para>
            En accord avec les conventions de codage pour le langage de programmation Scilab,
            il est recommandé de :
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    Commencer chaque instruction sur une nouvelle ligne.
                </para>
            </listitem>
            <listitem>
                <para>
                    Ne pas écrire plus d'une instruction simple par ligne.
                </para>
            </listitem>
            <listitem>
                <para>
                    Séparer les instructions composées sur plusieurs lignes.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            Par exemple, préférer:
        </para>
        <programlisting><![CDATA[
for i = 1:5
    disp(i);
end
]]></programlisting>
        <para>à :</para>
        <programlisting><![CDATA[
for i = 1:5, disp(i); end
]]></programlisting>
    </refsection>
    <refsection>
        <title>Exemples</title>
        <para>Itérations triviales :</para>
        <programlisting role="example"><![CDATA[
for i = 1:4
    factorial(i)
end

// Par valeurs décroissantes
for j = 4:-1:1
    j
end
 ]]></programlisting>
        <para>Itérations implicites sur les colonnes d'un tableau :</para>
        <programlisting role="example"><![CDATA[
M = [1 2 ; 3 4 ; 5 6]'
for  c = M, c, end
 ]]></programlisting>
    <screen><![CDATA[
-> M = [1 2 ; 3 4 ; 5 6]'
 M  =
   1.   3.   5.
   2.   4.   6.

--> for  c = M, c, end
 c  =
   1.
   2.

 c  =
   3.
   4.

 c  =
   5.
   6.
]]></screen>
        <para>Colonnes d'un tableau de cells :</para>
        <programlisting role="example"><![CDATA[
C = {%pi, "This is πι" ; %z^2, %t}
for  c = C, c, end
 ]]></programlisting>
    <screen><![CDATA[
--> C = {%pi, "This is πι" ; %z^2, %t}
 C  = 
  [1x1 constant  ]  [1x1 string ]
  [1x1 polynomial]  [1x1 boolean]


--> for  c = C, c, end
 c  = 
  [1x1 constant  ]
  [1x1 polynomial]

 c  = 
  [1x1 string ]
  [1x1 boolean]
]]></screen>
        <para>Itérations sur les éléments d'une liste :</para>
        <programlisting role="example"><![CDATA[
for l = list([1 2;3 4], (1+%z)^3, 'example', [%F %T]); l, end
 ]]></programlisting>
    <screen><![CDATA[
--> for l = list([1 2;3 4], (1+%z)^3, 'example', [%F %T]); l, end
 l  =
   1.   2.
   3.   4.

 l  =
            2   3
   1 +3z +3z  +z

 l  =
 example

 l  =
  F T
]]></screen>
        <para>Itérations communes (imbriquées ou non) :</para>
        <programlisting role="example"><![CDATA[
n = 5;
for i = 1:n
    for j = 1:n
        a(i,j) = 1/(i+j-1);
    end;
end
for j = 2:n-1
    a(j,j) = j;
end;
a

for v = a, write(%io(2),v), end
for j = 1:n, v = a(:,j), write(%io(2),v), end
 ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>Voir aussi</title>
        <simplelist type="inline">
            <member>
                <link linkend="while">while</link>
            </member>
            <member>
                <link linkend="end">end</link>
            </member>
            <member>
                <link linkend="do">do</link>
            </member>
        </simplelist>
    </refsection>
    <refsection role="history">
        <title>Historique</title>
        <revhistory>
            <revision>
                <revnumber>6.0.0</revnumber>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            L'<literal>expression</literal> alimentant les itérations peut maintenant être
                            un vecteur d'identifiants graphiques.
                            <literal>for</literal> est désormais protégé. Les affectations telles que
                            <literal>for=1</literal> ne sont plus possibles.
                        </listitem>
                        <listitem>
                            Le nombre de caractères constituant le corps d'une instruction conditionnelle (<literal>if</literal>, <literal>while</literal>, <literal>for</literal>, ou <literal>select/case</literal>) n'est plus limité à 16k.
                        </listitem>
                   </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <revnumber>2023.0.0</revnumber>
                <revdescription>
                    <literal>expression</literal> peut être une hypermatrice. Il est alors traité
                    par colonne comme <literal>matrix(expression, size(expression,1), -1)</literal>.
                </revdescription>
            </revision>
        </revhistory>
    </refsection>
</refentry>
