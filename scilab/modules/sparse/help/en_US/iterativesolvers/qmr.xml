<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( https://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) XXXX-2008 - INRIA
 *
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"
          xml:lang="en" xml:id="qmr">
    <refnamediv>
        <refname>qmr</refname>
        <refpurpose>quasi minimal residual method with preconditioning  </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            [x, flag, err, iter, res] = qmr(A, b, x0, M1, M2, maxi, tol)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>A</term>
                <listitem>
                    <para>Square dense or sparse matrix of size n-by-n, or function.</para>
                    <para>
                    If A is a function which returns <literal>A*x</literal> or
                    <literal>A'*x</literal> depending on a option t, it must
                    have the following header: <literal>function y = A(x, t)</literal>
                    </para>
                    <itemizedlist>
                        <listitem>
                            If <literal>t = "notransp"</literal>: the function returns
                            <literal>A*x</literal>.
                        </listitem>
                        <listitem>
                            If <literal>t = "transp"</literal>: the function returns
                            <literal>A'*x</literal>.
                        </listitem>
                    </itemizedlist>
                </listitem>
                <para/>
            </varlistentry>
            <varlistentry>
                <term>b</term>
                <listitem>
                    right hand side vector
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x0</term>
                <listitem>
                    initial guess vector (default: zeros(n,1)).
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>M1</term>
                <listitem>
                    <para>
                    left preconditioner: matrix or function (In the first case, default: eye(n,n)).
                    If <literal>M1</literal> is a function, it returns: <literal>M1*x</literal> or <literal>M1'*x</literal>, depending on <literal>t</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>M2</term>
                <listitem>
                    <para>
                    right preconditioner: matrix or function (In the first case, default: eye(n,n)).
                    If <literal>M2</literal> is a function, it returns: <literal>M2*x</literal> or <literal>M2'*x</literal> depending on <literal>t</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>maxi</term>
                <listitem>
                    maximum number of iterations (default: n)
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>tol</term>
                <listitem>
                    error tolerance (default: 1000*%eps)
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>x</term>
                <listitem>
                    solution vector.
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>flag</term>
                <listitem>
                    <itemizedlist>
                        <listitem>
                            <varname>flag</varname>=0: <literal>qmr</literal> converged to the
                            desired tolerance within <varname>maxi</varname> iterations.
                        </listitem>
                        <listitem>
                            <varname>flag</varname>=1: no convergence up to
                            <varname>maxi</varname> iterations,
                        </listitem>
                        <listitem>
                            <literal>-7 &lt; flag &lt; 0</literal>: A breakdown occurred because
                            one of the scalar quantities calculated was equal to zero.
                        </listitem>
                    </itemizedlist>
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>res</term>
                <listitem>
                    residual vector.
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>err</term>
                <listitem>
                    final residual norm.
                    <para/>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>iter</term>
                <listitem>
                    number of iterations performed.
                    <para/>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            Solves the linear system <literal>Ax=b</literal> using the Quasi Minimal Residual Method
            with preconditioning.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <para>
            If A is a matrix:
        </para>
        <programlisting role="example"><![CDATA[
A = [ 94   0   0   0    0   28  0   0   32  0
       0   59  13  5    0   0   0   10  0   0
       0   13  72  34   2   0   0   0   0   65
       0   5   34  114  0   0   0   0   0   55
       0   0   2   0    70  0   28  32  12  0
       28  0   0   0    0   87  20  0   33  0
       0   0   0   0    28  20  71  39  0   0
       0   10  0   0    32  0   39  46  8   0
       32  0   0   0    12  33  0   8   82  11
       0   0   65  55   0   0   0   0   11  100];
b = ones(10,1);
[x,flag,err,iter,res] = qmr(A, b)

[x,flag,err,iter,res] = qmr(A, b, zeros(10,1), eye(10,10), eye(10,10), 10, 1d-12)
     ]]></programlisting>
        <para>
            If A is a function:
        </para>
        <programlisting role="example"><![CDATA[
function y = Atimesx(x,t)
    A = [ 94  0   0   0    0   28  0   0   32  0
          0   59  13  5    0   0   0   10  0   0
          0   13  72  34   2   0   0   0   0   65
          0   5   34  114  0   0   0   0   0   55
          0   0   2   0    70  0   28  32  12  0
          28  0   0   0    0   87  20  0   33  0
          0   0   0   0    28  20  71  39  0   0
          0   10  0   0    32  0   39  46  8   0
          32  0   0   0    12  33  0   8   82  11
          0   0   65  55   0   0   0   0   11  100];
     if (t == 'notransp') then
        y = A*x;
    elseif (t ==  'transp') then
        y = A'*x;
    end
endfunction
b = ones(10,1);

[x,flag,err,iter,res] = qmr(Atimesx, b)

[x,flag,err,iter,res] = qmr(Atimesx, b, zeros(10,1), eye(10,10), eye(10,10), 10, 1d-12)
     ]]></programlisting>
        <para>
            If A is a matrix, M1 and M2 are functions:
        </para>
        <programlisting role="example"><![CDATA[
A = [ 94   0   0   0    0   28  0   0   32  0
       0   59  13  5    0   0   0   10  0   0
       0   13  72  34   2   0   0   0   0   65
       0   5   34  114  0   0   0   0   0   55
       0   0   2   0    70  0   28  32  12  0
       28  0   0   0    0   87  20  0   33  0
       0   0   0   0    28  20  71  39  0   0
       0   10  0   0    32  0   39  46  8   0
       32  0   0   0    12  33  0   8   82  11
       0   0   65  55   0   0   0   0   11  100];

b = ones(10,1);

function y = M1timesx(x,t)
    M1 = eye(10,10);
    if(t=="notransp") then
        y = M1*x;
    elseif (t=="transp") then
        y = M1'*x;
    end
endfunction

function y = M2timesx(x,t)
    M2 = eye(10,10);
    if(t=="notransp") then
        y = M2*x;
    elseif (t=="transp") then
        y = M2'*x;
    end
endfunction

[x, flag, err, iter, res] = qmr(A, b, zeros(10,1), M1timesx, M2timesx, 10, 1d-12)
     ]]></programlisting>
        <para>
            If A, M1, M2 are functions:
        </para>
        <programlisting role="example"><![CDATA[
// See functions defined above in previous examples. Then,
[x,flag,err,iter,res] = qmr(Atimesx, b, zeros(10,1), M1timesx, M2timesx, 10, 1d-12)
     ]]></programlisting>
    </refsection>
    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="gmres">gmres</link>
            </member>
            <member>
                <link linkend="conjgrad">conjgrad</link>
            </member>
        </simplelist>
    </refsection>
    <refsection>
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>5.4.0</revnumber>
                <revdescription>
                    Calling qmr(A, Ap) is deprecated. qmr(A) should be used instead.
                </revdescription>
            </revision>
            <revision>
                <revnumber>2023.0.0</revnumber>
                <revdescription>
                    Calling qmr(A, Ap) is removed.
                </revdescription>
            </revision>
        </revhistory>
    </refsection>
</refentry>
